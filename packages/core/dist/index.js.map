{"version":3,"sources":["../src/index.ts","../src/distri-client.ts","../src/types.ts"],"sourcesContent":["// Main exports for @distri/core package\n\nexport { DistriClient } from './distri-client';\n\nexport * from './types';\n\n// Re-export only the client-side types from @a2a-js/sdk\nexport type {\n  AgentCard,\n  Message,\n  Task,\n  TaskState,\n  TaskStatusUpdateEvent,\n  TaskArtifactUpdateEvent,\n  JSONRPCRequest,\n  JSONRPCResponse,\n  MessageSendParams,\n  TextPart,\n  FilePart,\n  DataPart,\n  Part\n} from \"@a2a-js/sdk\";\n\n// Export event types and decoder\nexport type {\n  TextDeltaEvent,\n  TaskStatusChangedEvent,\n  TaskCompletedEvent,\n  TaskErrorEvent,\n  TaskCanceledEvent,\n  AgentStatusChangedEvent,\n  DistriEvent\n} from './distri-client';\n\nexport { decodeSSEEvent } from './distri-client';\n","import { EventEmitter } from 'eventemitter3';\nimport { \n  AgentCard, \n  Message, \n  TaskStatusUpdateEvent, \n  TaskArtifactUpdateEvent, \n  TextPart, \n  JSONRPCRequest, \n  JSONRPCResponse, \n  MessageSendParams, \n  Task,\n  TaskState\n} from '@a2a-js/sdk';\nimport {\n  DistriClientConfig,\n  DistriError,\n  ApiError,\n  A2AProtocolError,\n  ConnectionError\n} from './types';\n\n// Additional event types for SSE\nexport interface TextDeltaEvent {\n  type: 'text_delta';\n  task_id: string;\n  delta: string;\n  timestamp: number;\n}\n\nexport interface TaskStatusChangedEvent {\n  type: 'task_status_changed';\n  task_id: string;\n  status: TaskState;\n  timestamp: number;\n}\n\nexport interface TaskCompletedEvent {\n  type: 'task_completed';\n  task_id: string;\n  timestamp: number;\n}\n\nexport interface TaskErrorEvent {\n  type: 'task_error';\n  task_id: string;\n  error: string;\n  timestamp: number;\n}\n\nexport interface TaskCanceledEvent {\n  type: 'task_canceled';\n  task_id: string;\n  timestamp: number;\n}\n\nexport interface AgentStatusChangedEvent {\n  type: 'agent_status_changed';\n  agent_id: string;\n  status: string;\n  timestamp: number;\n}\n\nexport type DistriEvent = \n  | TextDeltaEvent \n  | TaskStatusChangedEvent \n  | TaskCompletedEvent \n  | TaskErrorEvent \n  | TaskCanceledEvent \n  | AgentStatusChangedEvent\n  | TaskStatusUpdateEvent\n  | TaskArtifactUpdateEvent;\n\n// Helper to decode SSE events\nexport function decodeSSEEvent(data: string): DistriEvent | null {\n  try {\n    const parsed = JSON.parse(data);\n    \n    // Validate that it has the expected structure\n    if (!parsed || typeof parsed !== 'object' || !parsed.type) {\n      return null;\n    }\n\n    // Basic validation for required fields\n    switch (parsed.type) {\n      case 'text_delta':\n        if (parsed.task_id && typeof parsed.delta === 'string') {\n          return parsed as TextDeltaEvent;\n        }\n        break;\n      case 'task_status_changed':\n        if (parsed.task_id && parsed.status) {\n          return parsed as TaskStatusChangedEvent;\n        }\n        break;\n      case 'task_completed':\n      case 'task_error':\n      case 'task_canceled':\n        if (parsed.task_id) {\n          return parsed as TaskCompletedEvent | TaskErrorEvent | TaskCanceledEvent;\n        }\n        break;\n      case 'agent_status_changed':\n        if (parsed.agent_id) {\n          return parsed as AgentStatusChangedEvent;\n        }\n        break;\n      case 'status-update':\n        // This is from A2A SDK\n        return parsed as TaskStatusUpdateEvent;\n      case 'artifact-update':\n        // This is from A2A SDK\n        return parsed as TaskArtifactUpdateEvent;\n    }\n    \n    return null;\n  } catch (error) {\n    console.warn('Failed to decode SSE event:', error);\n    return null;\n  }\n}\n\n/**\n * Main Distri Client for interacting with Distri server\n * Uses HTTP API with JSON-RPC and Server-Sent Events\n */\nexport class DistriClient extends EventEmitter {\n  private config: Required<DistriClientConfig>;\n  private eventSources = new Map<string, EventSource>();\n  private requestIdCounter = 0;\n\n  constructor(config: DistriClientConfig) {\n    super();\n\n    this.config = {\n      baseUrl: config.baseUrl.replace(/\\/$/, ''),\n      apiVersion: config.apiVersion || 'v1',\n      timeout: config.timeout || 30000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n      debug: config.debug || false,\n      headers: config.headers || {}\n    };\n  }\n\n  /**\n   * Get all available agents\n   */\n  async getAgents(): Promise<AgentCard[]> {\n    try {\n      const response = await this.fetch(`/api/${this.config.apiVersion}/agents`);\n      if (!response.ok) {\n        throw new ApiError(`Failed to fetch agents: ${response.statusText}`, response.status);\n      }\n\n      const data = await response.json();\n      // Handle both array response and object with agents property\n      return Array.isArray(data) ? data : data.agents || [];\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError('Failed to fetch agents', 'FETCH_ERROR', error);\n    }\n  }\n\n  /**\n   * Get specific agent card\n   */\n  async getAgent(agentId: string): Promise<AgentCard> {\n    try {\n      const response = await this.fetch(`/api/${this.config.apiVersion}/agents/${agentId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new ApiError(`Agent not found: ${agentId}`, 404);\n        }\n        throw new ApiError(`Failed to fetch agent: ${response.statusText}`, response.status);\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError(`Failed to fetch agent ${agentId}`, 'FETCH_ERROR', error);\n    }\n  }\n\n  /**\n   * Send a message to an agent using JSON-RPC\n   */\n  async sendMessage(agentId: string, params: MessageSendParams): Promise<JSONRPCResponse> {\n    const jsonRpcRequest = {\n      jsonrpc: \"2.0\" as const,\n      method: \"message/send\" as const,\n      params,\n      id: this.generateRequestId()\n    };\n\n    return this.sendJsonRpcRequest(agentId, jsonRpcRequest);\n  }\n\n  /**\n   * Send a streaming message to an agent\n   */\n  async sendStreamingMessage(agentId: string, params: MessageSendParams): Promise<JSONRPCResponse> {\n    const jsonRpcRequest = {\n      jsonrpc: \"2.0\" as const,\n      method: \"message/stream\" as const,\n      params,\n      id: this.generateRequestId()\n    };\n\n    return this.sendJsonRpcRequest(agentId, jsonRpcRequest);\n  }\n\n  /**\n   * Create a task (convenience method)\n   */\n  async createTask(agentId: string, message: Message): Promise<Task> {\n    const params: MessageSendParams = {\n      message,\n      configuration: {\n        acceptedOutputModes: ['text/plain'],\n        blocking: true,\n      }\n    };\n\n    const response = await this.sendMessage(agentId, params);\n\n    if ('error' in response) {\n      throw new A2AProtocolError(response.error.message, response.error);\n    }\n\n    return response.result as Task;\n  }\n\n  /**\n   * Get task details\n   */\n  async getTask(taskId: string): Promise<Task> {\n    try {\n      const response = await this.fetch(`/api/${this.config.apiVersion}/tasks/${taskId}`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new ApiError(`Task not found: ${taskId}`, 404);\n        }\n        throw new ApiError(`Failed to fetch task: ${response.statusText}`, response.status);\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError(`Failed to fetch task ${taskId}`, 'FETCH_ERROR', error);\n    }\n  }\n\n  /**\n   * Cancel a task\n   */\n  async cancelTask(_taskId: string): Promise<void> {\n    throw new DistriError('Task cancellation not yet implemented', 'NOT_IMPLEMENTED');\n  }\n\n  /**\n   * Subscribe to agent events via Server-Sent Events\n   */\n  subscribeToAgent(agentId: string): EventSource {\n    const existingSource = this.eventSources.get(agentId);\n    if (existingSource) {\n      return existingSource;\n    }\n\n    const url = `${this.config.baseUrl}/api/${this.config.apiVersion}/agents/${agentId}/events`;\n    const eventSource = new EventSource(url);\n\n    eventSource.onopen = () => {\n      this.debug(`Connected to agent ${agentId} event stream`);\n      this.emit('agent_stream_connected', agentId);\n    };\n\n    eventSource.onmessage = (event) => {\n      try {\n        const decodedEvent = decodeSSEEvent(event.data);\n        if (decodedEvent) {\n          this.handleEvent(decodedEvent);\n        }\n      } catch (error) {\n        this.debug('Failed to parse SSE event:', error);\n      }\n    };\n\n    eventSource.onerror = (error) => {\n      this.debug(`SSE error for agent ${agentId}:`, error);\n      this.emit('agent_stream_error', agentId, error);\n    };\n\n    this.eventSources.set(agentId, eventSource);\n    return eventSource;\n  }\n\n  /**\n   * Subscribe to task events\n   */\n  subscribeToTask(taskId: string): void {\n    this.emit('task_subscribed', taskId);\n  }\n\n  /**\n   * Unsubscribe from agent events\n   */\n  unsubscribeFromAgent(agentId: string): void {\n    const eventSource = this.eventSources.get(agentId);\n    if (eventSource) {\n      eventSource.close();\n      this.eventSources.delete(agentId);\n      this.emit('agent_stream_disconnected', agentId);\n    }\n  }\n\n  /**\n   * Close all connections\n   */\n  disconnect(): void {\n    this.eventSources.forEach((eventSource) => {\n      eventSource.close();\n    });\n    this.eventSources.clear();\n  }\n\n  /**\n   * Send a JSON-RPC request to an agent\n   */\n  private async sendJsonRpcRequest(agentId: string, request: any): Promise<JSONRPCResponse> {\n    try {\n      const response = await this.fetch(`/api/${this.config.apiVersion}/agents/${agentId}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          ...this.config.headers\n        },\n        body: JSON.stringify(request)\n      });\n\n      if (!response.ok) {\n        throw new ApiError(`JSON-RPC request failed: ${response.statusText}`, response.status);\n      }\n\n      const jsonResponse: JSONRPCResponse = await response.json();\n\n      if ('error' in jsonResponse) {\n        throw new A2AProtocolError(jsonResponse.error.message, jsonResponse.error);\n      }\n\n      return jsonResponse;\n    } catch (error) {\n      if (error instanceof ApiError || error instanceof A2AProtocolError) {\n        throw error;\n      }\n      throw new DistriError('JSON-RPC request failed', 'RPC_ERROR', error);\n    }\n  }\n\n  /**\n   * Handle incoming SSE events\n   */\n  private handleEvent(event: DistriEvent): void {\n    this.debug('Received event:', event);\n    \n    // Handle different event types\n    if ('type' in event) {\n      // Emit the specific event type for custom events\n      this.emit(event.type, event);\n    } else if ('kind' in event) {\n      // Handle A2A SDK events (TaskStatusUpdateEvent, TaskArtifactUpdateEvent)\n      this.emit(event.kind, event);\n    }\n    \n    // Also emit a generic 'event' for any listeners\n    this.emit('event', event);\n  }\n\n  /**\n   * Enhanced fetch with retry logic\n   */\n  private async fetch(path: string, options?: RequestInit): Promise<Response> {\n    const url = `${this.config.baseUrl}${path}`;\n    let lastError: Error | undefined;\n\n    for (let attempt = 0; attempt <= this.config.retryAttempts; attempt++) {\n      try {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\n\n        const response = await fetch(url, {\n          ...options,\n          signal: controller.signal,\n          headers: {\n            ...this.config.headers,\n            ...options?.headers\n          }\n        });\n\n        clearTimeout(timeoutId);\n        return response;\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        if (attempt < this.config.retryAttempts) {\n          this.debug(`Request failed (attempt ${attempt + 1}), retrying in ${this.config.retryDelay}ms...`);\n          await this.delay(this.config.retryDelay);\n        }\n      }\n    }\n\n    throw lastError!;\n  }\n\n  /**\n   * Generate unique request ID\n   */\n  private generateRequestId(): string {\n    return `req-${Date.now()}-${++this.requestIdCounter}`;\n  }\n\n  /**\n   * Delay utility\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Debug logging\n   */\n  private debug(...args: any[]): void {\n    if (this.config.debug) {\n      console.log('[DistriClient]', ...args);\n    }\n  }\n\n  /**\n   * Helper method to create A2A messages\n   */\n  static createMessage(\n    messageId: string,\n    text: string,\n    role: 'agent' | 'user' = 'user',\n    contextId?: string\n  ): Message {\n    return {\n      messageId,\n      role,\n      parts: [{ kind: 'text', text }],\n      contextId,\n      kind: 'message'\n    };\n  }\n\n  /**\n   * Helper method to create message send parameters\n   */\n  static createMessageParams(\n    message: Message,\n    configuration?: MessageSendParams['configuration']\n  ): MessageSendParams {\n    return {\n      message,\n      configuration: {\n        acceptedOutputModes: ['text/plain'],\n        blocking: true,\n        ...configuration\n      }\n    };\n  }\n}","// Distri Framework Types - Based on A2A Protocol and SSE\n\nexport interface Agent {\n  id: string;\n  name: string;\n  description: string;\n  status: 'online' | 'offline';\n}\n\nexport interface Thread {\n  id: string;\n  title: string;\n  agent_id: string;\n  agent_name: string;\n  updated_at: string;\n  message_count: number;\n  last_message?: string;\n}\n\nexport interface ChatProps {\n  thread: Thread;\n  agent: Agent;\n  onThreadUpdate?: () => void;\n}\n\n\n\n/**\n * Connection Status\n */\nexport type ConnectionStatus = 'connecting' | 'connected' | 'disconnected' | 'error';\n\n/**\n * Distri Client Configuration\n */\nexport interface DistriClientConfig {\n  baseUrl: string;\n  apiVersion?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n  debug?: boolean;\n  headers?: Record<string, string>;\n}\n\n/**\n * Error Types\n */\nexport class DistriError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'DistriError';\n  }\n}\n\nexport class A2AProtocolError extends DistriError {\n  constructor(message: string, details?: any) {\n    super(message, 'A2A_PROTOCOL_ERROR', details);\n    this.name = 'A2AProtocolError';\n  }\n}\n\nexport class ApiError extends DistriError {\n  constructor(message: string, public statusCode: number, details?: any) {\n    super(message, 'API_ERROR', details);\n    this.name = 'ApiError';\n  }\n}\n\nexport class ConnectionError extends DistriError {\n  constructor(message: string, details?: any) {\n    super(message, 'CONNECTION_ERROR', details);\n    this.name = 'ConnectionError';\n  }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA,2BAA6B;;;ACgDtB,IAAM,cAAN,cAA0B,MAAM;AAAA,EACrC,YACE,SACO,MACA,SACP;AACA,UAAM,OAAO;AAHN;AACA;AAGP,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,mBAAN,cAA+B,YAAY;AAAA,EAChD,YAAY,SAAiB,SAAe;AAC1C,UAAM,SAAS,sBAAsB,OAAO;AAC5C,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,WAAN,cAAuB,YAAY;AAAA,EACxC,YAAY,SAAwB,YAAoB,SAAe;AACrE,UAAM,SAAS,aAAa,OAAO;AADD;AAElC,SAAK,OAAO;AAAA,EACd;AACF;AAEO,IAAM,kBAAN,cAA8B,YAAY;AAAA,EAC/C,YAAY,SAAiB,SAAe;AAC1C,UAAM,SAAS,oBAAoB,OAAO;AAC1C,SAAK,OAAO;AAAA,EACd;AACF;;;ADLO,SAAS,eAAe,MAAkC;AAC/D,MAAI;AACF,UAAM,SAAS,KAAK,MAAM,IAAI;AAG9B,QAAI,CAAC,UAAU,OAAO,WAAW,YAAY,CAAC,OAAO,MAAM;AACzD,aAAO;AAAA,IACT;AAGA,YAAQ,OAAO,MAAM;AAAA,MACnB,KAAK;AACH,YAAI,OAAO,WAAW,OAAO,OAAO,UAAU,UAAU;AACtD,iBAAO;AAAA,QACT;AACA;AAAA,MACF,KAAK;AACH,YAAI,OAAO,WAAW,OAAO,QAAQ;AACnC,iBAAO;AAAA,QACT;AACA;AAAA,MACF,KAAK;AAAA,MACL,KAAK;AAAA,MACL,KAAK;AACH,YAAI,OAAO,SAAS;AAClB,iBAAO;AAAA,QACT;AACA;AAAA,MACF,KAAK;AACH,YAAI,OAAO,UAAU;AACnB,iBAAO;AAAA,QACT;AACA;AAAA,MACF,KAAK;AAEH,eAAO;AAAA,MACT,KAAK;AAEH,eAAO;AAAA,IACX;AAEA,WAAO;AAAA,EACT,SAAS,OAAO;AACd,YAAQ,KAAK,+BAA+B,KAAK;AACjD,WAAO;AAAA,EACT;AACF;AAMO,IAAM,eAAN,cAA2B,kCAAa;AAAA,EAK7C,YAAY,QAA4B;AACtC,UAAM;AAJR,SAAQ,eAAe,oBAAI,IAAyB;AACpD,SAAQ,mBAAmB;AAKzB,SAAK,SAAS;AAAA,MACZ,SAAS,OAAO,QAAQ,QAAQ,OAAO,EAAE;AAAA,MACzC,YAAY,OAAO,cAAc;AAAA,MACjC,SAAS,OAAO,WAAW;AAAA,MAC3B,eAAe,OAAO,iBAAiB;AAAA,MACvC,YAAY,OAAO,cAAc;AAAA,MACjC,OAAO,OAAO,SAAS;AAAA,MACvB,SAAS,OAAO,WAAW,CAAC;AAAA,IAC9B;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAkC;AACtC,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,MAAM,QAAQ,KAAK,OAAO,UAAU,SAAS;AACzE,UAAI,CAAC,SAAS,IAAI;AAChB,cAAM,IAAI,SAAS,2BAA2B,SAAS,UAAU,IAAI,SAAS,MAAM;AAAA,MACtF;AAEA,YAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,aAAO,MAAM,QAAQ,IAAI,IAAI,OAAO,KAAK,UAAU,CAAC;AAAA,IACtD,SAAS,OAAO;AACd,UAAI,iBAAiB;AAAU,cAAM;AACrC,YAAM,IAAI,YAAY,0BAA0B,eAAe,KAAK;AAAA,IACtE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS,SAAqC;AAClD,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,MAAM,QAAQ,KAAK,OAAO,UAAU,WAAW,OAAO,EAAE;AACpF,UAAI,CAAC,SAAS,IAAI;AAChB,YAAI,SAAS,WAAW,KAAK;AAC3B,gBAAM,IAAI,SAAS,oBAAoB,OAAO,IAAI,GAAG;AAAA,QACvD;AACA,cAAM,IAAI,SAAS,0BAA0B,SAAS,UAAU,IAAI,SAAS,MAAM;AAAA,MACrF;AAEA,aAAO,MAAM,SAAS,KAAK;AAAA,IAC7B,SAAS,OAAO;AACd,UAAI,iBAAiB;AAAU,cAAM;AACrC,YAAM,IAAI,YAAY,yBAAyB,OAAO,IAAI,eAAe,KAAK;AAAA,IAChF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAAY,SAAiB,QAAqD;AACtF,UAAM,iBAAiB;AAAA,MACrB,SAAS;AAAA,MACT,QAAQ;AAAA,MACR;AAAA,MACA,IAAI,KAAK,kBAAkB;AAAA,IAC7B;AAEA,WAAO,KAAK,mBAAmB,SAAS,cAAc;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,qBAAqB,SAAiB,QAAqD;AAC/F,UAAM,iBAAiB;AAAA,MACrB,SAAS;AAAA,MACT,QAAQ;AAAA,MACR;AAAA,MACA,IAAI,KAAK,kBAAkB;AAAA,IAC7B;AAEA,WAAO,KAAK,mBAAmB,SAAS,cAAc;AAAA,EACxD;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAW,SAAiB,SAAiC;AACjE,UAAM,SAA4B;AAAA,MAChC;AAAA,MACA,eAAe;AAAA,QACb,qBAAqB,CAAC,YAAY;AAAA,QAClC,UAAU;AAAA,MACZ;AAAA,IACF;AAEA,UAAM,WAAW,MAAM,KAAK,YAAY,SAAS,MAAM;AAEvD,QAAI,WAAW,UAAU;AACvB,YAAM,IAAI,iBAAiB,SAAS,MAAM,SAAS,SAAS,KAAK;AAAA,IACnE;AAEA,WAAO,SAAS;AAAA,EAClB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,QAAQ,QAA+B;AAC3C,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,MAAM,QAAQ,KAAK,OAAO,UAAU,UAAU,MAAM,EAAE;AAClF,UAAI,CAAC,SAAS,IAAI;AAChB,YAAI,SAAS,WAAW,KAAK;AAC3B,gBAAM,IAAI,SAAS,mBAAmB,MAAM,IAAI,GAAG;AAAA,QACrD;AACA,cAAM,IAAI,SAAS,yBAAyB,SAAS,UAAU,IAAI,SAAS,MAAM;AAAA,MACpF;AAEA,aAAO,MAAM,SAAS,KAAK;AAAA,IAC7B,SAAS,OAAO;AACd,UAAI,iBAAiB;AAAU,cAAM;AACrC,YAAM,IAAI,YAAY,wBAAwB,MAAM,IAAI,eAAe,KAAK;AAAA,IAC9E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAW,SAAgC;AAC/C,UAAM,IAAI,YAAY,yCAAyC,iBAAiB;AAAA,EAClF;AAAA;AAAA;AAAA;AAAA,EAKA,iBAAiB,SAA8B;AAC7C,UAAM,iBAAiB,KAAK,aAAa,IAAI,OAAO;AACpD,QAAI,gBAAgB;AAClB,aAAO;AAAA,IACT;AAEA,UAAM,MAAM,GAAG,KAAK,OAAO,OAAO,QAAQ,KAAK,OAAO,UAAU,WAAW,OAAO;AAClF,UAAM,cAAc,IAAI,YAAY,GAAG;AAEvC,gBAAY,SAAS,MAAM;AACzB,WAAK,MAAM,sBAAsB,OAAO,eAAe;AACvD,WAAK,KAAK,0BAA0B,OAAO;AAAA,IAC7C;AAEA,gBAAY,YAAY,CAAC,UAAU;AACjC,UAAI;AACF,cAAM,eAAe,eAAe,MAAM,IAAI;AAC9C,YAAI,cAAc;AAChB,eAAK,YAAY,YAAY;AAAA,QAC/B;AAAA,MACF,SAAS,OAAO;AACd,aAAK,MAAM,8BAA8B,KAAK;AAAA,MAChD;AAAA,IACF;AAEA,gBAAY,UAAU,CAAC,UAAU;AAC/B,WAAK,MAAM,uBAAuB,OAAO,KAAK,KAAK;AACnD,WAAK,KAAK,sBAAsB,SAAS,KAAK;AAAA,IAChD;AAEA,SAAK,aAAa,IAAI,SAAS,WAAW;AAC1C,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA,EAKA,gBAAgB,QAAsB;AACpC,SAAK,KAAK,mBAAmB,MAAM;AAAA,EACrC;AAAA;AAAA;AAAA;AAAA,EAKA,qBAAqB,SAAuB;AAC1C,UAAM,cAAc,KAAK,aAAa,IAAI,OAAO;AACjD,QAAI,aAAa;AACf,kBAAY,MAAM;AAClB,WAAK,aAAa,OAAO,OAAO;AAChC,WAAK,KAAK,6BAA6B,OAAO;AAAA,IAChD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,aAAmB;AACjB,SAAK,aAAa,QAAQ,CAAC,gBAAgB;AACzC,kBAAY,MAAM;AAAA,IACpB,CAAC;AACD,SAAK,aAAa,MAAM;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,mBAAmB,SAAiB,SAAwC;AACxF,QAAI;AACF,YAAM,WAAW,MAAM,KAAK,MAAM,QAAQ,KAAK,OAAO,UAAU,WAAW,OAAO,IAAI;AAAA,QACpF,QAAQ;AAAA,QACR,SAAS;AAAA,UACP,gBAAgB;AAAA,UAChB,GAAG,KAAK,OAAO;AAAA,QACjB;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAC9B,CAAC;AAED,UAAI,CAAC,SAAS,IAAI;AAChB,cAAM,IAAI,SAAS,4BAA4B,SAAS,UAAU,IAAI,SAAS,MAAM;AAAA,MACvF;AAEA,YAAM,eAAgC,MAAM,SAAS,KAAK;AAE1D,UAAI,WAAW,cAAc;AAC3B,cAAM,IAAI,iBAAiB,aAAa,MAAM,SAAS,aAAa,KAAK;AAAA,MAC3E;AAEA,aAAO;AAAA,IACT,SAAS,OAAO;AACd,UAAI,iBAAiB,YAAY,iBAAiB,kBAAkB;AAClE,cAAM;AAAA,MACR;AACA,YAAM,IAAI,YAAY,2BAA2B,aAAa,KAAK;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKQ,YAAY,OAA0B;AAC5C,SAAK,MAAM,mBAAmB,KAAK;AAGnC,QAAI,UAAU,OAAO;AAEnB,WAAK,KAAK,MAAM,MAAM,KAAK;AAAA,IAC7B,WAAW,UAAU,OAAO;AAE1B,WAAK,KAAK,MAAM,MAAM,KAAK;AAAA,IAC7B;AAGA,SAAK,KAAK,SAAS,KAAK;AAAA,EAC1B;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,MAAM,MAAc,SAA0C;AAC1E,UAAM,MAAM,GAAG,KAAK,OAAO,OAAO,GAAG,IAAI;AACzC,QAAI;AAEJ,aAAS,UAAU,GAAG,WAAW,KAAK,OAAO,eAAe,WAAW;AACrE,UAAI;AACF,cAAM,aAAa,IAAI,gBAAgB;AACvC,cAAM,YAAY,WAAW,MAAM,WAAW,MAAM,GAAG,KAAK,OAAO,OAAO;AAE1E,cAAM,WAAW,MAAM,MAAM,KAAK;AAAA,UAChC,GAAG;AAAA,UACH,QAAQ,WAAW;AAAA,UACnB,SAAS;AAAA,YACP,GAAG,KAAK,OAAO;AAAA,YACf,GAAG,SAAS;AAAA,UACd;AAAA,QACF,CAAC;AAED,qBAAa,SAAS;AACtB,eAAO;AAAA,MACT,SAAS,OAAO;AACd,oBAAY,iBAAiB,QAAQ,QAAQ,IAAI,MAAM,OAAO,KAAK,CAAC;AAEpE,YAAI,UAAU,KAAK,OAAO,eAAe;AACvC,eAAK,MAAM,2BAA2B,UAAU,CAAC,kBAAkB,KAAK,OAAO,UAAU,OAAO;AAChG,gBAAM,KAAK,MAAM,KAAK,OAAO,UAAU;AAAA,QACzC;AAAA,MACF;AAAA,IACF;AAEA,UAAM;AAAA,EACR;AAAA;AAAA;AAAA;AAAA,EAKQ,oBAA4B;AAClC,WAAO,OAAO,KAAK,IAAI,CAAC,IAAI,EAAE,KAAK,gBAAgB;AAAA,EACrD;AAAA;AAAA;AAAA;AAAA,EAKQ,MAAM,IAA2B;AACvC,WAAO,IAAI,QAAQ,aAAW,WAAW,SAAS,EAAE,CAAC;AAAA,EACvD;AAAA;AAAA;AAAA;AAAA,EAKQ,SAAS,MAAmB;AAClC,QAAI,KAAK,OAAO,OAAO;AACrB,cAAQ,IAAI,kBAAkB,GAAG,IAAI;AAAA,IACvC;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,cACL,WACA,MACA,OAAyB,QACzB,WACS;AACT,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA,OAAO,CAAC,EAAE,MAAM,QAAQ,KAAK,CAAC;AAAA,MAC9B;AAAA,MACA,MAAM;AAAA,IACR;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,oBACL,SACA,eACmB;AACnB,WAAO;AAAA,MACL;AAAA,MACA,eAAe;AAAA,QACb,qBAAqB,CAAC,YAAY;AAAA,QAClC,UAAU;AAAA,QACV,GAAG;AAAA,MACL;AAAA,IACF;AAAA,EACF;AACF;","names":[]}