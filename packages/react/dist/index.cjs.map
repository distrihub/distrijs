{"version":3,"sources":["../src/index.ts","../src/useAgent.ts","../../../node_modules/.pnpm/@a2a-js+sdk@https+++codeload.github.com+v3g42+a2a-js+tar.gz+51444c9/node_modules/@a2a-js/sdk/dist/chunk-CUGIRVQB.js","../../core/src/types.ts","../../core/src/distri-client.ts","../../core/src/agent.ts","../src/DistriProvider.tsx","../src/components/ThemeProvider.tsx","../src/useAgents.ts","../src/useChat.ts","../src/useThreads.ts","../src/useTools.ts","../src/components/EmbeddableChat.tsx","../src/components/MessageComponents.tsx","../src/components/MessageRenderer.tsx","../src/components/ChatContext.tsx","../src/utils/messageUtils.ts","../src/components/AgentDropdown.tsx","../src/components/ChatInput.tsx","../src/components/FullChat.tsx","../src/components/ModeToggle.tsx","../src/components/ChatContainer.tsx","../src/components/Chat.tsx","../src/components/ui/button.tsx","../src/components/ui/utils.ts","../src/components/ui/input.tsx","../src/components/ui/card.tsx","../src/components/ui/badge.tsx","../src/components/ui/dialog.tsx","../src/components/ui/textarea.tsx","../src/components/ApprovalDialog.tsx","../src/components/ThemeToggle.tsx","../src/components/ThemeDropdown.tsx","../src/components/Toast.tsx"],"sourcesContent":["// Core hooks\nexport { useAgent } from './useAgent';\nexport { useAgents } from './useAgents';\nexport { useChat } from './useChat';\nexport { useThreads } from './useThreads';\nexport { useTools } from './useTools';\n\n// Core components\nexport { DistriProvider } from './DistriProvider';\nexport { ChatContainer } from './components/ChatContainer';\nexport { Chat } from './components/Chat';\nexport { EmbeddableChat } from './components/EmbeddableChat';\nexport { FullChat } from './components/FullChat';\nexport { ThemeProvider, useTheme } from './components/ThemeProvider';\n\n// UI Components - shadcn\nexport { Button } from './components/ui/button';\nexport { Input } from './components/ui/input';\nexport { Card, CardHeader, CardContent, CardFooter, CardTitle, CardDescription } from './components/ui/card';\nexport { Badge } from './components/ui/badge';\nexport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from './components/ui/dialog';\nexport { Textarea } from './components/ui/textarea';\n\n// Legacy exports (deprecated - use shadcn components instead)\nexport { AgentDropdown } from './components/AgentDropdown';\nexport { default as ApprovalDialog } from './components/ApprovalDialog';\nexport { ChatInput } from './components/ChatInput';\nexport { default as MessageRenderer } from './components/MessageRenderer';\nexport { ThemeToggle } from './components/ThemeToggle';\nexport { ThemeDropdown } from './components/ThemeDropdown';\nexport { ModeToggle } from './components/ModeToggle';\nexport { default as Toast } from './components/Toast';\n\n// Utilities\nexport { cn } from './components/ui/utils';","import React, { useState, useCallback, useRef } from 'react';\nimport {\n  Agent,\n} from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseAgentOptions {\n  agentId: string;\n  autoCreateAgent?: boolean;\n}\n\nexport interface UseAgentResult {\n  // Agent information\n  agent: Agent | null;\n\n  // State management\n  loading: boolean;\n  error: Error | null;\n}\n\n/**\n * useAgent is for agent configuration and invocation.\n * For chat UIs, use useChat instead.\n */\nexport function useAgent({\n  agentId,\n  autoCreateAgent = true,\n}: UseAgentOptions): UseAgentResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [agent, setAgent] = useState<Agent | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const agentRef = useRef<Agent | null>(null);\n\n  // Initialize agent\n  const initializeAgent = useCallback(async () => {\n    if (!client || !agentId || agentRef.current) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const newAgent = await Agent.create(agentId, client);\n      agentRef.current = newAgent;\n      setAgent(newAgent);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to create agent'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client, agentId]);\n\n  // Auto-initialize agent when client is ready\n  React.useEffect(() => {\n    if (!clientLoading && !clientError && autoCreateAgent && client) {\n      initializeAgent();\n    }\n  }, [clientLoading, clientError, autoCreateAgent, client, initializeAgent]);\n\n\n  return {\n    // Agent information\n    agent,\n\n    // State management\n    loading: loading || clientLoading,\n    error: error || clientError,\n  };\n}\n\n","// src/client/client.ts\nvar A2AClient = class {\n  agentBaseUrl;\n  agentCardPromise;\n  requestIdCounter = 1;\n  serviceEndpointUrl;\n  // To be populated from AgentCard after fetching\n  fetchFn;\n  /**\n   * Constructs an A2AClient instance.\n   * It initiates fetching the agent card from the provided agent baseUrl.\n   * The Agent Card is expected at `${agentBaseUrl}/.well-known/agent.json`.\n   * The `url` field from the Agent Card will be used as the RPC service endpoint.\n   * @param agentBaseUrl The base URL of the A2A agent (e.g., https://agent.example.com).\n   */\n  constructor(agentBaseUrl, fetchFn) {\n    this.agentBaseUrl = agentBaseUrl.replace(/\\/$/, \"\");\n    this.fetchFn = fetchFn || globalThis.fetch;\n    this.agentCardPromise = this._fetchAndCacheAgentCard();\n  }\n  /**\n   * Fetches the Agent Card from the agent's well-known URI and caches its service endpoint URL.\n   * This method is called by the constructor.\n   * @returns A Promise that resolves to the AgentCard.\n   */\n  async _fetchAndCacheAgentCard() {\n    const agentCardUrl = `${this.agentBaseUrl}/.well-known/agent.json`;\n    try {\n      const response = await this.fetchFn(agentCardUrl, {\n        headers: { \"Accept\": \"application/json\" }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch Agent Card from ${agentCardUrl}: ${response.status} ${response.statusText}`);\n      }\n      const agentCard = await response.json();\n      if (!agentCard.url) {\n        throw new Error(\"Fetched Agent Card does not contain a valid 'url' for the service endpoint.\");\n      }\n      this.serviceEndpointUrl = agentCard.url;\n      return agentCard;\n    } catch (error) {\n      console.error(\"Error fetching or parsing Agent Card:\");\n      throw error;\n    }\n  }\n  /**\n   * Retrieves the Agent Card.\n   * If an `agentBaseUrl` is provided, it fetches the card from that specific URL.\n   * Otherwise, it returns the card fetched and cached during client construction.\n   * @param agentBaseUrl Optional. The base URL of the agent to fetch the card from.\n   * If provided, this will fetch a new card, not use the cached one from the constructor's URL.\n   * @returns A Promise that resolves to the AgentCard.\n   */\n  async getAgentCard(agentBaseUrl) {\n    if (agentBaseUrl) {\n      const specificAgentBaseUrl = agentBaseUrl.replace(/\\/$/, \"\");\n      const agentCardUrl = `${specificAgentBaseUrl}/.well-known/agent.json`;\n      const response = await this.fetchFn(agentCardUrl, {\n        headers: { \"Accept\": \"application/json\" }\n      });\n      if (!response.ok) {\n        throw new Error(`Failed to fetch Agent Card from ${agentCardUrl}: ${response.status} ${response.statusText}`);\n      }\n      return await response.json();\n    }\n    return this.agentCardPromise;\n  }\n  /**\n   * Gets the RPC service endpoint URL. Ensures the agent card has been fetched first.\n   * @returns A Promise that resolves to the service endpoint URL string.\n   */\n  async _getServiceEndpoint() {\n    if (this.serviceEndpointUrl) {\n      return this.serviceEndpointUrl;\n    }\n    await this.agentCardPromise;\n    if (!this.serviceEndpointUrl) {\n      throw new Error(\"Agent Card URL for RPC endpoint is not available. Fetching might have failed.\");\n    }\n    return this.serviceEndpointUrl;\n  }\n  /**\n   * Helper method to make a generic JSON-RPC POST request.\n   * @param method The RPC method name.\n   * @param params The parameters for the RPC method.\n   * @returns A Promise that resolves to the RPC response.\n   */\n  async _postRpcRequest(method, params) {\n    const endpoint = await this._getServiceEndpoint();\n    const requestId = this.requestIdCounter++;\n    const rpcRequest = {\n      jsonrpc: \"2.0\",\n      method,\n      params,\n      // Cast because TParams structure varies per method\n      id: requestId\n    };\n    const httpResponse = await this.fetchFn(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"application/json\"\n        // Expect JSON response for non-streaming requests\n      },\n      body: JSON.stringify(rpcRequest)\n    });\n    if (!httpResponse.ok) {\n      let errorBodyText = \"(empty or non-JSON response)\";\n      try {\n        errorBodyText = await httpResponse.text();\n        const errorJson = JSON.parse(errorBodyText);\n        if (!errorJson.jsonrpc && errorJson.error) {\n          throw new Error(`RPC error for ${method}: ${errorJson.error.message} (Code: ${errorJson.error.code}, HTTP Status: ${httpResponse.status}) Data: ${JSON.stringify(errorJson.error.data)}`);\n        } else if (!errorJson.jsonrpc) {\n          throw new Error(`HTTP error for ${method}! Status: ${httpResponse.status} ${httpResponse.statusText}. Response: ${errorBodyText}`);\n        }\n      } catch (e) {\n        if (e.message.startsWith(\"RPC error for\") || e.message.startsWith(\"HTTP error for\")) throw e;\n        throw new Error(`HTTP error for ${method}! Status: ${httpResponse.status} ${httpResponse.statusText}. Response: ${errorBodyText}`);\n      }\n    }\n    const rpcResponse = await httpResponse.json();\n    if (rpcResponse.id !== requestId) {\n      console.error(`CRITICAL: RPC response ID mismatch for method ${method}. Expected ${requestId}, got ${rpcResponse.id}. This may lead to incorrect response handling.`);\n    }\n    return rpcResponse;\n  }\n  /**\n   * Sends a message to the agent.\n   * The behavior (blocking/non-blocking) and push notification configuration\n   * are specified within the `params.configuration` object.\n   * Optionally, `params.message.contextId` or `params.message.taskId` can be provided.\n   * @param params The parameters for sending the message, including the message content and configuration.\n   * @returns A Promise resolving to SendMessageResponse, which can be a Message, Task, or an error.\n   */\n  async sendMessage(params) {\n    return this._postRpcRequest(\"message/send\", params);\n  }\n  /**\n   * Sends a message to the agent and streams back responses using Server-Sent Events (SSE).\n   * Push notification configuration can be specified in `params.configuration`.\n   * Optionally, `params.message.contextId` or `params.message.taskId` can be provided.\n   * Requires the agent to support streaming (`capabilities.streaming: true` in AgentCard).\n   * @param params The parameters for sending the message.\n   * @returns An AsyncGenerator yielding A2AStreamEventData (Message, Task, TaskStatusUpdateEvent, or TaskArtifactUpdateEvent).\n   * The generator throws an error if streaming is not supported or if an HTTP/SSE error occurs.\n   */\n  async *sendMessageStream(params) {\n    const agentCard = await this.agentCardPromise;\n    if (!agentCard.capabilities?.streaming) {\n      throw new Error(\"Agent does not support streaming (AgentCard.capabilities.streaming is not true).\");\n    }\n    const endpoint = await this._getServiceEndpoint();\n    const clientRequestId = this.requestIdCounter++;\n    const rpcRequest = {\n      // This is the initial JSON-RPC request to establish the stream\n      jsonrpc: \"2.0\",\n      method: \"message/stream\",\n      params,\n      id: clientRequestId\n    };\n    const response = await this.fetchFn(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"text/event-stream\"\n        // Crucial for SSE\n      },\n      body: JSON.stringify(rpcRequest)\n    });\n    if (!response.ok) {\n      let errorBody = \"\";\n      try {\n        errorBody = await response.text();\n        const errorJson = JSON.parse(errorBody);\n        if (errorJson.error) {\n          throw new Error(`HTTP error establishing stream for message/stream: ${response.status} ${response.statusText}. RPC Error: ${errorJson.error.message} (Code: ${errorJson.error.code})`);\n        }\n      } catch (e) {\n        if (e.message.startsWith(\"HTTP error establishing stream\")) throw e;\n        throw new Error(`HTTP error establishing stream for message/stream: ${response.status} ${response.statusText}. Response: ${errorBody || \"(empty)\"}`);\n      }\n      throw new Error(`HTTP error establishing stream for message/stream: ${response.status} ${response.statusText}`);\n    }\n    if (!response.headers.get(\"Content-Type\")?.startsWith(\"text/event-stream\")) {\n      throw new Error(\"Invalid response Content-Type for SSE stream. Expected 'text/event-stream'.\");\n    }\n    yield* this._parseA2ASseStream(response, clientRequestId);\n  }\n  /**\n   * Sets or updates the push notification configuration for a given task.\n   * Requires the agent to support push notifications (`capabilities.pushNotifications: true` in AgentCard).\n   * @param params Parameters containing the taskId and the TaskPushNotificationConfig.\n   * @returns A Promise resolving to SetTaskPushNotificationConfigResponse.\n   */\n  async setTaskPushNotificationConfig(params) {\n    const agentCard = await this.agentCardPromise;\n    if (!agentCard.capabilities?.pushNotifications) {\n      throw new Error(\"Agent does not support push notifications (AgentCard.capabilities.pushNotifications is not true).\");\n    }\n    return this._postRpcRequest(\n      \"tasks/pushNotificationConfig/set\",\n      params\n    );\n  }\n  /**\n   * Gets the push notification configuration for a given task.\n   * @param params Parameters containing the taskId.\n   * @returns A Promise resolving to GetTaskPushNotificationConfigResponse.\n   */\n  async getTaskPushNotificationConfig(params) {\n    return this._postRpcRequest(\n      \"tasks/pushNotificationConfig/get\",\n      params\n    );\n  }\n  /**\n   * Retrieves a task by its ID.\n   * @param params Parameters containing the taskId and optional historyLength.\n   * @returns A Promise resolving to GetTaskResponse, which contains the Task object or an error.\n   */\n  async getTask(params) {\n    return this._postRpcRequest(\"tasks/get\", params);\n  }\n  /**\n   * Cancels a task by its ID.\n   * @param params Parameters containing the taskId.\n   * @returns A Promise resolving to CancelTaskResponse, which contains the updated Task object or an error.\n   */\n  async cancelTask(params) {\n    return this._postRpcRequest(\"tasks/cancel\", params);\n  }\n  /**\n   * Resubscribes to a task's event stream using Server-Sent Events (SSE).\n   * This is used if a previous SSE connection for an active task was broken.\n   * Requires the agent to support streaming (`capabilities.streaming: true` in AgentCard).\n   * @param params Parameters containing the taskId.\n   * @returns An AsyncGenerator yielding A2AStreamEventData (Message, Task, TaskStatusUpdateEvent, or TaskArtifactUpdateEvent).\n   */\n  async *resubscribeTask(params) {\n    const agentCard = await this.agentCardPromise;\n    if (!agentCard.capabilities?.streaming) {\n      throw new Error(\"Agent does not support streaming (required for tasks/resubscribe).\");\n    }\n    const endpoint = await this._getServiceEndpoint();\n    const clientRequestId = this.requestIdCounter++;\n    const rpcRequest = {\n      // Initial JSON-RPC request to establish the stream\n      jsonrpc: \"2.0\",\n      method: \"tasks/resubscribe\",\n      params,\n      id: clientRequestId\n    };\n    const response = await this.fetchFn(endpoint, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"Accept\": \"text/event-stream\"\n      },\n      body: JSON.stringify(rpcRequest)\n    });\n    if (!response.ok) {\n      let errorBody = \"\";\n      try {\n        errorBody = await response.text();\n        const errorJson = JSON.parse(errorBody);\n        if (errorJson.error) {\n          throw new Error(`HTTP error establishing stream for tasks/resubscribe: ${response.status} ${response.statusText}. RPC Error: ${errorJson.error.message} (Code: ${errorJson.error.code})`);\n        }\n      } catch (e) {\n        if (e.message.startsWith(\"HTTP error establishing stream\")) throw e;\n        throw new Error(`HTTP error establishing stream for tasks/resubscribe: ${response.status} ${response.statusText}. Response: ${errorBody || \"(empty)\"}`);\n      }\n      throw new Error(`HTTP error establishing stream for tasks/resubscribe: ${response.status} ${response.statusText}`);\n    }\n    if (!response.headers.get(\"Content-Type\")?.startsWith(\"text/event-stream\")) {\n      throw new Error(\"Invalid response Content-Type for SSE stream on resubscribe. Expected 'text/event-stream'.\");\n    }\n    yield* this._parseA2ASseStream(response, clientRequestId);\n  }\n  /**\n   * Parses an HTTP response body as an A2A Server-Sent Event stream.\n   * Each 'data' field of an SSE event is expected to be a JSON-RPC 2.0 Response object,\n   * specifically a SendStreamingMessageResponse (or similar structure for resubscribe).\n   * @param response The HTTP Response object whose body is the SSE stream.\n   * @param originalRequestId The ID of the client's JSON-RPC request that initiated this stream.\n   * Used to validate the `id` in the streamed JSON-RPC responses.\n   * @returns An AsyncGenerator yielding the `result` field of each valid JSON-RPC success response from the stream.\n   */\n  async *_parseA2ASseStream(response, originalRequestId) {\n    if (!response.body) {\n      throw new Error(\"SSE response body is undefined. Cannot read stream.\");\n    }\n    const reader = response.body.pipeThrough(new TextDecoderStream()).getReader();\n    let buffer = \"\";\n    let eventDataBuffer = \"\";\n    try {\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n          if (eventDataBuffer.trim()) {\n            const result = this._processSseEventData(eventDataBuffer, originalRequestId);\n            yield result;\n          }\n          break;\n        }\n        buffer += value;\n        let lineEndIndex;\n        while ((lineEndIndex = buffer.indexOf(\"\\n\")) >= 0) {\n          const line = buffer.substring(0, lineEndIndex).trim();\n          buffer = buffer.substring(lineEndIndex + 1);\n          if (line === \"\") {\n            if (eventDataBuffer) {\n              const result = this._processSseEventData(eventDataBuffer, originalRequestId);\n              yield result;\n              eventDataBuffer = \"\";\n            }\n          } else if (line.startsWith(\"data:\")) {\n            eventDataBuffer += line.substring(5).trimStart() + \"\\n\";\n          } else if (line.startsWith(\":\")) {\n          } else if (line.includes(\":\")) {\n          }\n        }\n      }\n    } catch (error) {\n      console.error(\"Error reading or parsing SSE stream:\", error.message);\n      throw error;\n    } finally {\n      reader.releaseLock();\n    }\n  }\n  /**\n   * Processes a single SSE event's data string, expecting it to be a JSON-RPC response.\n   * @param jsonData The string content from one or more 'data:' lines of an SSE event.\n   * @param originalRequestId The ID of the client's request that initiated the stream.\n   * @returns The `result` field of the parsed JSON-RPC success response.\n   * @throws Error if data is not valid JSON, not a valid JSON-RPC response, an error response, or ID mismatch.\n   */\n  _processSseEventData(jsonData, originalRequestId) {\n    if (!jsonData.trim()) {\n      throw new Error(\"Attempted to process empty SSE event data.\");\n    }\n    try {\n      const sseJsonRpcResponse = JSON.parse(jsonData.replace(/\\n$/, \"\"));\n      const a2aStreamResponse = sseJsonRpcResponse;\n      if (a2aStreamResponse.id !== originalRequestId) {\n        console.warn(`SSE Event's JSON-RPC response ID mismatch. Client request ID: ${originalRequestId}, event response ID: ${a2aStreamResponse.id}.`);\n      }\n      if (this.isErrorResponse(a2aStreamResponse)) {\n        const err = a2aStreamResponse.error;\n        throw new Error(`SSE event contained an error: ${err.message} (Code: ${err.code}) Data: ${JSON.stringify(err.data)}`);\n      }\n      if (!(\"result\" in a2aStreamResponse) || typeof a2aStreamResponse.result === \"undefined\") {\n        throw new Error(`SSE event JSON-RPC response is missing 'result' field. Data: ${jsonData}`);\n      }\n      const successResponse = a2aStreamResponse;\n      return successResponse.result;\n    } catch (e) {\n      if (e.message.startsWith(\"SSE event contained an error\") || e.message.startsWith(\"SSE event JSON-RPC response is missing 'result' field\")) {\n        throw e;\n      }\n      console.error(\"Failed to parse SSE event data string or unexpected JSON-RPC structure:\", jsonData, e);\n      throw new Error(`Failed to parse SSE event data: \"${jsonData.substring(0, 100)}...\". Original error: ${e.message}`);\n    }\n  }\n  isErrorResponse(response) {\n    return \"error\" in response;\n  }\n};\n\nexport {\n  A2AClient\n};\n","// Distri Framework Types - Based on A2A Protocol and SSE\nimport { AgentSkill, Message, Task, TaskArtifactUpdateEvent, TaskStatusUpdateEvent } from '@a2a-js/sdk/client';\n\n/**\n * Tool definition interface following AG-UI pattern\n */\nexport interface DistriTool {\n  name: string;\n  description: string;\n  parameters: any; // JSON Schema\n  handler: ToolHandler;\n}\n\n/**\n * Tool call from agent\n */\nexport interface ToolCall {\n  tool_call_id: string;\n  tool_name: string;\n  input: any; // Parsed JSON input\n}\n\n/**\n * Tool result for responding to tool calls\n */\nexport interface ToolResult {\n  tool_call_id: string;\n  result: any;\n  success: boolean;\n  error?: string;\n}\n\n/**\n * Tool handler function\n */\nexport interface ToolHandler {\n  (input: any): Promise<any> | any;\n}\n\n/**\n * Distri-specific Agent type that wraps A2A AgentCard\n */\nexport interface DistriAgent {\n  /** The name of the agent. */\n  name: string;\n\n  id: string;\n\n  /** A brief description of the agent's purpose. */\n  description?: string;\n\n  /** The version of the agent. */\n  version?: string;\n\n  /** The system prompt for the agent, if any. */\n  system_prompt?: string | null;\n\n  /** A list of MCP server definitions associated with the agent. */\n  mcp_servers?: McpDefinition[];\n\n  /** Settings related to the model used by the agent. */\n  model_settings?: ModelSettings;\n\n  /** The size of the history to maintain for the agent. */\n  history_size?: number;\n\n  /** The planning configuration for the agent, if any. */\n  plan?: any;\n\n  /** A2A-specific fields */\n  icon_url?: string;\n\n  max_iterations?: number;\n\n  skills?: AgentSkill[];\n\n  /** List of sub-agents that this agent can transfer control to */\n  sub_agents?: string[];\n\n  /** Tool approval configuration */\n  tool_approval?: ApprovalMode;\n}\n\nexport interface McpDefinition {\n  /** The filter applied to the tools in this MCP definition. */\n  filter?: string[];\n\n  /** The name of the MCP server. */\n  name: string;\n\n  /** The type of the MCP server (Tool or Agent). */\n  type?: McpServerType; // Use 'type' here instead of 'r#type'\n}\n\n/**\n * Mode for tool approval requirements\n */\nexport type ApprovalMode =\n  | { type: 'none' }\n  | { type: 'all' }\n  | { type: 'filter'; tools: string[] };\n\n/**\n * Message metadata types for tool responses and content\n */\nexport type MessageMetadata =\n  | {\n    type: 'tool_response';\n    tool_call_id: string;\n    result: any;\n  }\n  | {\n    type: 'assistant_response';\n    tool_calls: ToolCall[];\n  }\n  | {\n    type: 'plan';\n    plan: string;\n  }\n  | {\n    type: 'tool_responses';\n    results: ToolResult[];\n  };\n\n/**\n * Approval request tool name constant\n */\nexport const APPROVAL_REQUEST_TOOL_NAME = 'approval_request';\n\nexport interface ModelSettings {\n  model: string;\n  temperature: number;\n  max_tokens: number;\n  top_p: number;\n  frequency_penalty: number;\n  presence_penalty: number;\n  max_iterations: number;\n  provider: ModelProvider;\n  /** Additional parameters for the agent, if any. */\n  parameters?: any;\n\n  /** The format of the response, if specified. */\n  response_format?: any;\n}\n\nexport type McpServerType = 'tool' | 'agent';\n\nexport type ModelProvider = 'openai' | 'aigateway';\n\n/**\n * Distri Thread type for conversation management\n */\nexport interface DistriThread {\n  id: string;\n  title: string;\n  agent_id: string;\n  agent_name: string;\n  updated_at: string;\n  message_count: number;\n  last_message?: string;\n}\n\nexport interface Thread {\n  id: string;\n  title: string;\n  agent_id: string;\n  agent_name: string;\n  updated_at: string;\n  message_count: number;\n  last_message?: string;\n}\n\nexport interface ChatProps {\n  thread: Thread;\n  agent: DistriAgent;\n  onThreadUpdate?: () => void;\n}\n\n/**\n * Connection Status\n */\nexport type ConnectionStatus = 'connecting' | 'connected' | 'disconnected' | 'error';\n\n/**\n * Distri Client Configuration\n */\nexport interface DistriClientConfig {\n  baseUrl: string;\n  apiVersion?: string;\n  timeout?: number;\n  retryAttempts?: number;\n  retryDelay?: number;\n  debug?: boolean;\n  headers?: Record<string, string>;\n  interceptor?: (init?: RequestInit) => Promise<RequestInit | undefined>;\n}\n\n/**\n * Error Types\n */\nexport class DistriError extends Error {\n  constructor(\n    message: string,\n    public code: string,\n    public details?: any\n  ) {\n    super(message);\n    this.name = 'DistriError';\n  }\n}\n\nexport class A2AProtocolError extends DistriError {\n  constructor(message: string, details?: any) {\n    super(message, 'A2A_PROTOCOL_ERROR', details);\n    this.name = 'A2AProtocolError';\n  }\n}\n\nexport class ApiError extends DistriError {\n  constructor(message: string, public statusCode: number, details?: any) {\n    super(message, 'API_ERROR', details);\n    this.name = 'ApiError';\n  }\n}\n\nexport class ConnectionError extends DistriError {\n  constructor(message: string, details?: any) {\n    super(message, 'CONNECTION_ERROR', details);\n    this.name = 'ConnectionError';\n  }\n}\n\n// Re-export A2A types for convenience\nexport type { AgentCard, Message, Task, TaskStatus, MessageSendParams, TaskStatusUpdateEvent, TaskArtifactUpdateEvent } from '@a2a-js/sdk/client';\n\nexport type A2AStreamEventData = Message | TaskStatusUpdateEvent | TaskArtifactUpdateEvent | Task;","import {\n  A2AClient,\n  Message,\n  MessageSendParams,\n  Task,\n  SendMessageResponse,\n  GetTaskResponse,\n  Part,\n\n} from '@a2a-js/sdk/client';\nimport {\n  DistriClientConfig,\n  DistriError,\n  ApiError,\n  A2AProtocolError,\n  DistriAgent,\n  DistriThread,\n  A2AStreamEventData\n} from './types';\n/**\n * Enhanced Distri Client that wraps A2AClient and adds Distri-specific features\n */\nexport class DistriClient {\n  private config: Required<DistriClientConfig>;\n  private agentClients = new Map<string, A2AClient>();\n\n  constructor(config: DistriClientConfig) {\n    this.config = {\n      baseUrl: config.baseUrl.replace(/\\/$/, ''),\n      apiVersion: config.apiVersion || 'v1',\n      timeout: config.timeout || 30000,\n      retryAttempts: config.retryAttempts || 3,\n      retryDelay: config.retryDelay || 1000,\n      debug: config.debug || false,\n      headers: config.headers || {},\n      interceptor: config.interceptor || ((init?: RequestInit) => Promise.resolve(init))\n    };\n\n    this.debug('DistriClient initialized with config:', this.config);\n  }\n\n\n  /**\n   * Get all available agents from the Distri server\n   */\n  async getAgents(): Promise<DistriAgent[]> {\n    try {\n      const response = await this.fetch(`/agents`, {\n        headers: {\n          ...this.config.headers,\n        }\n      });\n      if (!response.ok) {\n        throw new ApiError(`Failed to fetch agents: ${response.statusText}`, response.status);\n      }\n\n      const agents: DistriAgent[] = await response.json();\n      // Temporary fix for agents without an id\n      agents.forEach(agent => {\n        if (!agent.id) {\n          agent.id = agent.name;\n        }\n      });\n\n      return agents;\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError('Failed to fetch agents', 'FETCH_ERROR', error);\n    }\n  }\n\n  /**\n   * Get specific agent by ID\n   */\n  async getAgent(agentId: string): Promise<DistriAgent> {\n    try {\n      const response = await this.fetch(`/agents/${agentId}`, {\n        headers: {\n          ...this.config.headers,\n        }\n      });\n      if (!response.ok) {\n        if (response.status === 404) {\n          throw new ApiError(`Agent not found: ${agentId}`, 404);\n        }\n        throw new ApiError(`Failed to fetch agent: ${response.statusText}`, response.status);\n      }\n\n      const agent: DistriAgent = await response.json();\n      // If the agent doesn't have an id, set it to the agentId\n      if (!agent.id) {\n        agent.id = agentId;\n      }\n      return agent;\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError(`Failed to fetch agent ${agentId}`, 'FETCH_ERROR', error);\n    }\n  }\n\n  /**\n   * Get or create A2AClient for an agent\n   */\n  private getA2AClient(agentId: string): A2AClient {\n    if (!this.agentClients.has(agentId)) {\n      // Use agent's URL from the configured baseUrl\n      const fetchFn = this.fetchAbsolute.bind(this);\n      const agentUrl = `${this.config.baseUrl}/agents/${agentId}`;\n      const client = new A2AClient(agentUrl, fetchFn);\n      this.agentClients.set(agentId, client);\n      this.debug(`Created A2AClient for agent ${agentId} at ${agentUrl}`);\n    }\n    return this.agentClients.get(agentId)!;\n  }\n\n  /**\n   * Send a message to an agent\n   */\n  async sendMessage(agentId: string, params: MessageSendParams): Promise<Message | Task> {\n    try {\n      const client = this.getA2AClient(agentId);\n\n      const response: SendMessageResponse = await client.sendMessage(params);\n\n      if ('error' in response && response.error) {\n        throw new A2AProtocolError(response.error.message, response.error);\n      }\n\n      if ('result' in response) {\n        const result = response.result;\n        this.debug(`Message sent to ${agentId}, got ${result.kind}:`, result);\n        return result;\n      }\n\n      throw new DistriError('Invalid response format', 'INVALID_RESPONSE');\n    } catch (error) {\n      if (error instanceof A2AProtocolError || error instanceof DistriError) throw error;\n      throw new DistriError(`Failed to send message to agent ${agentId}`, 'SEND_MESSAGE_ERROR', error);\n    }\n  }\n\n  /**\n   * Send a streaming message to an agent\n   */\n  async * sendMessageStream(agentId: string, params: MessageSendParams): AsyncGenerator<A2AStreamEventData> {\n    try {\n      const client = this.getA2AClient(agentId);\n      yield* await client.sendMessageStream(params);\n    } catch (error) {\n      throw new DistriError(`Failed to stream message to agent ${agentId}`, 'STREAM_MESSAGE_ERROR', error);\n    }\n  }\n\n  /**\n   * Get task details\n   */\n  async getTask(agentId: string, taskId: string): Promise<Task> {\n    try {\n      const client = this.getA2AClient(agentId);\n      const response: GetTaskResponse = await client.getTask({ id: taskId });\n\n      if ('error' in response && response.error) {\n        throw new A2AProtocolError(response.error.message, response.error);\n      }\n\n      if ('result' in response) {\n        const result = response.result;\n        this.debug(`Got task ${taskId} from ${agentId}:`, result);\n        return result;\n      }\n\n      throw new DistriError('Invalid response format', 'INVALID_RESPONSE');\n    } catch (error) {\n      if (error instanceof A2AProtocolError || error instanceof DistriError) throw error;\n      throw new DistriError(`Failed to get task ${taskId} from agent ${agentId}`, 'GET_TASK_ERROR', error);\n    }\n  }\n\n  /**\n   * Cancel a task\n   */\n  async cancelTask(agentId: string, taskId: string): Promise<void> {\n    try {\n      const client = this.getA2AClient(agentId);\n      await client.cancelTask({ id: taskId });\n      this.debug(`Cancelled task ${taskId} on agent ${agentId}`);\n    } catch (error) {\n      throw new DistriError(`Failed to cancel task ${taskId} on agent ${agentId}`, 'CANCEL_TASK_ERROR', error);\n    }\n  }\n\n  /**\n   * Get threads from Distri server\n   */\n  async getThreads(): Promise<DistriThread[]> {\n    try {\n      const response = await this.fetch(`/threads`);\n      if (!response.ok) {\n        throw new ApiError(`Failed to fetch threads: ${response.statusText}`, response.status);\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError('Failed to fetch threads', 'FETCH_ERROR', error);\n    }\n  }\n\n  async getThread(threadId: string): Promise<DistriThread> {\n    try {\n      const response = await this.fetch(`/threads/${threadId}`);\n      if (!response.ok) {\n        throw new ApiError(`Failed to fetch thread: ${response.statusText}`, response.status);\n      }\n      return await response.json();\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError(`Failed to fetch thread ${threadId}`, 'FETCH_ERROR', error);\n    }\n  }\n\n  /**\n   * Get thread messages\n   */\n  async getThreadMessages(threadId: string): Promise<Message[]> {\n    try {\n      const response = await this.fetch(`/threads/${threadId}/messages`);\n      if (!response.ok) {\n        if (response.status === 404) {\n          return []; // Thread not found, return empty messages\n        }\n        throw new ApiError(`Failed to fetch thread messages: ${response.statusText}`, response.status);\n      }\n\n      return await response.json();\n    } catch (error) {\n      if (error instanceof ApiError) throw error;\n      throw new DistriError(`Failed to fetch messages for thread ${threadId}`, 'FETCH_ERROR', error);\n    }\n  }\n\n  /**\n   * Get the base URL for making direct requests\n   */\n  get baseUrl(): string {\n    return this.config.baseUrl;\n  }\n\n  /**\n   * Enhanced fetch with retry logic\n   */\n  private async fetchAbsolute(url: RequestInfo | URL, initialInit?: RequestInit): Promise<Response> {\n\n    const init = await this.config.interceptor(initialInit);\n    // Construct the full URL using baseUrl\n    let lastError: Error | undefined;\n\n    for (let attempt = 0; attempt <= this.config.retryAttempts; attempt++) {\n      try {\n        const controller = new AbortController();\n        const timeoutId = setTimeout(() => controller.abort(), this.config.timeout);\n\n        const response = await fetch(url, {\n          ...init,\n          signal: controller.signal,\n          headers: {\n            ...this.config.headers,\n            ...init?.headers\n          }\n        });\n\n        clearTimeout(timeoutId);\n        return response;\n      } catch (error) {\n        lastError = error instanceof Error ? error : new Error(String(error));\n\n        if (attempt < this.config.retryAttempts) {\n          this.debug(`Request failed (attempt ${attempt + 1}), retrying in ${this.config.retryDelay}ms...`);\n          await this.delay(this.config.retryDelay);\n        }\n      }\n    }\n    throw lastError!;\n  }\n\n  /**\n   * Enhanced fetch with retry logic\n   */\n  private async fetch(input: RequestInfo | URL, initialInit?: RequestInit): Promise<Response> {\n    // Construct the full URL using baseUrl\n    const url = `${this.config.baseUrl}${input}`;\n    return this.fetchAbsolute(url, initialInit);\n  }\n\n  /**\n   * Delay utility\n   */\n  private delay(ms: number): Promise<void> {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Debug logging\n   */\n  private debug(...args: any[]): void {\n    if (this.config.debug) {\n      console.log('[DistriClient]', ...args);\n    }\n  }\n\n  /**\n   * Helper method to create A2A messages\n   */\n  static initMessage(\n\n    parts: Part[] | string,\n    role: 'agent' | 'user' = 'user',\n    message: Omit<Partial<Message>, 'parts' | 'role' | 'kind'>\n  ): Message {\n    return {\n      messageId: message.messageId || uuidv4(),\n      taskId: message.taskId || uuidv4(),\n      contextId: message.contextId,\n      role,\n      parts: Array.isArray(parts) ? parts : [{ kind: 'text', text: parts.trim() }],\n      ...message,\n      kind: 'message'\n    };\n  }\n\n  /**\n   * Helper method to create message send parameters\n   */\n  static initMessageParams(\n    message: Message,\n    configuration?: MessageSendParams['configuration'],\n    metadata?: any\n  ): MessageSendParams {\n    return {\n      message,\n      configuration: {\n        acceptedOutputModes: ['text/plain'],\n        blocking: false, // Default to non-blocking for streaming\n        ...configuration\n      },\n      metadata\n    };\n  }\n}\nexport function uuidv4(): string {\n  if (typeof crypto?.randomUUID === 'function') {\n    return crypto.randomUUID();\n  }\n  // Fallback for older browsers\n  const array = new Uint8Array(16);\n  crypto.getRandomValues(array);\n  // Per RFC4122 v4\n  array[6] = (array[6] & 0x0f) | 0x40;\n  array[8] = (array[8] & 0x3f) | 0x80;\n  return [...array].map((b, i) =>\n    ([4, 6, 8, 10].includes(i) ? '-' : '') + b.toString(16).padStart(2, '0')\n  ).join('');\n}","import { DistriClient } from './distri-client';\nimport {\n  DistriAgent,\n  DistriTool,\n  ToolCall,\n  ToolHandler,\n  ToolResult,\n  A2AStreamEventData,\n  APPROVAL_REQUEST_TOOL_NAME\n} from './types';\nimport { Message, MessageSendParams } from '@a2a-js/sdk/client';\n\n/**\n * Configuration for Agent invoke method\n */\nexport interface InvokeConfig {\n  /** Configuration for the message */\n  configuration?: MessageSendParams['configuration'];\n  /** Context/thread ID */\n  contextId?: string;\n  /** Metadata for the requests */\n  metadata?: any;\n}\n\nexport interface ToolCallState {\n  tool_call_id: string;\n  tool_name?: string;\n  args: string;\n  result?: string;\n  running: boolean;\n}\n\n/**\n * Result from agent invoke\n */\nexport interface InvokeResult {\n  /** Final response message */\n  message?: Message;\n  /** Task if created */\n  task?: any;\n  /** Whether the response was streamed */\n  streamed: boolean;\n}\n\n/**\n * Enhanced Agent class with simple tool system following AG-UI pattern\n */\nexport class Agent {\n  private client: DistriClient;\n  private agentDefinition: DistriAgent;\n  private tools: Map<string, ToolHandler> = new Map();\n\n  constructor(agentDefinition: DistriAgent, client: DistriClient) {\n    this.agentDefinition = agentDefinition;\n    this.client = client;\n    // Initialize with built-in tools\n    this.initializeBuiltinTools();\n  }\n\n  /**\n   * Initialize built-in tools\n   */\n  private initializeBuiltinTools() {\n    this.addTool({\n      name: APPROVAL_REQUEST_TOOL_NAME,\n      description: 'Request user approval for actions',\n      parameters: {\n        type: 'object',\n        properties: {\n          prompt: { type: 'string', description: 'Approval prompt to show user' },\n          action: { type: 'string', description: 'Action requiring approval' }\n        },\n        required: ['prompt']\n      },\n      handler: async (input: any) => {\n        const userInput = prompt(input.prompt || 'Please provide input:');\n        return { approved: !!userInput, input: userInput };\n      }\n    });\n  }\n\n  /**\n   * Add a tool to the agent (AG-UI style)\n   */\n  addTool(tool: DistriTool): void {\n    this.tools.set(tool.name, tool.handler);\n  }\n\n  /**\n   * Add multiple tools at once\n   */\n  addTools(tools: DistriTool[]): void {\n    tools.forEach(tool => this.addTool(tool));\n  }\n\n  /**\n   * Remove a tool\n   */\n  removeTool(toolName: string): void {\n    this.tools.delete(toolName);\n  }\n\n  /**\n   * Get all registered tools\n   */\n  getTools(): string[] {\n    return Array.from(this.tools.keys());\n  }\n\n  /**\n   * Check if a tool is registered\n   */\n  hasTool(toolName: string): boolean {\n    return this.tools.has(toolName);\n  }\n\n  /**\n   * Execute a tool call\n   */\n  async executeTool(toolCall: ToolCall): Promise<ToolResult> {\n    const handler = this.tools.get(toolCall.tool_name);\n    \n    if (!handler) {\n      return {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: `Tool '${toolCall.tool_name}' not found`\n      };\n    }\n\n    try {\n      const result = await handler(toolCall.input);\n      return {\n        tool_call_id: toolCall.tool_call_id,\n        result,\n        success: true\n      };\n    } catch (error) {\n      return {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  /**\n   * Get tool definitions for context metadata\n   */\n  getToolDefinitions(): Record<string, any> {\n    const definitions: Record<string, any> = {};\n    \n    // Note: We only send tool names to the backend since handlers are frontend-only\n    this.tools.forEach((_handler, name) => {\n      definitions[name] = { name };\n    });\n    \n    return definitions;\n  }\n\n  /**\n   * Get agent information\n   */\n  get id(): string {\n    return this.agentDefinition.id;\n  }\n\n  get name(): string {\n    return this.agentDefinition.name;\n  }\n\n  get description(): string | undefined {\n    return this.agentDefinition.description;\n  }\n\n  /**\n   * Fetch messages for a thread (public method for useChat)\n   */\n  async getThreadMessages(threadId: string): Promise<Message[]> {\n    return this.client.getThreadMessages(threadId);\n  }\n\n  /**\n   * Direct (non-streaming) invoke\n   */\n  public async invoke(params: MessageSendParams): Promise<Message> {\n    // Inject tool definitions into metadata\n    const enhancedParams = this.enhanceParamsWithTools(params);\n    return await this.client.sendMessage(this.agentDefinition.id, enhancedParams) as Message;\n  }\n\n  /**\n   * Streaming invoke\n   */\n  public async invokeStream(params: MessageSendParams): Promise<AsyncGenerator<A2AStreamEventData>> {\n    // Inject tool definitions into metadata\n    const enhancedParams = this.enhanceParamsWithTools(params);\n    return this.client.sendMessageStream(this.agentDefinition.id, enhancedParams) as AsyncGenerator<A2AStreamEventData>;\n  }\n\n  /**\n   * Enhance message params with tool definitions\n   */\n  private enhanceParamsWithTools(params: MessageSendParams): MessageSendParams {\n    const toolDefinitions = this.getToolDefinitions();\n    \n    return {\n      ...params,\n      metadata: {\n        ...params.metadata,\n        tools: Object.keys(toolDefinitions).length > 0 ? toolDefinitions : undefined\n      }\n    };\n  }\n\n  /**\n   * Create an agent instance from an agent ID\n   */\n  static async create(agentId: string, client: DistriClient): Promise<Agent> {\n    const agentDefinition = await client.getAgent(agentId);\n    return new Agent(agentDefinition, client);\n  }\n\n  /**\n   * List all available agents\n   */\n  static async list(client: DistriClient): Promise<Agent[]> {\n    const agentDefinitions = await client.getAgents();\n    return agentDefinitions.map(def => new Agent(def, client));\n  }\n}\n","import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { DistriClient, DistriClientConfig } from '@distri/core';\nimport { ThemeProvider } from './components/ThemeProvider';\n\ninterface DistriContextValue {\n  client: DistriClient | null;\n  error: Error | null;\n  isLoading: boolean;\n}\n\nconst DistriContext = createContext<DistriContextValue>({\n  client: null,\n  error: null,\n  isLoading: true\n});\n\ninterface DistriProviderProps {\n  config: DistriClientConfig;\n  children: ReactNode;\n  defaultTheme?: 'dark' | 'light' | 'system';\n}\n\nconst debug = (config: DistriClientConfig, ...args: any[]): void => {\n  if (config.debug) {\n    console.log('[DistriProvider]', ...args);\n  }\n}\n\n\nexport function DistriProvider({ config, children, defaultTheme = 'dark' }: DistriProviderProps) {\n  const [client, setClient] = useState<DistriClient | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    let currentClient: DistriClient | null = null;\n\n    try {\n      debug(config, '[DistriProvider] Initializing client with config:', config);\n      currentClient = new DistriClient(config);\n      setClient(currentClient);\n      setError(null);\n      setIsLoading(false);\n      debug(config, '[DistriProvider] Client initialized successfully');\n    } catch (err) {\n      debug(config, '[DistriProvider] Failed to initialize client:', err);\n      const error = err instanceof Error ? err : new Error('Failed to initialize client');\n      setError(error);\n      setClient(null);\n      setIsLoading(false);\n    }\n\n  }, [config]); // Depend on the entire config object since we memoize it now\n\n  const contextValue: DistriContextValue = {\n    client,\n    error,\n    isLoading\n  };\n\n  if (error) {\n    console.error(config, '[DistriProvider] Rendering error state:', error.message);\n  }\n\n  if (isLoading) {\n    debug(config, '[DistriProvider] Rendering loading state');\n  }\n\n  if (client) {\n    debug(config, '[DistriProvider] Rendering with client available');\n  }\n\n  return (\n    <ThemeProvider defaultTheme={defaultTheme}>\n      <DistriContext.Provider value={contextValue}>\n        {children}\n      </DistriContext.Provider>\n    </ThemeProvider>\n  );\n}\n\nexport function useDistri(): DistriContextValue {\n  const context = useContext(DistriContext);\n  if (!context) {\n    throw new Error('useDistri must be used within a DistriProvider');\n  }\n  return context;\n}\n\nexport function useDistriClient(): DistriClient {\n  const { client, error, isLoading } = useDistri();\n\n  if (isLoading) {\n    throw new Error('Distri client is still loading');\n  }\n\n  if (error) {\n    throw new Error(`Distri client initialization failed: ${error.message}`);\n  }\n\n  if (!client) {\n    throw new Error('Distri client is not initialized');\n  }\n\n  return client;\n}","import React, { createContext, useContext, useEffect, useState } from 'react';\n\ntype Theme = 'dark' | 'light' | 'system';\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\ninterface ThemeProviderState {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n}\n\nconst initialState: ThemeProviderState = {\n  theme: 'system',\n  setTheme: () => null,\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState>(initialState);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = 'system',\n  storageKey = 'distri-theme',\n  ...props\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const stored = localStorage.getItem(storageKey) as Theme;\n    if (stored) {\n      return stored;\n    }\n    // If no theme is stored, default to dark instead of system\n    return defaultTheme === 'system' ? 'dark' : defaultTheme;\n  });\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove('light', 'dark', 'chatgpt');\n\n    if (theme === 'system') {\n      const systemTheme = window.matchMedia('(prefers-color-scheme: dark)')\n        .matches\n        ? 'dark'\n        : 'light';\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider {...props} value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport const useTheme = () => {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined)\n    throw new Error('useTheme must be used within a ThemeProvider');\n\n  return context;\n}; ","import { useState, useEffect, useCallback } from 'react';\nimport { DistriAgent } from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseAgentsResult {\n  agents: DistriAgent[];\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  getAgent: (agentId: string) => Promise<DistriAgent>;\n}\n\nexport function useAgents(): UseAgentsResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [agents, setAgents] = useState<DistriAgent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchAgents = useCallback(async () => {\n    if (!client) {\n      console.log('[useAgents] Client not available, skipping fetch');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('[useAgents] Fetching agents...');\n      const fetchedAgents = await client.getAgents();\n      console.log('[useAgents] Fetched agents:', fetchedAgents);\n      setAgents(fetchedAgents);\n    } catch (err) {\n      console.error('[useAgents] Failed to fetch agents:', err);\n      setError(err instanceof Error ? err : new Error('Failed to fetch agents'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const getAgent = useCallback(async (agentId: string): Promise<DistriAgent> => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n\n    try {\n      const agent = await client.getAgent(agentId);\n      \n      // Update the agent in our local state if it exists\n      setAgents(prev => prev.map(a => a.id === agentId ? agent : a));\n      \n      return agent;\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to get agent');\n      setError(error);\n      throw error;\n    }\n  }, [client]);\n\n  useEffect(() => {\n    if (clientLoading) {\n      console.log('[useAgents] Client is loading, waiting...');\n      setLoading(true);\n      return;\n    }\n\n    if (clientError) {\n      console.error('[useAgents] Client error:', clientError);\n      setError(clientError);\n      setLoading(false);\n      return;\n    }\n\n    if (client) {\n      console.log('[useAgents] Client ready, fetching agents');\n      fetchAgents();\n    } else {\n      console.log('[useAgents] No client available');\n      setLoading(false);\n    }\n  }, [clientLoading, clientError, client, fetchAgents]);\n\n  return {\n    agents,\n    loading: loading || clientLoading,\n    error: error || clientError,\n    refetch: fetchAgents,\n    getAgent\n  };\n}","import { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { useAgent } from './useAgent';\nimport {\n  type Message,\n  type MessageMetadata,\n  type ToolResult,\n  type ToolCall,\n  InvokeConfig,\n  DistriClient,\n  Agent,\n} from '@distri/core';\nimport type { Part } from '@a2a-js/sdk/client';\n\nexport interface UseChatOptions {\n  agentId: string;\n  threadId: string;\n  // Optional: pre-configured agent from useAgent\n  agent?: Agent;\n  // Optional: Metadata to pass to the agent\n  metadata?: any;\n}\n\nexport interface UseChatResult {\n  messages: Message[];\n  loading: boolean;\n  error: Error | null;\n  isStreaming: boolean;\n  sendMessage: (input: string | Part[], metadata?: MessageMetadata) => Promise<void>;\n  sendMessageStream: (input: string | Part[], metadata?: MessageMetadata) => Promise<void>;\n  refreshMessages: () => Promise<void>;\n  clearMessages: () => void;\n  agent: Agent | null;\n}\n\n/**\n * useChat is the main hook for chat UIs with simplified tool handling.\n * Tools are now registered directly on the agent using agent.addTool() or useTools hook.\n */\nexport function useChat({\n  agentId,\n  threadId,\n  agent: providedAgent,\n  metadata,\n}: UseChatOptions): UseChatResult {\n  // Use provided agent or create one internally\n  const { agent: internalAgent } = useAgent({\n    agentId,\n  });\n\n  // Use provided agent if it's a proper Agent instance, otherwise use internal agent\n  const agent = (providedAgent && typeof providedAgent.getThreadMessages === 'function') ? providedAgent : internalAgent;\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Clear messages when threadId changes\n  useEffect(() => {\n    setMessages([]);\n    setError(null);\n  }, [threadId]);\n\n  const invokeConfig = useMemo(() => {\n    return {\n      contextId: threadId,\n      configuration: {\n        acceptedOutputModes: ['text/plain'],\n        blocking: false\n      },\n      metadata: metadata\n    } as InvokeConfig;\n  }, [threadId, metadata]);\n\n  // Fetch messages for the thread\n  const fetchMessages = useCallback(async () => {\n    if (!agent || !threadId) {\n      setMessages([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const fetchedMessages = await agent.getThreadMessages(threadId);\n      setMessages(fetchedMessages);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to fetch messages'));\n      setMessages([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [agent, threadId]);\n\n  useEffect(() => {\n    fetchMessages();\n  }, [fetchMessages]);\n\n  // Handle tool calls from assistant messages\n  const handleToolCalls = useCallback(async (toolCalls: ToolCall[]): Promise<void> => {\n    if (!agent) return;\n\n    const results: ToolResult[] = [];\n\n    // Execute all tool calls\n    for (const toolCall of toolCalls) {\n      const result = await agent.executeTool(toolCall);\n      results.push(result);\n    }\n\n    // Send tool responses back to the agent\n    if (results.length > 0) {\n      const responseMessage = DistriClient.initMessage([], 'user', { \n        contextId: threadId, \n        metadata: {\n          type: 'tool_responses',\n          results: results\n        } as MessageMetadata\n      });\n\n      const params = DistriClient.initMessageParams(\n        responseMessage, \n        invokeConfig.configuration, \n        responseMessage.metadata as MessageMetadata\n      );\n\n      // Continue the conversation with tool results\n      try {\n        const stream = await agent.invokeStream(params);\n        \n        for await (const event of stream) {\n          if (abortControllerRef.current?.signal.aborted) break;\n          await handleStreamEvent(event);\n        }\n      } catch (err) {\n        console.error('Error continuing conversation with tool results:', err);\n      }\n    }\n  }, [agent, threadId, invokeConfig.configuration]);\n\n  // Handle individual stream events\n  const handleStreamEvent = useCallback(async (event: any) => {\n    if (event.kind === 'message') {\n      const message = event as Message;\n      \n      setMessages((prev) => {\n        const idx = prev.findIndex((m) => m.messageId === message.messageId);\n        if (idx !== -1) {\n          const updated = [...prev];\n          updated[idx] = { ...updated[idx], parts: [...updated[idx].parts, ...message.parts] };\n          return updated;\n        } else {\n          return [...prev, message];\n        }\n      });\n\n      // Handle tool calls if present\n      if (message.metadata?.type === 'assistant_response' && message.metadata.tool_calls) {\n        const toolCalls = message.metadata.tool_calls as ToolCall[];\n        await handleToolCalls(toolCalls);\n      }\n    } else if (event.kind === 'status-update') {\n      // Handle task status updates if needed\n      // These events can be used for progress indicators, etc.\n      console.debug('Task status update:', event);\n    }\n  }, [handleToolCalls]);\n\n  // Send a message (non-streaming)\n  const sendMessage = useCallback(async (\n    input: string | Part[],\n    metadata?: MessageMetadata\n  ) => {\n    if (!agent) return;\n\n    // Add user message immediately\n    const userMessage: Message = DistriClient.initMessage(input, 'user', { contextId: threadId, metadata });\n    setMessages((prev) => [...prev, userMessage]);\n\n    const params = DistriClient.initMessageParams(userMessage, invokeConfig.configuration, metadata);\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await agent.invoke(params);\n      if (result && 'message' in result && result.message) {\n        setMessages((prev) => [...prev, result.message as Message]);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to send message'));\n    } finally {\n      setLoading(false);\n    }\n  }, [agent, threadId, invokeConfig.configuration]);\n\n  // Send a message (streaming)\n  const sendMessageStream = useCallback(async (\n    input: string | Part[],\n    metadata?: MessageMetadata\n  ) => {\n    if (!agent) return;\n\n    const userMessage: Message = DistriClient.initMessage(input, 'user', { contextId: threadId, metadata });\n    setMessages((prev) => [...prev, userMessage]);\n\n    const params = DistriClient.initMessageParams(userMessage, invokeConfig.configuration, metadata);\n\n    try {\n      setLoading(true);\n      setIsStreaming(true);\n      setError(null);\n      \n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      abortControllerRef.current = new AbortController();\n\n      const stream = await agent.invokeStream(params);\n\n      for await (const event of stream) {\n        if (abortControllerRef.current?.signal.aborted) break;\n        await handleStreamEvent(event);\n      }\n    } catch (err) {\n      if (err instanceof Error && err.name === 'AbortError') return;\n      setError(err instanceof Error ? err : new Error('Failed to stream message'));\n    } finally {\n      setLoading(false);\n      setIsStreaming(false);\n    }\n  }, [agent, threadId, invokeConfig.configuration, handleStreamEvent]);\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n  }, []);\n\n  const refreshMessages = useCallback(async () => {\n    await fetchMessages();\n  }, [fetchMessages]);\n\n  return {\n    messages,\n    loading,\n    error,\n    isStreaming,\n    sendMessage,\n    sendMessageStream,\n    refreshMessages,\n    clearMessages,\n    agent: agent ? (agent as any) : null,\n  };\n} ","import { useState, useEffect, useCallback } from 'react';\nimport { DistriThread } from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseThreadsResult {\n  threads: DistriThread[];\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  deleteThread: (threadId: string) => Promise<void>;\n  fetchThread: (threadId: string) => Promise<DistriThread>;\n  updateThread: (threadId: string, localId?: string) => Promise<void>;\n}\n\nexport function useThreads(): UseThreadsResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [threads, setThreads] = useState<DistriThread[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchThreads = useCallback(async () => {\n    if (!client) {\n      console.log('[useThreads] Client not available, skipping fetch');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('[useThreads] Fetching threads...');\n      const fetchedThreads = await client.getThreads();\n      console.log('[useThreads] Fetched threads:', fetchedThreads);\n      setThreads(fetchedThreads);\n    } catch (err) {\n      console.error('[useThreads] Failed to fetch threads:', err);\n      setError(err instanceof Error ? err : new Error('Failed to fetch threads'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const fetchThread = useCallback(async (threadId: string) => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n    try {\n      const response = await client.getThread(threadId);\n      return response;\n    } catch (err) {\n      console.error('[useThreads] Failed to fetch thread:', err);\n      throw err;\n    }\n  }, [client]);\n\n  const deleteThread = useCallback(async (threadId: string) => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n\n    try {\n      // Try to delete from server (may not exist yet for local threads)\n      const response = await fetch(`${client.baseUrl}/api/v1/threads/${threadId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete thread');\n      }\n\n      // Remove from local state regardless of server response\n      setThreads(prev => prev.filter(thread => thread.id !== threadId));\n    } catch (err) {\n      // Still remove from local state even if server delete fails\n      setThreads(prev => prev.filter(thread => thread.id !== threadId));\n      console.warn('Failed to delete thread from server, but removed locally:', err);\n    }\n  }, [client]);\n\n  const updateThread = useCallback(async (threadId: string, localId?: string) => {\n    if (!client) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`${client.baseUrl}/api/v1/threads/${threadId}`);\n      if (response.ok) {\n        const updatedThread = await response.json();\n        setThreads(prev => {\n          // If a local thread with localId exists, replace it with the backend thread\n          if (localId && prev.some(thread => thread.id === localId)) {\n            return [\n              updatedThread,\n              ...prev.filter(thread => thread.id !== localId && thread.id !== threadId)\n            ];\n          }\n          // Otherwise, just update by threadId\n          return prev.map(thread =>\n            thread.id === threadId ? updatedThread : thread\n          );\n        });\n      }\n    } catch (err) {\n      console.warn('Failed to update thread:', err);\n    }\n  }, [client]);\n\n  useEffect(() => {\n    if (clientLoading) {\n      console.log('[useThreads] Client is loading, waiting...');\n      setLoading(true);\n      return;\n    }\n\n    if (clientError) {\n      console.error('[useThreads] Client error:', clientError);\n      setError(clientError);\n      setLoading(false);\n      return;\n    }\n\n    if (client) {\n      console.log('[useThreads] Client ready, fetching threads');\n      fetchThreads();\n    } else {\n      console.log('[useThreads] No client available');\n      setLoading(false);\n    }\n  }, [clientLoading, clientError, client, fetchThreads]);\n\n  return {\n    threads,\n    loading: loading || clientLoading,\n    error: error || clientError,\n    refetch: fetchThreads,\n    deleteThread,\n    fetchThread,\n    updateThread\n  };\n}\n\nexport interface UseThreadMessagesOptions {\n  threadId: string | null;\n}","import { useCallback, useRef } from 'react';\nimport { DistriTool, ToolCall, ToolResult, Agent } from '@distri/core';\n\nexport interface UseToolsOptions {\n  agent?: Agent | null;\n}\n\nexport interface UseToolsResult {\n  addTool: (tool: DistriTool) => void;\n  addTools: (tools: DistriTool[]) => void;\n  removeTool: (toolName: string) => void;\n  executeTool: (toolCall: ToolCall) => Promise<ToolResult>;\n  getTools: () => string[];\n  hasTool: (toolName: string) => boolean;\n}\n\n/**\n * Hook for managing tools in an agent\n * Follows AG-UI pattern for tool registration\n */\nexport function useTools({ agent }: UseToolsOptions): UseToolsResult {\n  // Keep track of tools added through this hook\n  const toolsRef = useRef<Set<string>>(new Set());\n\n  const addTool = useCallback((tool: DistriTool) => {\n    if (!agent) {\n      console.warn('Cannot add tool: no agent provided');\n      return;\n    }\n    \n    agent.addTool(tool);\n    toolsRef.current.add(tool.name);\n  }, [agent]);\n\n  const addTools = useCallback((tools: DistriTool[]) => {\n    if (!agent) {\n      console.warn('Cannot add tools: no agent provided');\n      return;\n    }\n    \n    tools.forEach(tool => {\n      agent.addTool(tool);\n      toolsRef.current.add(tool.name);\n    });\n  }, [agent]);\n\n  const removeTool = useCallback((toolName: string) => {\n    if (!agent) {\n      console.warn('Cannot remove tool: no agent provided');\n      return;\n    }\n    \n    agent.removeTool(toolName);\n    toolsRef.current.delete(toolName);\n  }, [agent]);\n\n  const executeTool = useCallback(async (toolCall: ToolCall): Promise<ToolResult> => {\n    if (!agent) {\n      return {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: 'No agent provided'\n      };\n    }\n    \n    return agent.executeTool(toolCall);\n  }, [agent]);\n\n  const getTools = useCallback((): string[] => {\n    if (!agent) return [];\n    return agent.getTools();\n  }, [agent]);\n\n  const hasTool = useCallback((toolName: string): boolean => {\n    if (!agent) return false;\n    return agent.hasTool(toolName);\n  }, [agent]);\n\n  return {\n    addTool,\n    addTools,\n    removeTool,\n    executeTool,\n    getTools,\n    hasTool\n  };\n}\n\n/**\n * Utility function to create common tool definitions\n */\nexport const createTool = (\n  name: string,\n  description: string,\n  parameters: any,\n  handler: (input: any) => Promise<any> | any\n): DistriTool => ({\n  name,\n  description,\n  parameters,\n  handler\n});\n\n/**\n * Built-in tool definitions\n */\nexport const createBuiltinTools = () => ({\n  /**\n   * Confirmation tool for user approval\n   */\n  confirm: createTool(\n    'confirm',\n    'Ask user for confirmation',\n    {\n      type: 'object',\n      properties: {\n        message: { type: 'string', description: 'Message to show to user' },\n        defaultValue: { type: 'boolean', description: 'Default value if user doesnt respond' }\n      },\n      required: ['message']\n    },\n    async (input: { message: string; defaultValue?: boolean }) => {\n      const result = confirm(input.message);\n      return { confirmed: result };\n    }\n  ),\n\n  /**\n   * Input request tool\n   */\n  input: createTool(\n    'input',\n    'Request text input from user',\n    {\n      type: 'object',\n      properties: {\n        prompt: { type: 'string', description: 'Prompt to show to user' },\n        placeholder: { type: 'string', description: 'Placeholder text' }\n      },\n      required: ['prompt']\n    },\n    async (input: { prompt: string; placeholder?: string }) => {\n      const result = prompt(input.prompt, input.placeholder);\n      return { input: result };\n    }\n  ),\n\n  /**\n   * Notification tool\n   */\n  notify: createTool(\n    'notify',\n    'Show notification to user',\n    {\n      type: 'object',\n      properties: {\n        message: { type: 'string', description: 'Notification message' },\n        type: { type: 'string', enum: ['info', 'success', 'warning', 'error'], description: 'Notification type' }\n      },\n      required: ['message']\n    },\n    async (input: { message: string; type?: string }) => {\n      // In a real app, this would show a toast notification\n      console.log(`[${input.type || 'info'}] ${input.message}`);\n      return { notified: true };\n    }\n  )\n});","import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport { MessageSquare } from 'lucide-react';\nimport { Agent } from '@distri/core';\nimport { useChat } from '../useChat';\nimport { UserMessage, AssistantMessage, AssistantWithToolCalls, PlanMessage } from './MessageComponents';\nimport { shouldDisplayMessage, extractTextFromMessage, getMessageType } from '../utils/messageUtils';\nimport { AgentDropdown } from './AgentDropdown';\n\nimport { ChatInput } from './ChatInput';\n\nexport interface EmbeddableChatProps {\n  agentId: string;\n  threadId?: string;\n  agent?: Agent;\n  height?: string;\n  className?: string;\n  style?: React.CSSProperties;\n  metadata?: any;\n  // Available agents for selection\n  availableAgents?: Array<{ id: string; name: string; description?: string }>;\n  // Customization props\n  UserMessageComponent?: React.ComponentType<any>;\n  AssistantMessageComponent?: React.ComponentType<any>;\n  AssistantWithToolCallsComponent?: React.ComponentType<any>;\n  PlanMessageComponent?: React.ComponentType<any>;\n  // Theme\n  theme?: 'light' | 'dark' | 'auto';\n  // Config overrides\n  showDebug?: boolean;\n  showAgentSelector?: boolean;\n  placeholder?: string;\n  // Callbacks\n  onAgentSelect?: (agentId: string) => void;\n  onResponse?: (message: any) => void;\n}\n\nexport const EmbeddableChat: React.FC<EmbeddableChatProps> = ({\n  agentId,\n  threadId = 'default',\n  agent,\n  height = '600px',\n  className = '',\n  style = {},\n  metadata,\n  availableAgents = [],\n  UserMessageComponent = UserMessage,\n  AssistantMessageComponent = AssistantMessage,\n  AssistantWithToolCallsComponent = AssistantWithToolCalls,\n  PlanMessageComponent = PlanMessage,\n  theme: _theme = 'dark',\n  showDebug = false,\n  showAgentSelector = true,\n  placeholder = \"Type your message...\",\n  onAgentSelect,\n  onResponse: _onResponse,\n}) => {\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n\n  const {\n    messages,\n    loading,\n    error,\n    sendMessage: chatSendMessage,\n    isStreaming,\n  } = useChat({\n    agentId,\n    threadId,\n    agent,\n    metadata,\n  });\n\n  // Auto-scroll to bottom when new messages arrive\n  useEffect(() => {\n    if (messagesEndRef.current) {\n      messagesEndRef.current.scrollIntoView({ behavior: 'smooth' });\n    }\n  }, [messages]);\n\n  const sendMessage = async () => {\n    if (!input.trim() || loading) return;\n\n    const messageText = input.trim();\n    setInput('');\n\n    try {\n      await chatSendMessage(messageText);\n    } catch (err) {\n      console.error('Failed to send message:', err);\n      setInput(messageText); // Restore input on error\n    }\n  };\n\n  const renderedMessages = useMemo(() => {\n    return messages\n      .filter(msg => shouldDisplayMessage(msg, showDebug))\n      .map((message, index) => {\n        const messageType = getMessageType(message);\n        const messageContent = extractTextFromMessage(message);\n        const key = `message-${index}`;\n\n        // Get timestamp from message metadata or parts\n        const timestamp = (message as any).created_at ? new Date((message as any).created_at) : undefined;\n\n        switch (messageType) {\n          case 'user':\n            return (\n              <UserMessageComponent\n                key={key}\n                content={messageContent}\n                timestamp={timestamp}\n              />\n            );\n\n          case 'assistant':\n            return (\n              <AssistantMessageComponent\n                key={key}\n                content={messageContent}\n                timestamp={timestamp}\n                isStreaming={isStreaming && index === messages.length - 1}\n              />\n            );\n\n          case 'assistant_with_tools':\n            // Extract tool calls from message parts or metadata\n            const toolCalls = (message.parts || [])\n              .filter((part: any) => part.tool_call)\n              .map((part: any) => ({\n                toolCall: part.tool_call,\n                status: 'completed' as const,\n                result: part.tool_result || 'Completed successfully',\n              }));\n\n            return (\n              <AssistantWithToolCallsComponent\n                key={key}\n                content={messageContent}\n                toolCalls={toolCalls}\n                timestamp={timestamp}\n                isStreaming={isStreaming && index === messages.length - 1}\n              />\n            );\n\n          case 'plan':\n            return (\n              <PlanMessageComponent\n                key={key}\n                content={messageContent}\n                timestamp={timestamp}\n              />\n            );\n\n          default:\n            return null;\n        }\n      })\n      .filter(Boolean);\n  }, [\n    messages,\n    showDebug,\n    isStreaming,\n    UserMessageComponent,\n    AssistantMessageComponent,\n    AssistantWithToolCallsComponent,\n    PlanMessageComponent,\n  ]);\n\n  return (\n    <div\n      className={`distri-chat ${className} w-full bg-background text-foreground`}\n      style={{\n        height,\n        ...style\n      }}\n    >\n      <div className=\"h-full flex flex-col\">\n        {/* Top padding and Agent Selector */}\n        <div className=\"pt-6 px-6 bg-background\">\n          {showAgentSelector && availableAgents && availableAgents.length > 0 && (\n            <div className=\"mb-6\">\n              <AgentDropdown\n                agents={availableAgents}\n                selectedAgentId={agentId}\n                onAgentSelect={(agentId) => onAgentSelect?.(agentId)}\n                className=\"w-full\"\n              />\n            </div>\n          )}\n        </div>\n\n        {/* Main Chat Area - Centered with responsive max-width */}\n        <div className=\"flex-1 flex flex-col\">\n          <div className=\"mx-auto flex-1 group/turn-messages focus-visible:outline-hidden relative flex w-full min-w-0 flex-col\" style={{ maxWidth: 'var(--thread-content-max-width)' }}>\n            {/* Messages Area */}\n            <div className=\"flex-1 overflow-y-auto distri-scroll bg-background\">\n              {messages.length === 0 ? (\n                <div className=\"h-full flex items-center justify-center\">\n                  <div className=\"text-center\">\n                    <MessageSquare className=\"h-16 w-16 text-muted-foreground mx-auto mb-4\" />\n                    <h3 className=\"text-lg font-medium text-foreground mb-2\">\n                      Start a conversation\n                    </h3>\n                    <p className=\"text-muted-foreground max-w-sm\">\n                      {placeholder || \"Type your message below to begin chatting.\"}\n                    </p>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"space-y-0\">\n                  {renderedMessages}\n                </div>\n              )}\n\n              {/* Loading state */}\n              {loading && (\n                <div className=\"px-6 py-4 flex items-center space-x-2 bg-muted\">\n                  <div className=\"h-4 w-4 animate-spin rounded-full border-2 border-muted-foreground border-t-transparent\"></div>\n                  <span className=\"text-muted-foreground text-sm\">Thinking...</span>\n                </div>\n              )}\n\n              {/* Error state */}\n              {error && (\n                <div className=\"px-6 py-4 bg-destructive/20 border border-destructive/20 mx-4 rounded-lg\">\n                  <div className=\"flex items-center space-x-2\">\n                    <div className=\"h-4 w-4 rounded-full bg-destructive\"></div>\n                    <span className=\"text-destructive text-sm\">{error.message || String(error)}</span>\n                  </div>\n                </div>\n              )}\n\n              <div ref={messagesEndRef} />\n            </div>\n\n            {/* Input Area - Centered when no messages, bottom when messages exist */}\n            {messages.length === 0 ? (\n              <div className=\"flex items-center justify-center px-6 py-8\">\n                <div className=\"w-full max-w-2xl\">\n                  <ChatInput\n                    value={input}\n                    onChange={setInput}\n                    onSend={sendMessage}\n                    onStop={() => {\n                      // Stop streaming - this would need to be implemented in the useChat hook\n                      console.log('Stop streaming');\n                    }}\n                    placeholder={placeholder}\n                    disabled={loading}\n                    isStreaming={isStreaming}\n                    className=\"w-full\"\n                  />\n                </div>\n              </div>\n            ) : (\n              <div className=\"p-6 bg-muted\">\n                <ChatInput\n                  value={input}\n                  onChange={setInput}\n                  onSend={sendMessage}\n                  onStop={() => {\n                    // Stop streaming - this would need to be implemented in the useChat hook\n                    console.log('Stop streaming');\n                  }}\n                  placeholder={placeholder}\n                  disabled={loading}\n                  isStreaming={isStreaming}\n                  className=\"w-full\"\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};","import React from 'react';\nimport { User, Bot, Settings, Clock, CheckCircle, XCircle, Brain } from 'lucide-react';\nimport { ToolCallState, ToolCall } from '@distri/core';\nimport MessageRenderer from './MessageRenderer';\n\nexport interface BaseMessageProps {\n  content?: string;\n  timestamp?: Date;\n  className?: string;\n  avatar?: React.ReactNode;\n}\n\nexport interface UserMessageProps extends BaseMessageProps {\n  content: string;\n}\n\nexport interface AssistantMessageProps extends BaseMessageProps {\n  content: string;\n  isStreaming?: boolean;\n  metadata?: any;\n}\n\nexport interface ToolCallProps {\n  toolCall: ToolCall | ToolCallState;\n  status?: 'pending' | 'running' | 'completed' | 'error';\n  result?: any;\n  error?: string;\n}\n\nexport interface AssistantWithToolCallsProps extends AssistantMessageProps {\n  toolCalls: ToolCallProps[];\n}\n\nexport interface PlanMessageProps extends BaseMessageProps {\n  content: string;\n  duration?: number;\n  timestamp?: Date;\n}\n\n// Base Message Container\nexport const MessageContainer: React.FC<{\n  children: React.ReactNode;\n  align: 'left' | 'right' | 'center';\n  className?: string;\n  backgroundColor?: string;\n}> = ({ children, align, className = '', backgroundColor }) => {\n  const justifyClass = align === 'right' ? 'justify-end' : align === 'center' ? 'justify-center' : 'justify-start';\n\n  // Use shadcn/ui convention for theme-aware backgrounds\n  const getBgClass = (color: string) => {\n    switch (color) {\n      case '#343541':\n        return 'bg-background';\n      case '#444654':\n        return 'bg-muted';\n      case '#40414f':\n        return 'bg-background';\n      default:\n        return '';\n    }\n  };\n\n  const bgClass = backgroundColor ? getBgClass(backgroundColor) : '';\n\n  return (\n    <div className={`flex ${justifyClass} w-full ${bgClass} ${className}`}>\n      <div className=\"w-full max-w-4xl mx-auto px-6\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Plan Message Component\nexport const PlanMessage: React.FC<PlanMessageProps> = ({\n  content,\n  duration,\n  timestamp,\n  className = ''\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={className} backgroundColor=\"#444654\">\n      <div className=\"flex items-start gap-4 py-6 px-4\">\n        <div className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center bg-purple-600\">\n          <Brain className=\"h-4 w-4 text-white\" />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-white mb-2 flex items-center gap-2\">\n            Thought{duration ? ` for ${duration}s` : ''}\n          </div>\n          <div className=\"prose prose-sm max-w-none text-white\">\n            <MessageRenderer\n              content={content}\n              className=\"text-white\"\n            />\n          </div>\n          {timestamp && (\n            <div className=\"text-xs text-gray-400 mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};\n\n// User Message Component - ChatGPT style\nexport const UserMessage: React.FC<UserMessageProps> = ({\n  content,\n  timestamp,\n  className = '',\n  avatar\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={className} backgroundColor=\"#343541\">\n      <div className=\"flex items-start gap-4 py-6 px-4\">\n        <div className=\"distri-avatar distri-avatar-user\">\n          {avatar || <User className=\"h-4 w-4\" />}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-foreground mb-2\">You</div>\n          <div className=\"prose prose-sm max-w-none text-foreground\">\n            <MessageRenderer\n              content={content}\n              className=\"text-foreground\"\n            />\n          </div>\n          {timestamp && (\n            <div className=\"text-xs text-muted-foreground mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};\n\n// Assistant Message Component - ChatGPT style\nexport const AssistantMessage: React.FC<AssistantMessageProps> = ({\n  content,\n  timestamp,\n  isStreaming = false,\n  metadata: _metadata,\n  className = '',\n  avatar\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={className} backgroundColor=\"#444654\">\n      <div className=\"flex items-start gap-4 py-6 px-4\">\n        <div className=\"distri-avatar distri-avatar-assistant\">\n          {avatar || <Bot className=\"h-4 w-4\" />}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-foreground mb-2 flex items-center gap-2\">\n            ChatGPT\n            {isStreaming && (\n              <div className=\"flex items-center gap-1 text-xs text-muted-foreground\">\n                <div className=\"w-1 h-1 bg-muted-foreground rounded-full animate-pulse\"></div>\n                <div className=\"w-1 h-1 bg-muted-foreground rounded-full animate-pulse delay-75\"></div>\n                <div className=\"w-1 h-1 bg-muted-foreground rounded-full animate-pulse delay-150\"></div>\n              </div>\n            )}\n          </div>\n          <div className=\"prose prose-sm max-w-none text-foreground\">\n            <MessageRenderer\n              content={content}\n              className=\"text-foreground\"\n            />\n          </div>\n          {timestamp && (\n            <div className=\"text-xs text-muted-foreground mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};\n\n// Tool Call Component - ChatGPT style\nexport const Tool: React.FC<ToolCallProps> = ({\n  toolCall,\n  status = 'pending',\n  result,\n  error\n}) => {\n  const [isExpanded, setIsExpanded] = React.useState(true);\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-gray-400\" />;\n      case 'running':\n        return <Settings className=\"h-4 w-4 text-blue-400 distri-animate-spin\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-400\" />;\n      case 'error':\n        return <XCircle className=\"h-4 w-4 text-red-400\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case 'pending':\n        return 'border-gray-600 bg-gray-800/50';\n      case 'running':\n        return 'border-blue-500 bg-blue-900/20';\n      case 'completed':\n        return 'border-green-500/50 bg-green-900/20';\n      case 'error':\n        return 'border-red-500/50 bg-red-900/20';\n      default:\n        return 'border-gray-600 bg-gray-800/50';\n    }\n  };\n\n  const toolName = 'tool_name' in toolCall ? toolCall.tool_name : (toolCall as any).tool_name;\n  const toolId = 'tool_call_id' in toolCall ? toolCall.tool_call_id : (toolCall as any).tool_call_id;\n  const input = 'input' in toolCall ? toolCall.input : (toolCall as any).args;\n\n  // Always show the expand/collapse button if there's any content\n  const shouldShowExpand = input || result || error;\n\n  return (\n    <div className={`distri-tool ${getStatusColor()}`}>\n      <div\n        className=\"distri-tool-header\"\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        <div className=\"flex items-center gap-3 w-full\">\n          {getStatusIcon()}\n          <span className=\"font-medium text-sm text-white flex-1\">{toolName}</span>\n          <span className=\"text-xs text-gray-400 font-mono\">{toolId}</span>\n          {shouldShowExpand && (\n            <button className=\"text-gray-400 hover:text-white transition-colors ml-2\">\n              {isExpanded ? (\n                <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n                </svg>\n              ) : (\n                <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                  <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n                </svg>\n              )}\n            </button>\n          )}\n        </div>\n      </div>\n\n      {isExpanded && (\n        <div className=\"p-4 space-y-4 border-t border-gray-600/50\">\n          {input && (\n            <div>\n              <div className=\"text-xs font-medium text-gray-300 mb-2\">Input:</div>\n              <div className=\"distri-tool-content\">\n                {typeof input === 'string' ? input : JSON.stringify(input, null, 2)}\n              </div>\n            </div>\n          )}\n\n          {result && (\n            <div>\n              <div className=\"text-xs font-medium text-gray-300 mb-2\">Output:</div>\n              <div className=\"distri-tool-content\">\n                {typeof result === 'string' ? result : JSON.stringify(result, null, 2)}\n              </div>\n            </div>\n          )}\n\n          {error && (\n            <div>\n              <div className=\"text-xs font-medium text-red-300 mb-2\">Error:</div>\n              <div className=\"text-sm bg-red-900/20 border border-red-500/50 rounded p-3 text-red-200\">\n                {error}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Assistant Message With Tool Calls - ChatGPT style\nexport const AssistantWithToolCalls: React.FC<AssistantWithToolCallsProps> = ({\n  content,\n  toolCalls,\n  timestamp,\n  isStreaming = false,\n  metadata: _metadata,\n  className = '',\n  avatar\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={className} backgroundColor=\"#444654\">\n      <div className=\"flex items-start gap-4 py-6 px-4\">\n        <div className=\"distri-avatar distri-avatar-assistant\">\n          {avatar || <Bot className=\"h-4 w-4\" />}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-white mb-2 flex items-center gap-2\">\n            ChatGPT\n            {isStreaming && (\n              <div className=\"flex items-center gap-1 text-xs text-gray-400\">\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse\"></div>\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse delay-75\"></div>\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse delay-150\"></div>\n              </div>\n            )}\n          </div>\n\n          {content && (\n            <div className=\"prose prose-sm max-w-none mb-4 text-white\">\n              <MessageRenderer\n                content={content}\n                className=\"text-white\"\n              />\n            </div>\n          )}\n\n          {toolCalls.length > 0 && (\n            <div className=\"space-y-3\">\n              {toolCalls.map((toolCallProps, index) => (\n                <Tool key={index} {...toolCallProps} />\n              ))}\n            </div>\n          )}\n\n          {timestamp && (\n            <div className=\"text-xs text-gray-400 mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};","import React, { useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus, oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { Copy, Check, Code2 } from 'lucide-react';\nimport { useChatConfig } from './ChatContext';\n\ninterface MessageRendererProps {\n  content: string;\n  className?: string;\n  metadata?: any;\n}\n\n// Enhanced Code Block Component with better overflow handling\nconst CodeBlock: React.FC<{\n  language: string;\n  children: string;\n  inline?: boolean;\n  isDark?: boolean;\n}> = ({ language, children, inline = false, isDark = false }) => {\n  const [copied, setCopied] = React.useState(false);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(children);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n    }\n  };\n\n  // Enhanced language detection and normalization\n  const normalizeLanguage = (lang: string): string => {\n    if (!lang) return 'text';\n\n    const langMap: Record<string, string> = {\n      'js': 'javascript',\n      'ts': 'typescript',\n      'jsx': 'javascript',\n      'tsx': 'typescript',\n      'py': 'python',\n      'rb': 'ruby',\n      'sh': 'bash',\n      'shell': 'bash',\n      'yml': 'yaml',\n      'md': 'markdown',\n      'json5': 'json',\n      'dockerfile': 'docker',\n      'rs': 'rust',\n      'go': 'go',\n      'php': 'php',\n      'cpp': 'cpp',\n      'cxx': 'cpp',\n      'cc': 'cpp',\n      'c++': 'cpp',\n      'cs': 'csharp',\n      'kt': 'kotlin',\n      'swift': 'swift',\n      'scala': 'scala',\n      'clj': 'clojure',\n      'cljs': 'clojure',\n      'r': 'r',\n      'matlab': 'matlab',\n      'sql': 'sql',\n      'psql': 'sql',\n      'mysql': 'sql',\n      'sqlite': 'sql',\n    };\n\n    const normalized = lang.toLowerCase();\n    return langMap[normalized] || normalized;\n  };\n\n  const normalizedLanguage = normalizeLanguage(language);\n\n  if (inline) {\n    return (\n      <code className={`px-1.5 py-0.5 rounded text-sm font-mono ${isDark\n        ? 'bg-gray-700 text-gray-200'\n        : 'bg-gray-100 text-gray-800'\n        }`}>\n        {children}\n      </code>\n    );\n  }\n\n  const lineCount = children.split('\\n').length;\n  const shouldShowLineNumbers = lineCount > 4;\n\n  return (\n    <div className=\"relative my-4 rounded-lg border border-gray-200 bg-white overflow-hidden shadow-sm\">\n      <div className=\"flex items-center justify-between bg-gray-50 border-b border-gray-200 px-3 py-2 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <Code2 className=\"h-4 w-4 text-gray-500\" />\n          <span className=\"font-medium text-gray-700\">\n            {normalizedLanguage === 'text' ? 'Code' : normalizedLanguage.toUpperCase()}\n          </span>\n          <span className=\"text-gray-500 text-xs\">\n            {lineCount} {lineCount === 1 ? 'line' : 'lines'}\n          </span>\n        </div>\n        <button\n          onClick={handleCopy}\n          className=\"flex items-center gap-1 px-2 py-1 rounded hover:bg-gray-200 transition-colors text-gray-600 hover:text-gray-800\"\n          title=\"Copy code\"\n        >\n          {copied ? (\n            <>\n              <Check className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Copied!</span>\n            </>\n          ) : (\n            <>\n              <Copy className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Copy</span>\n            </>\n          )}\n        </button>\n      </div>\n      <div className=\"relative\">\n        <SyntaxHighlighter\n          style={isDark ? vscDarkPlus : oneLight}\n          language={normalizedLanguage}\n          PreTag=\"div\"\n          showLineNumbers={shouldShowLineNumbers}\n          wrapLines={true}\n          wrapLongLines={true}\n          lineNumberStyle={{\n            minWidth: '2.5em',\n            paddingRight: '1em',\n            color: '#9CA3AF',\n            fontSize: '0.75rem',\n            userSelect: 'none'\n          }}\n          customStyle={{\n            margin: 0,\n            padding: '0.75rem',\n            background: isDark ? '#1e1e1e' : '#fafafa',\n            fontSize: '0.875rem',\n            lineHeight: '1.5',\n            fontFamily: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace',\n            overflowX: 'auto',\n            maxWidth: '100%',\n          }}\n          codeTagProps={{\n            style: {\n              fontSize: '0.875rem',\n              fontFamily: 'inherit',\n            }\n          }}\n        >\n          {children.replace(/\\n$/, '')}\n        </SyntaxHighlighter>\n      </div>\n    </div>\n  );\n};\n\nconst MessageRenderer: React.FC<MessageRendererProps> = ({\n  content,\n  className = \"\",\n}) => {\n  // Try to get chat config if available, otherwise use defaults\n  let config;\n  try {\n    const chatConfig = useChatConfig();\n    config = chatConfig.config;\n  } catch {\n    // If no chat context available, use defaults\n    config = {\n      enableMarkdown: true,\n      enableCodeHighlighting: true,\n      theme: 'chatgpt' as const\n    };\n  }\n\n  // Detect if we're in a dark theme context (e.g., user message with white text)\n  const isDark = className.includes('text-white');\n\n  // Enhanced markdown detection\n  const hasMarkdownSyntax = useMemo(() => {\n    if (!config.enableMarkdown) return false;\n\n    const markdownPatterns = [\n      /^#{1,6}\\s+/m, // Headers\n      /\\*\\*.*?\\*\\*/g, // Bold\n      /\\*.*?\\*/g, // Italic  \n      /`.*?`/g, // Inline code\n      /```[\\s\\S]*?```/g, // Code blocks\n      /^\\s*[-*+]\\s+/m, // Lists\n      /^\\s*\\d+\\.\\s+/m, // Numbered lists\n      /^\\s*>\\s+/m, // Blockquotes\n      /\\[.*?\\]\\(.*?\\)/g, // Links\n      /!\\[.*?\\]\\(.*?\\)/g, // Images\n      /^\\|.*\\|/m, // Tables\n    ];\n\n    return markdownPatterns.some(pattern => pattern.test(content));\n  }, [content, config.enableMarkdown]);\n\n  // Much more conservative code detection to avoid thoughts being marked as code\n  const looksLikeCode = useMemo(() => {\n    if (!config.enableCodeHighlighting) return false;\n    if (hasMarkdownSyntax) return false;\n\n    const lines = content.split('\\n');\n    const totalLines = lines.length;\n\n    // Don't treat short content as code\n    if (totalLines === 1 && content.length < 50) {\n      return false;\n    }\n\n    // Only trigger on very explicit code patterns - NOT thoughts or explanations\n    const explicitCodePatterns = [\n      /^#!\\//, // Shebang\n      /^\\s*(function|const|let|var)\\s+\\w+\\s*[=\\(]/, // JS/TS function/variable declarations\n      /^\\s*(class|interface)\\s+\\w+/, // Class/interface declarations\n      /^\\s*(import|export)\\s+/, // Import/export statements\n      /^\\s*(def|class)\\s+\\w+/, // Python def/class\n      /^\\s*(public|private|protected)\\s+(class|interface|static)/, // Java/C# declarations\n      /^\\s*<\\?php/, // PHP opening tag\n      /^\\s*<html|<head|<body|<div/, // HTML tags\n      /^\\s*\\{[\\s]*\"[\\w\"]+\"\\s*:/, // JSON objects (key-value pairs)\n      /^\\s*SELECT\\s+.*\\s+FROM\\s+/i, // SQL SELECT statements\n      /^\\s*\\/\\*[\\s\\S]*\\*\\//, // Block comments\n      /^[ \\t]*\\/\\/\\s*\\w+/, // Line comments (with actual content)\n      /;\\s*$/, // Lines ending with semicolons\n    ];\n\n    // Must have at least one very explicit code pattern\n    const hasExplicitCode = explicitCodePatterns.some(pattern => pattern.test(content));\n\n    if (!hasExplicitCode) return false;\n\n    // Additional verification: check for programming structure\n    const structuralPatterns = [\n      /[{}[\\]()]/g, // Brackets and braces\n      /^\\s{2,}/m, // Indentation\n      /=>/g, // Arrow functions\n      /[;:]/g, // Semicolons or colons\n    ];\n\n    const structureCount = structuralPatterns.reduce((count, pattern) => {\n      const matches = content.match(pattern);\n      return count + (matches ? matches.length : 0);\n    }, 0);\n\n    // Require both explicit code patterns AND structural elements\n    return structureCount >= 3;\n  }, [content, hasMarkdownSyntax, config.enableCodeHighlighting]);\n\n  // Try to detect language from content\n  const detectLanguage = useMemo((): string => {\n    if (/\\b(function|const|let|var|=>|console\\.log)\\b/.test(content)) return 'javascript';\n    if (/\\b(interface|type|as\\s+\\w+)\\b/.test(content)) return 'typescript';\n    if (/\\b(def|import|from|print|if\\s+\\w+:)\\b/.test(content)) return 'python';\n    if (/\\b(public\\s+class|static\\s+void|System\\.out)\\b/.test(content)) return 'java';\n    if (/\\b(fn|let\\s+mut|impl|match)\\b/.test(content)) return 'rust';\n    if (/\\b(func|package|import|fmt\\.)\\b/.test(content)) return 'go';\n    if (/SELECT.*FROM|INSERT.*INTO|UPDATE.*SET/i.test(content)) return 'sql';\n    if (/<[^>]+>.*<\\/[^>]+>/.test(content)) return 'html';\n    if (/\\{[^}]*:[^}]*\\}/.test(content)) return 'json';\n    if (/^#!\\/bin\\/(bash|sh)/.test(content)) return 'bash';\n    if (/\\$\\w+|echo\\s+/.test(content)) return 'bash';\n    return 'text';\n  }, [content]);\n\n  // Render based on content type\n  if (looksLikeCode) {\n    return (\n      <CodeBlock\n        language={detectLanguage}\n        isDark={isDark}\n      >\n        {content}\n      </CodeBlock>\n    );\n  }\n\n  if (!hasMarkdownSyntax) {\n    return (\n      <div className={`whitespace-pre-wrap break-words ${className}`}>\n        {content}\n      </div>\n    );\n  }\n\n  // Enhanced markdown rendering with better overflow handling\n  return (\n    <div className={`prose prose-sm max-w-none ${isDark ? 'prose-invert' : ''} ${className} break-words`}>\n      <ReactMarkdown\n        components={{\n          code({ className, children }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const language = match ? match[1] : '';\n\n            return (\n              <CodeBlock\n                language={language}\n                inline={true}\n                isDark={isDark}\n              >\n                {String(children).replace(/\\n$/, '')}\n              </CodeBlock>\n            );\n          },\n          // Enhanced blockquote styling\n          blockquote({ children }) {\n            return (\n              <blockquote className={`border-l-4 pl-4 py-2 italic my-4 rounded-r ${isDark\n                ? 'border-blue-400 text-blue-200 bg-blue-900/20'\n                : 'border-blue-500 text-blue-700 bg-blue-50'\n                }`}>\n                {children}\n              </blockquote>\n            );\n          },\n          // Enhanced table styling with overflow handling\n          table({ children }) {\n            return (\n              <div className=\"overflow-x-auto my-4\">\n                <table className={`min-w-full border-collapse rounded-lg overflow-hidden ${isDark ? 'border-gray-600' : 'border-gray-300'\n                  }`}>\n                  {children}\n                </table>\n              </div>\n            );\n          },\n          th({ children }) {\n            return (\n              <th className={`border px-4 py-2 font-semibold text-left ${isDark\n                ? 'border-gray-600 bg-gray-800'\n                : 'border-gray-300 bg-gray-100'\n                }`}>\n                {children}\n              </th>\n            );\n          },\n          td({ children }) {\n            return (\n              <td className={`border px-4 py-2 ${isDark ? 'border-gray-600' : 'border-gray-300'\n                }`}>\n                {children}\n              </td>\n            );\n          },\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n    </div>\n  );\n};\n\nexport default MessageRenderer;","import React, { createContext, useContext, ReactNode } from 'react';\n\nexport type ChatTheme = 'light' | 'dark' | 'auto';\n\nexport interface ChatConfig {\n  theme: ChatTheme;\n  showDebug: boolean;\n  autoScroll: boolean;\n  showTimestamps: boolean;\n  enableMarkdown: boolean;\n  enableCodeHighlighting: boolean;\n}\n\nexport interface ChatContextValue {\n  config: ChatConfig;\n  updateConfig: (updates: Partial<ChatConfig>) => void;\n}\n\nconst defaultConfig: ChatConfig = {\n  theme: 'auto',\n  showDebug: false,\n  autoScroll: true,\n  showTimestamps: true,\n  enableMarkdown: true,\n  enableCodeHighlighting: true,\n};\n\nconst ChatContext = createContext<ChatContextValue | null>(null);\n\nexport interface ChatProviderProps {\n  children: ReactNode;\n  config?: Partial<ChatConfig>;\n}\n\nexport const ChatProvider: React.FC<ChatProviderProps> = ({ \n  children, \n  config: initialConfig = {} \n}) => {\n  const [config, setConfig] = React.useState<ChatConfig>({\n    ...defaultConfig,\n    ...initialConfig,\n  });\n\n  const updateConfig = React.useCallback((updates: Partial<ChatConfig>) => {\n    setConfig(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  const value: ChatContextValue = {\n    config,\n    updateConfig,\n  };\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport const useChatConfig = (): ChatContextValue => {\n  const context = useContext(ChatContext);\n  if (!context) {\n    // Return default values if used outside provider\n    return {\n      config: defaultConfig,\n      updateConfig: () => {},\n    };\n  }\n  return context;\n};\n\n/**\n * Utility function to get theme classes for components\n */\nexport const getThemeClasses = (theme: ChatTheme): string => {\n  switch (theme) {\n    case 'dark':\n      return 'dark';\n    case 'light':\n      return '';\n    case 'auto':\n    default:\n      // Use system preference\n      return typeof window !== 'undefined' && window.matchMedia('(prefers-color-scheme: dark)').matches \n        ? 'dark' \n        : '';\n  }\n};","// Utility functions for message handling\n\n/**\n * Utility function to extract text content from message parts\n */\nexport const extractTextFromMessage = (message: any): string => {\n  if (!message?.parts || !Array.isArray(message.parts)) {\n    return '';\n  }\n\n  return message.parts\n    .filter((part: any) => part?.kind === 'text' && part?.text)\n    .map((part: any) => part.text)\n    .join('') || '';\n};\n\n/**\n * Utility function to determine if a message should be displayed\n * Can be used by builders when creating custom chat components\n */\nexport const shouldDisplayMessage = (message: any, showDebugMessages: boolean = false): boolean => {\n  if (!message) return false;\n\n  // Always show user messages with content\n  if (message.role === 'user') {\n    const textContent = extractTextFromMessage(message);\n    return textContent.trim().length > 0;\n  }\n\n  // Check if message has text content\n  const textContent = extractTextFromMessage(message);\n  if (textContent.trim()) return true;\n\n  // Always show tool calls (visible by default, not just in debug mode)\n  if (message.metadata?.type === 'assistant_response' && message.metadata.tool_calls) {\n    return true;\n  }\n\n  // Show plan messages\n  if (message.metadata?.type === 'plan' || message.metadata?.plan) {\n    return true;\n  }\n\n  // Show other metadata messages only if debug is enabled\n  if (message.metadata?.type && message.metadata.type !== 'assistant_response') {\n    return showDebugMessages;\n  }\n\n  // Don't show empty messages\n  return false;\n};\n\n/**\n * Utility function to determine message type for rendering\n */\nexport const getMessageType = (message: any): 'user' | 'assistant' | 'assistant_with_tools' | 'plan' | 'system' => {\n  if (message.role === 'user') return 'user';\n  \n  if (message.metadata?.type === 'assistant_response' && message.metadata.tool_calls) {\n    return 'assistant_with_tools';\n  }\n  \n  if (message.metadata?.type === 'plan' || message.metadata?.plan) {\n    return 'plan';\n  }\n  \n  if (message.role === 'assistant') return 'assistant';\n  \n  return 'system';\n};\n\n/**\n * Utility function to format timestamps\n */\nexport const formatTimestamp = (timestamp: string | number | Date): string => {\n  const date = new Date(timestamp);\n  return date.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });\n};\n\n/**\n * Utility function to scroll to bottom of chat\n */\nexport const scrollToBottom = (element: HTMLElement | null, _behavior: ScrollBehavior = 'smooth') => {\n  if (element) {\n    element.scrollTop = element.scrollHeight;\n  }\n};","import React, { useState, useRef, useEffect } from 'react';\nimport { ChevronDown, Bot, Check } from 'lucide-react';\n\ninterface Agent {\n  id: string;\n  name: string;\n  description?: string;\n}\n\ninterface AgentDropdownProps {\n  agents: Agent[];\n  selectedAgentId: string;\n  onAgentSelect: (agentId: string) => void;\n  className?: string;\n  placeholder?: string;\n}\n\nexport const AgentDropdown: React.FC<AgentDropdownProps> = ({\n  agents,\n  selectedAgentId,\n  onAgentSelect,\n  className = '',\n  placeholder = 'Select an agent...',\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const selectedAgent = agents.find(agent => agent.id === selectedAgentId);\n\n  // Close dropdown when clicking outside\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  const handleAgentSelect = (agentId: string) => {\n    onAgentSelect(agentId);\n    setIsOpen(false);\n  };\n\n  return (\n    <div ref={dropdownRef} className={`distri-dropdown ${className}`}>\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"distri-dropdown-trigger w-full\"\n      >\n        <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n          <div className=\"distri-avatar distri-avatar-assistant\">\n            <Bot className=\"h-4 w-4\" />\n          </div>\n          <div className=\"flex-1 text-left min-w-0\">\n            <div className=\"text-sm font-medium text-white truncate\">\n              {selectedAgent?.name || placeholder}\n            </div>\n            {selectedAgent?.description && (\n              <div className=\"text-xs text-gray-400 truncate\">\n                {selectedAgent.description}\n              </div>\n            )}\n          </div>\n        </div>\n        <ChevronDown \n          className={`h-4 w-4 text-gray-400 transition-transform duration-200 ${\n            isOpen ? 'rotate-180' : ''\n          }`} \n        />\n      </button>\n\n      {isOpen && (\n        <div className=\"distri-dropdown-content\">\n          {agents.map((agent) => (\n            <div\n              key={agent.id}\n              onClick={() => handleAgentSelect(agent.id)}\n              className={`distri-dropdown-item ${\n                agent.id === selectedAgentId ? 'selected' : ''\n              }`}\n            >\n              <div className=\"flex items-center space-x-3 w-full\">\n                <div className=\"distri-avatar distri-avatar-assistant\">\n                  <Bot className=\"h-4 w-4\" />\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"text-sm font-medium text-white truncate\">\n                      {agent.name}\n                    </div>\n                    {agent.id === selectedAgentId && (\n                      <Check className=\"h-4 w-4 text-blue-400 flex-shrink-0 ml-2\" />\n                    )}\n                  </div>\n                  {agent.description && (\n                    <div className=\"text-xs text-gray-400 truncate\">\n                      {agent.description}\n                    </div>\n                  )}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};","import React, { useRef, useEffect } from 'react';\nimport { Send, Square } from 'lucide-react';\n\nexport interface ChatInputProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSend: () => void;\n  onStop?: () => void;\n  placeholder?: string;\n  disabled?: boolean;\n  isStreaming?: boolean;\n  className?: string;\n}\n\nexport const ChatInput: React.FC<ChatInputProps> = ({\n  value,\n  onChange,\n  onSend,\n  onStop,\n  placeholder = \"Type your message...\",\n  disabled = false,\n  isStreaming = false,\n  className = \"\",\n}) => {\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  // Auto-resize textarea\n  useEffect(() => {\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${Math.min(textareaRef.current.scrollHeight, 120)}px`;\n    }\n  }, [value]);\n\n  const handleKeyPress = (e: React.KeyboardEvent<HTMLTextAreaElement>) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      if (value.trim() && !disabled && !isStreaming) {\n        onSend();\n      }\n    }\n  };\n\n  const handleSend = () => {\n    if (value.trim() && !disabled && !isStreaming) {\n      onSend();\n    }\n  };\n\n  const handleStop = () => {\n    if (isStreaming && onStop) {\n      onStop();\n    }\n  };\n\n  const hasContent = value.trim().length > 0;\n  const isDisabled = disabled || isStreaming;\n\n  return (\n    <div className={`relative flex min-h-14 w-full items-end ${className}`}>\n      <div className=\"relative flex w-full flex-auto flex-col\">\n        <div className=\"relative mx-5 flex min-h-14 flex-auto rounded-lg border border-input bg-input items-start\">\n          <textarea\n            ref={textareaRef}\n            value={value}\n            onChange={(e) => onChange(e.target.value)}\n            onKeyPress={handleKeyPress}\n            placeholder={placeholder}\n            disabled={isDisabled}\n            rows={1}\n            className=\"max-h-[25dvh] flex-1 resize-none border-none outline-none bg-transparent placeholder:text-muted-foreground focus:ring-0 overflow-auto text-sm p-4 pr-20 text-foreground min-h-[52px] max-h-[120px]\"\n          />\n          <div className=\"absolute right-2 bottom-2 flex items-center h-full\">\n            <button\n              onClick={isStreaming ? handleStop : handleSend}\n              disabled={!hasContent && !isStreaming}\n              className={`h-10 w-10 rounded-md transition-colors flex items-center justify-center ${isStreaming\n                ? 'bg-destructive hover:bg-destructive/90 text-destructive-foreground'\n                : hasContent && !disabled\n                  ? 'bg-primary hover:bg-primary/90 text-primary-foreground'\n                  : 'bg-muted text-muted-foreground hover:bg-muted'\n                }`}\n            >\n              {isStreaming ? (\n                <Square className=\"h-5 w-5\" />\n              ) : (\n                <Send className=\"h-5 w-5\" />\n              )}\n            </button>\n          </div>\n        </div>\n        <div className=\"h-12\"></div>\n      </div>\n    </div>\n  );\n};","import React, { useState, useCallback } from 'react';\nimport { MessageSquare, Settings, MoreHorizontal, Trash2, Edit3, Bot, Users, Edit2 } from 'lucide-react';\nimport { Agent } from '@distri/core';\nimport { useThreads } from '../useThreads';\nimport { EmbeddableChat } from './EmbeddableChat';\nimport { ModeToggle } from './ModeToggle';\n\n\nexport interface FullChatProps {\n  agentId: string;\n  agent?: Agent;\n  metadata?: any;\n  className?: string;\n  // Available agents for selection\n  availableAgents?: Array<{ id: string; name: string; description?: string }>;\n  // Customization props\n  UserMessageComponent?: React.ComponentType<any>;\n  AssistantMessageComponent?: React.ComponentType<any>;\n  AssistantWithToolCallsComponent?: React.ComponentType<any>;\n  PlanMessageComponent?: React.ComponentType<any>;\n  // Theme\n  theme?: 'light' | 'dark' | 'auto';\n  // Show debug info\n  showDebug?: boolean;\n  // Sidebar\n  showSidebar?: boolean;\n  sidebarWidth?: number;\n  // Navigation\n  currentPage?: 'chat' | 'agents';\n  onPageChange?: (page: 'chat' | 'agents') => void;\n  // Callbacks\n  onAgentSelect?: (agentId: string) => void;\n  onThreadSelect?: (threadId: string) => void;\n  onThreadCreate?: (threadId: string) => void;\n  onThreadDelete?: (threadId: string) => void;\n  onLogoClick?: () => void;\n}\n\ninterface ThreadItemProps {\n  thread: any;\n  isActive: boolean;\n  onClick: () => void;\n  onDelete: () => void;\n  onRename: (newTitle: string) => void;\n}\n\nconst ThreadItem: React.FC<ThreadItemProps> = ({\n  thread,\n  isActive,\n  onClick,\n  onDelete,\n  onRename\n}) => {\n  const [isEditing, setIsEditing] = useState(false);\n  const [editTitle, setEditTitle] = useState(thread.title || 'New Chat');\n  const [showMenu, setShowMenu] = useState(false);\n\n  const handleRename = useCallback(() => {\n    if (editTitle.trim() && editTitle !== thread.title) {\n      onRename(editTitle.trim());\n    }\n    setIsEditing(false);\n  }, [editTitle, thread.title, onRename]);\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter') {\n      handleRename();\n    } else if (e.key === 'Escape') {\n      setEditTitle(thread.title || 'New Chat');\n      setIsEditing(false);\n    }\n  }, [handleRename, thread.title]);\n\n  return (\n    <div\n      className={`group relative p-3 rounded-lg cursor-pointer transition-colors ${isActive\n        ? 'bg-accent text-accent-foreground'\n        : 'hover:bg-accent hover:text-accent-foreground'\n        }`}\n      onClick={onClick}\n    >\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-3 flex-1 min-w-0\">\n          <MessageSquare className={`h-4 w-4 flex-shrink-0 ${isActive ? 'text-accent-foreground' : 'text-muted-foreground'}`} />\n\n          {isEditing ? (\n            <input\n              value={editTitle}\n              onChange={(e) => setEditTitle(e.target.value)}\n              onBlur={handleRename}\n              onKeyPress={handleKeyPress}\n              className=\"flex-1 text-sm bg-transparent border-none outline-none text-card-foreground\"\n              autoFocus\n              onClick={(e) => e.stopPropagation()}\n            />\n          ) : (\n            <div className=\"flex-1 min-w-0\">\n              <p className={`text-sm font-medium truncate ${isActive ? 'text-accent-foreground' : 'text-card-foreground'}`}>\n                {thread.title || 'New Chat'}\n              </p>\n              <p className=\"text-xs text-muted-foreground truncate\">\n                {thread.last_message || 'No messages yet'}\n              </p>\n            </div>\n          )}\n        </div>\n\n        {!isEditing && (\n          <div className=\"relative\">\n            <button\n              onClick={(e) => {\n                e.stopPropagation();\n                setShowMenu(!showMenu);\n              }}\n              className=\"opacity-0 group-hover:opacity-100 p-1 rounded hover:bg-accent transition-opacity\"\n            >\n              <MoreHorizontal className=\"h-4 w-4 text-muted-foreground\" />\n            </button>\n\n            {showMenu && (\n              <div className=\"absolute right-0 top-6 w-32 bg-card border  rounded-lg shadow-lg z-10\">\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    setIsEditing(true);\n                    setShowMenu(false);\n                  }}\n                  className=\"w-full text-left px-3 py-2 text-sm hover:bg-accent text-card-foreground flex items-center space-x-2 rounded-t-lg\"\n                >\n                  <Edit3 className=\"h-3 w-3\" />\n                  <span>Rename</span>\n                </button>\n                <button\n                  onClick={(e) => {\n                    e.stopPropagation();\n                    onDelete();\n                    setShowMenu(false);\n                  }}\n                  className=\"w-full text-left px-3 py-2 text-sm hover:bg-accent text-destructive flex items-center space-x-2 rounded-b-lg\"\n                >\n                  <Trash2 className=\"h-3 w-3\" />\n                  <span>Delete</span>\n                </button>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const FullChat: React.FC<FullChatProps> = ({\n  agentId,\n  agent,\n  metadata,\n  className = '',\n  UserMessageComponent,\n  AssistantMessageComponent,\n  AssistantWithToolCallsComponent,\n  PlanMessageComponent,\n  theme = 'dark',\n  showDebug = false,\n  showSidebar = true,\n  sidebarWidth = 280,\n  currentPage = 'chat',\n  onPageChange,\n  onThreadSelect,\n  onThreadCreate,\n  onThreadDelete,\n  onLogoClick,\n  availableAgents,\n  onAgentSelect,\n}) => {\n  const [selectedThreadId, setSelectedThreadId] = useState<string>('default');\n  const { threads, loading: threadsLoading, refetch: refetchThreads } = useThreads();\n\n  const handleNewChat = useCallback(() => {\n    const newThreadId = `thread-${Date.now()}`;\n    setSelectedThreadId(newThreadId);\n    onThreadCreate?.(newThreadId);\n  }, [onThreadCreate]);\n\n  const handleThreadSelect = useCallback((threadId: string) => {\n    setSelectedThreadId(threadId);\n    onThreadSelect?.(threadId);\n  }, [onThreadSelect]);\n\n  const handleThreadDelete = useCallback((threadId: string) => {\n    // If deleting the active thread, switch to a new one\n    if (threadId === selectedThreadId) {\n      const remainingThreads = threads.filter(t => t.id !== threadId);\n      if (remainingThreads.length > 0) {\n        setSelectedThreadId(remainingThreads[0].id);\n      } else {\n        handleNewChat();\n      }\n    }\n    onThreadDelete?.(threadId);\n    refetchThreads();\n  }, [selectedThreadId, threads, handleNewChat, onThreadDelete, refetchThreads]);\n\n  const handleThreadRename = useCallback((threadId: string, newTitle: string) => {\n    // In a real implementation, this would call an API to rename the thread\n    console.log('Rename thread', threadId, 'to', newTitle);\n    refetchThreads();\n  }, [refetchThreads]);\n\n  const mainStyle = {\n    marginLeft: showSidebar ? `${sidebarWidth}px` : '0px',\n  };\n\n  return (\n    <div className={`distri-chat ${className} h-full flex bg-background text-foreground`}>\n      {/* Sidebar - ChatGPT Style */}\n      {showSidebar && (\n        <div\n          className=\"fixed left-0 top-0 h-full border-r  flex flex-col distri-sidebar bg-card text-card-foreground\"\n          style={{\n            width: `${sidebarWidth}px`\n          }}\n        >\n          {/* Logo */}\n          <div className=\"p-4\">\n            <button\n              onClick={onLogoClick}\n              className=\"flex items-center space-x-2 text-card-foreground hover:bg-accent hover:text-accent-foreground rounded-lg p-2 transition-colors w-full\"\n            >\n              <Bot className=\"h-4 w-4\" />\n              <span className=\"font-semibold\">Distri</span>\n            </button>\n          </div>\n\n          {/* New Chat Button */}\n\n\n          {/* Agent Selection */}\n\n\n          {/* Navigation */}\n          <div className=\"px-4 pb-6\">\n\n            <div className=\"space-y-4 mt-4\">\n              <button\n                onClick={() => {\n                  onPageChange?.('chat');\n                  handleNewChat();\n                }}\n                className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg text-sm transition-colors ${currentPage === 'chat'\n                  ? 'bg-accent text-accent-foreground'\n                  : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'\n                  }`}\n              >\n                <Edit2 className=\"h-4 w-4\" />\n                <span>New Chat</span>\n              </button>\n              <button\n                onClick={() => onPageChange?.('agents')}\n                className={`w-full flex items-center space-x-3 px-3 py-2.5 rounded-lg text-sm transition-colors ${currentPage === 'agents'\n                  ? 'bg-accent text-accent-foreground'\n                  : 'text-muted-foreground hover:bg-accent hover:text-accent-foreground'\n                  }`}\n              >\n                <Users className=\"h-4 w-4\" />\n                <span>Agents</span>\n              </button>\n            </div>\n          </div>\n\n          {/* Threads List - Only show when on chat page */}\n          (\n          <div className=\"flex-1 overflow-y-auto px-4 space-y-2 distri-scroll\">\n            <div className=\"text-sm text-muted-foreground mb-3 mt=3 px-2\">Conversations</div>\n            {threadsLoading ? (\n              <div className=\"text-center py-12\">\n                <div className=\"text-sm text-muted-foreground\">Loading threads...</div>\n              </div>\n            ) : threads.length === 0 ? (\n              <div className=\"text-center py-12\">\n                <MessageSquare className=\"h-8 w-8 text-muted-foreground mx-auto mb-3\" />\n                <div className=\"text-sm text-muted-foreground\">No conversations yet</div>\n              </div>\n            ) : (\n              threads.map((thread: any) => (\n                <ThreadItem\n                  key={thread.id}\n                  thread={thread}\n                  isActive={thread.id === selectedThreadId}\n                  onClick={() => handleThreadSelect(thread.id)}\n                  onDelete={() => handleThreadDelete(thread.id)}\n                  onRename={(newTitle) => handleThreadRename(thread.id, newTitle)}\n                />\n              ))\n            )}\n          </div>\n          )\n\n          {/* Settings */}\n          <div className=\"p-4 border-t \">\n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"text-xs text-muted-foreground mb-2 block\">Theme</label>\n                <ModeToggle />\n              </div>\n              <button className=\"w-full flex items-center space-x-3 px-3 py-2.5 text-muted-foreground hover:bg-accent hover:text-accent-foreground rounded-lg transition-colors\">\n                <Settings className=\"h-4 w-4\" />\n                <span className=\"text-sm\">Settings</span>\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Chat Area - Only show when on chat page */}\n      {currentPage === 'chat' && (\n        <div className=\"flex-1\" style={mainStyle}>\n          <EmbeddableChat\n            agentId={agentId}\n            threadId={selectedThreadId}\n            showAgentSelector={true}\n            agent={agent}\n            metadata={metadata}\n            height=\"100vh\"\n            availableAgents={availableAgents}\n            UserMessageComponent={UserMessageComponent}\n            AssistantMessageComponent={AssistantMessageComponent}\n            AssistantWithToolCallsComponent={AssistantWithToolCallsComponent}\n            PlanMessageComponent={PlanMessageComponent}\n            theme={theme}\n            showDebug={showDebug}\n            placeholder=\"Type your message...\"\n            onAgentSelect={onAgentSelect}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default FullChat;","import React from 'react';\nimport { Moon, Sun, Monitor } from 'lucide-react';\nimport { useTheme } from './ThemeProvider';\n\nexport function ModeToggle() {\n  const { theme, setTheme } = useTheme();\n  const [isOpen, setIsOpen] = React.useState(false);\n  const dropdownRef = React.useRef<HTMLDivElement>(null);\n\n  React.useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center justify-center w-9 h-9 rounded-md border  bg-background hover:bg-accent hover:text-accent-foreground transition-colors\"\n      >\n        <Sun className=\"h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90\" />\n        <Moon className=\"absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0\" />\n        <span className=\"sr-only\">Toggle theme</span>\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute right-0 top-full mt-1 w-32 bg-card border  rounded-md shadow-lg z-50\">\n          <button\n            onClick={() => {\n              setTheme('light');\n              setIsOpen(false);\n            }}\n            className={`w-full flex items-center space-x-2 px-3 py-2 text-sm hover:bg-accent transition-colors ${theme === 'light' ? 'bg-accent text-accent-foreground' : 'text-card-foreground'\n              } rounded-t-md`}\n          >\n            <Sun className=\"h-4 w-4\" />\n            <span>Light</span>\n          </button>\n          <button\n            onClick={() => {\n              setTheme('dark');\n              setIsOpen(false);\n            }}\n            className={`w-full flex items-center space-x-2 px-3 py-2 text-sm hover:bg-accent transition-colors ${theme === 'dark' ? 'bg-accent text-accent-foreground' : 'text-card-foreground'\n              }`}\n          >\n            <Moon className=\"h-4 w-4\" />\n            <span>Dark</span>\n          </button>\n          <button\n            onClick={() => {\n              setTheme('system');\n              setIsOpen(false);\n            }}\n            className={`w-full flex items-center space-x-2 px-3 py-2 text-sm hover:bg-accent transition-colors ${theme === 'system' ? 'bg-accent text-accent-foreground' : 'text-card-foreground'\n              } rounded-b-md`}\n          >\n            <Monitor className=\"h-4 w-4\" />\n            <span>System</span>\n          </button>\n        </div>\n      )}\n    </div>\n  );\n} ","import React from 'react';\nimport { Agent } from '@distri/core';\nimport { EmbeddableChat } from './EmbeddableChat';\nimport { FullChat } from './FullChat';\n\n\nexport interface ChatContainerProps {\n  agentId: string;\n  agent?: Agent;\n  metadata?: any;\n  \n  // Layout options\n  variant?: 'embedded' | 'full';\n  height?: string | number;\n  className?: string;\n  \n  // Threading (only for full variant)\n  threadId?: string;\n  showSidebar?: boolean;\n  sidebarWidth?: number;\n  \n  // Appearance\n  theme?: 'light' | 'dark' | 'auto';\n  placeholder?: string;\n  \n  // Functionality\n  showDebug?: boolean;\n  \n  // Customization\n  UserMessageComponent?: React.ComponentType<any>;\n  AssistantMessageComponent?: React.ComponentType<any>;\n  AssistantWithToolCallsComponent?: React.ComponentType<any>;\n  PlanMessageComponent?: React.ComponentType<any>;\n  \n  // Callbacks\n  onMessageSent?: (message: string) => void;\n  onResponse?: (response: any) => void;\n  onThreadSelect?: (threadId: string) => void;\n  onThreadCreate?: (threadId: string) => void;\n  onThreadDelete?: (threadId: string) => void;\n}\n\n/**\n * ChatContainer - A ready-to-use chat component for Distri agents\n * \n * This is the main component developers should use. It provides:\n * - Embedded variant: Simple chat interface for embedding in existing UIs\n * - Full variant: Complete chat application with threads sidebar\n * - Theme support: Light/dark/auto themes compatible with shadcn/ui\n * - Tool support: Automatic tool execution with visual feedback\n * - Customization: Override any message component\n * \n * @example\n * ```tsx\n * // Simple embedded chat\n * <ChatContainer agentId=\"my-agent\" variant=\"embedded\" height={400} />\n * \n * // Full chat with threads\n * <ChatContainer agentId=\"my-agent\" variant=\"full\" />\n * \n * // With custom components\n * <ChatContainer \n *   agentId=\"my-agent\" \n *   UserMessageComponent={CustomUserMessage}\n *   theme=\"dark\"\n * />\n * ```\n */\nexport const ChatContainer: React.FC<ChatContainerProps> = ({\n  variant = 'embedded',\n  height = 500,\n  theme = 'auto',\n  showDebug = false,\n  placeholder = \"Type your message...\",\n  ...props\n}) => {\n  // Convert height to string if it's a number\n  const heightString = typeof height === 'number' ? `${height}px` : height;\n\n  if (variant === 'full') {\n    return (\n      <FullChat\n        {...props}\n        theme={theme}\n        showDebug={showDebug}\n      />\n    );\n  }\n\n  return (\n    <EmbeddableChat\n      {...props}\n      height={heightString}\n      theme={theme}\n      showDebug={showDebug}\n      placeholder={placeholder}\n    />\n  );\n};\n\nexport default ChatContainer;","import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport { Loader2, Eye, EyeOff, Bot } from 'lucide-react';\nimport { Agent } from '@distri/core';\nimport { useChatConfig, ChatProvider } from './ChatContext';\nimport { useChat } from '../useChat';\nimport { UserMessage, AssistantMessage, AssistantWithToolCalls, PlanMessage } from './MessageComponents';\nimport { Button } from './ui/button';\nimport { ChatInput } from './ChatInput';\n\nexport interface ChatProps {\n  agentId: string;\n  threadId: string;\n  agent?: Agent;\n  // Backwards compatibility: tools prop for legacy external tool handlers\n  tools?: Record<string, any>;\n  metadata?: any;\n  height?: string;\n  onThreadUpdate?: (threadId: string) => void;\n  className?: string;\n  // Customization props\n  placeholder?: string;\n  // Custom message components for full customization\n  UserMessageComponent?: React.ComponentType<any>;\n  AssistantMessageComponent?: React.ComponentType<any>;\n  AssistantWithToolCallsComponent?: React.ComponentType<any>;\n  PlanMessageComponent?: React.ComponentType<any>;\n  // Custom external tool handler (for backwards compatibility)\n  onExternalToolCall?: (toolCall: any) => void;\n}\n\n\n\nconst DebugToggle: React.FC<{\n  showDebug: boolean;\n  onToggle: () => void;\n}> = ({ showDebug, onToggle }) => {\n  return (\n    <Button\n      onClick={onToggle}\n      variant=\"outline\"\n      size=\"sm\"\n      className=\"flex items-center gap-2\"\n    >\n      {showDebug ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n      Debug\n    </Button>\n  );\n};\n\nconst ChatContent: React.FC<ChatProps> = ({\n  agentId,\n  threadId,\n  agent,\n  tools,\n  metadata,\n  height = \"600px\",\n  onThreadUpdate,\n  placeholder = \"Type a message...\",\n  UserMessageComponent = UserMessage,\n  AssistantMessageComponent = AssistantMessage,\n  AssistantWithToolCallsComponent = AssistantWithToolCalls,\n  PlanMessageComponent = PlanMessage,\n  onExternalToolCall,\n}) => {\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { config, updateConfig } = useChatConfig();\n\n  const {\n    messages,\n    loading,\n    error,\n    isStreaming,\n    sendMessageStream,\n  } = useChat({\n    agentId,\n    threadId,\n    agent,\n    metadata,\n  });\n\n  // Legacy tool handling for backwards compatibility\n  useEffect(() => {\n    if (tools && onExternalToolCall) {\n      console.warn('Legacy tools prop detected. Consider migrating to the new useTools hook for better performance.');\n    }\n  }, [tools, onExternalToolCall]);\n\n  // Helper function to extract text from message parts\n  const extractTextFromMessage = useCallback((message: any): string => {\n    if (!message?.parts || !Array.isArray(message.parts)) {\n      return '';\n    }\n\n    return message.parts\n      .filter((part: any) => part?.kind === 'text' && part?.text)\n      .map((part: any) => part.text)\n      .join('') || '';\n  }, []);\n\n  // Helper function to check if message should be displayed\n  const shouldDisplayMessage = useCallback((message: any): boolean => {\n    if (!message) return false;\n\n    // Always show user messages with content\n    if (message.role === 'user') {\n      const textContent = extractTextFromMessage(message);\n      return textContent.trim().length > 0;\n    }\n\n    // Check if message has text content\n    const textContent = extractTextFromMessage(message);\n    if (textContent.trim()) return true;\n\n    // Always show tool calls (they should be visible regardless of debug mode)\n    if (message.metadata?.type === 'assistant_response' && message.metadata.tool_calls) {\n      return true;\n    }\n\n    // Show plan messages\n    if (message.metadata?.type === 'plan' || message.metadata?.plan) {\n      return true;\n    }\n\n    // Show other metadata messages only if debug is enabled (like \"run started\", etc.)\n    if (message.metadata?.type && message.metadata.type !== 'assistant_response') {\n      return config.showDebug;\n    }\n\n    // Don't show empty messages\n    return false;\n  }, [extractTextFromMessage, config.showDebug]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, []);\n\n  useEffect(() => {\n    if (threadId && messages.length > 0) {\n      scrollToBottom();\n    }\n  }, [messages, threadId, scrollToBottom]);\n\n  const sendMessage = useCallback(async () => {\n    if (!input.trim() || loading || isStreaming) return;\n\n    const messageText = input.trim();\n    setInput('');\n\n    try {\n      await sendMessageStream(messageText);\n      onThreadUpdate?.(threadId);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      setInput(messageText);\n    }\n  }, [input, loading, isStreaming, sendMessageStream, onThreadUpdate, threadId]);\n\n  // Render messages using custom components\n  const renderedMessages = useMemo(() => {\n    return messages\n      .filter(shouldDisplayMessage)\n      .map((message: any, index: number) => {\n        const timestamp = new Date(message.timestamp || Date.now());\n        const messageText = extractTextFromMessage(message);\n        const isUser = message.role === 'user';\n\n        // Handle user messages\n        if (isUser) {\n          return (\n            <UserMessageComponent\n              key={message.messageId || `user-${index}`}\n              content={messageText}\n              timestamp={timestamp}\n            />\n          );\n        }\n\n        // Handle assistant messages with tool calls\n        if (message.metadata?.type === 'assistant_response' && message.metadata.tool_calls) {\n          const toolCallsProps = message.metadata.tool_calls.map((toolCall: any) => ({\n            toolCall,\n            status: 'completed', // Tools are executed immediately now\n            result: 'Tool executed successfully',\n            error: null,\n          }));\n\n          return (\n            <AssistantWithToolCallsComponent\n              key={message.messageId || `assistant-tools-${index}`}\n              content={messageText}\n              toolCalls={toolCallsProps}\n              timestamp={timestamp}\n              isStreaming={isStreaming && index === messages.length - 1}\n              metadata={message.metadata}\n            />\n          );\n        }\n\n        // Handle plan messages\n        if (message.metadata?.type === 'plan' || message.metadata?.plan) {\n          return (\n            <PlanMessageComponent\n              key={message.messageId || `plan-${index}`}\n              content={messageText || message.metadata?.plan || 'Planning...'}\n              duration={message.metadata?.duration}\n              timestamp={timestamp}\n            />\n          );\n        }\n\n        // Handle regular assistant messages\n        return (\n          <AssistantMessageComponent\n            key={message.messageId || `assistant-${index}`}\n            content={messageText || 'Empty message'}\n            timestamp={timestamp}\n            isStreaming={isStreaming && index === messages.length - 1}\n            metadata={message.metadata}\n          />\n        );\n      });\n  }, [messages, shouldDisplayMessage, extractTextFromMessage, isStreaming, UserMessageComponent, AssistantMessageComponent, AssistantWithToolCallsComponent, PlanMessageComponent]);\n\n  return (\n    <div className=\"flex flex-col bg-gray-900 text-white\" style={{ height }}>\n      {/* Header */}\n      <div className=\"flex-shrink-0 border-b border-gray-700 bg-gray-900 p-4\">\n        <div className=\"max-w-4xl mx-auto flex items-center justify-between\">\n          <div>\n            {agent && (\n              <>\n                <h2 className=\"text-lg font-semibold text-white\">{agent.name}</h2>\n                <p className=\"text-sm text-gray-400\">{agent.description}</p>\n              </>\n            )}\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <DebugToggle\n              showDebug={config.showDebug}\n              onToggle={() => updateConfig({ showDebug: !config.showDebug })}\n            />\n            {(loading || isStreaming) && (\n              <div className=\"flex items-center text-blue-400\">\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                <span className=\"text-sm\">Processing...</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto bg-gray-900\">\n        {error && (\n          <div className=\"max-w-4xl mx-auto px-4 py-4\">\n            <div className=\"bg-red-900 border border-red-700 rounded-lg p-4\">\n              <p className=\"text-red-200\">Error: {error.message}</p>\n            </div>\n          </div>\n        )}\n\n        <div className=\"min-h-full\">\n          {messages.length === 0 ? (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center max-w-2xl mx-auto px-4\">\n                <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Bot className=\"h-8 w-8 text-white\" />\n                </div>\n                <h1 className=\"text-2xl font-semibold text-white mb-2\">\n                  {agent?.name || \"Assistant\"}\n                </h1>\n                <p className=\"text-gray-400 text-lg mb-8\">\n                  {agent?.description || \"How can I help you today?\"}\n                </p>\n                <div className=\"text-sm text-gray-500\">\n                  <p>Start a conversation by typing a message below.</p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            renderedMessages\n          )}\n        </div>\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* Input */}\n      <ChatInput\n        value={input}\n        onChange={setInput}\n        onSend={sendMessage}\n        onStop={() => {\n          // Stop streaming - this would need to be implemented in the useChat hook\n          console.log('Stop streaming');\n        }}\n        disabled={loading}\n        isStreaming={isStreaming}\n        placeholder={placeholder}\n      />\n    </div>\n  );\n};\n\n// Main Chat component with provider\nexport const Chat: React.FC<ChatProps> = (props) => {\n  return (\n    <ChatProvider>\n      <ChatContent {...props} />\n    </ChatProvider>\n  );\n};\n\nexport default Chat;","import * as React from \"react\"\nimport { cn } from \"./utils\"\n\nconst buttonVariants = {\n  variant: {\n    default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n    destructive: \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n    outline: \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n    secondary: \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n    ghost: \"hover:bg-accent hover:text-accent-foreground\",\n    link: \"text-primary underline-offset-4 hover:underline\",\n  },\n  size: {\n    default: \"h-10 px-4 py-2\",\n    sm: \"h-9 rounded-md px-3\",\n    lg: \"h-11 rounded-md px-8\",\n    icon: \"h-10 w-10\",\n  },\n}\n\nexport interface ButtonProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  variant?: keyof typeof buttonVariants.variant\n  size?: keyof typeof buttonVariants.size\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant = \"default\", size = \"default\", ...props }, ref) => {\n    return (\n      <button\n        className={cn(\n          \"inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\",\n          buttonVariants.variant[variant],\n          buttonVariants.size[size],\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants } ","import { type ClassValue, clsx } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n} ","import * as React from \"react\"\nimport { cn } from \"./utils\"\n\nexport interface InputProps\n  extends React.InputHTMLAttributes<HTMLInputElement> {}\n\nconst Input = React.forwardRef<HTMLInputElement, InputProps>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }","import * as React from \"react\"\nimport { cn } from \"./utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }","import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { cn } from \"./utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }","import * as React from \"react\"\nimport { cn } from \"./utils\"\n\nconst Dialog = React.createContext<{\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}>({})\n\nexport interface DialogProps {\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n  children: React.ReactNode\n}\n\nconst DialogRoot: React.FC<DialogProps> = ({ open, onOpenChange, children }) => {\n  return (\n    <Dialog.Provider value={{ open, onOpenChange }}>\n      {children}\n    </Dialog.Provider>\n  )\n}\n\nconst DialogTrigger = React.forwardRef<\n  HTMLButtonElement,\n  React.ButtonHTMLAttributes<HTMLButtonElement>\n>(({ className, children, ...props }, ref) => {\n  const context = React.useContext(Dialog)\n  \n  return (\n    <button\n      ref={ref}\n      className={cn(className)}\n      onClick={() => context.onOpenChange?.(true)}\n      {...props}\n    >\n      {children}\n    </button>\n  )\n})\nDialogTrigger.displayName = \"DialogTrigger\"\n\nconst DialogContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, children, ...props }, ref) => {\n  const context = React.useContext(Dialog)\n  \n  if (!context.open) return null\n  \n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-background/80 backdrop-blur-sm\">\n      <div\n        ref={ref}\n        className={cn(\n          \"relative z-50 grid w-full max-w-lg gap-4 border bg-background p-6 shadow-lg duration-200 sm:rounded-lg\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n        <button\n          className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\"\n          onClick={() => context.onOpenChange?.(false)}\n        >\n          <svg\n            width=\"24\"\n            height=\"24\"\n            viewBox=\"0 0 24 24\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            strokeWidth=\"2\"\n            strokeLinecap=\"round\"\n            strokeLinejoin=\"round\"\n            className=\"h-4 w-4\"\n          >\n            <path d=\"m18 6-12 12\" />\n            <path d=\"m6 6 12 12\" />\n          </svg>\n        </button>\n      </div>\n    </div>\n  )\n})\nDialogContent.displayName = \"DialogContent\"\n\nconst DialogHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = \"DialogTitle\"\n\nexport {\n  DialogRoot as Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n} ","import * as React from \"react\"\nimport { cn } from \"./utils\"\n\nexport interface TextareaProps\n  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> { }\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(\n  ({ className, ...props }, ref) => {\n    return (\n      <textarea\n        className={cn(\n          \"flex min-h-[80px] w-full rounded-md border-none bg-transparent px-3 py-2 text-sm text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-0 disabled:cursor-not-allowed disabled:opacity-50 resize-none\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea } ","import React, { useState } from 'react';\nimport { AlertTriangle, CheckCircle, XCircle } from 'lucide-react';\nimport { Button } from './ui/button';\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from './ui/dialog';\nimport { ToolCall } from '@distri/core';\n\nexport interface ApprovalDialogProps {\n  toolCalls: ToolCall[];\n  reason?: string;\n  onApprove: () => void;\n  onDeny: () => void;\n  onCancel: () => void;\n}\n\nconst ApprovalDialog: React.FC<ApprovalDialogProps> = ({\n  toolCalls,\n  reason,\n  onApprove,\n  onDeny,\n  onCancel\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  if (!isVisible) return null;\n\n  const handleApprove = () => {\n    setIsVisible(false);\n    onApprove();\n  };\n\n  const handleDeny = () => {\n    setIsVisible(false);\n    onDeny();\n  };\n\n  const handleCancel = () => {\n    setIsVisible(false);\n    onCancel();\n  };\n\n  return (\n    <Dialog>\n      <DialogContent>\n        <DialogHeader>\n          <div className=\"flex items-center\">\n            <AlertTriangle className=\"w-6 h-6 text-yellow-500 mr-3\" />\n            <DialogTitle>Tool Execution Approval</DialogTitle>\n          </div>\n        </DialogHeader>\n\n        <div className=\"p-4\">\n          {reason && (\n            <div className=\"mb-4\">\n              <p className=\"text-sm text-muted-foreground\">{reason}</p>\n            </div>\n          )}\n\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium mb-2\">Tools to execute:</h4>\n            <div className=\"space-y-2\">\n              {toolCalls.map((toolCall) => (\n                <div key={toolCall.tool_call_id} className=\"flex items-center p-2 bg-muted rounded\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium\">{toolCall.tool_name}</p>\n                    {toolCall.input && (\n                      <p className=\"text-xs text-muted-foreground mt-1\">\n                        {typeof toolCall.input === 'string'\n                          ? toolCall.input\n                          : JSON.stringify(toolCall.input)\n                        }\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex items-center justify-end space-x-2 p-6 pt-0\">\n            <Button\n              onClick={handleApprove}\n              variant=\"default\"\n              className=\"flex-1\"\n            >\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Approve\n            </Button>\n            <Button\n              onClick={handleDeny}\n              variant=\"destructive\"\n              className=\"flex-1\"\n            >\n              <XCircle className=\"w-4 h-4 mr-2\" />\n              Deny\n            </Button>\n            <Button\n              onClick={handleCancel}\n              variant=\"outline\"\n            >\n              Cancel\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n};\n\nexport default ApprovalDialog; ","import { Moon, Sun, Monitor } from 'lucide-react';\nimport { useTheme } from './ThemeProvider';\n\nexport function ThemeToggle() {\n  const { theme, setTheme } = useTheme();\n\n  return (\n    <div className=\"flex items-center space-x-2\">\n      <button\n        onClick={() => setTheme('light')}\n        className={`p-2 rounded-lg transition-colors ${theme === 'light'\n          ? 'bg-blue-600 text-white'\n          : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'\n          }`}\n        title=\"Light mode\"\n      >\n        <Sun className=\"h-4 w-4\" />\n      </button>\n      <button\n        onClick={() => setTheme('dark')}\n        className={`p-2 rounded-lg transition-colors ${theme === 'dark'\n          ? 'bg-blue-600 text-white'\n          : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'\n          }`}\n        title=\"Dark mode\"\n      >\n        <Moon className=\"h-4 w-4\" />\n      </button>\n      <button\n        onClick={() => setTheme('system')}\n        className={`p-2 rounded-lg transition-colors ${theme === 'system'\n          ? 'bg-blue-600 text-white'\n          : 'bg-gray-200 text-gray-700 hover:bg-gray-300 dark:bg-gray-700 dark:text-gray-300 dark:hover:bg-gray-600'\n          }`}\n        title=\"System theme\"\n      >\n        <Monitor className=\"h-4 w-4\" />\n      </button>\n    </div>\n  );\n} ","import React, { useState, useRef, useEffect } from 'react';\nimport { ChevronDown, Sun, Moon, Monitor, Bot } from 'lucide-react';\nimport { useTheme } from './ThemeProvider';\n\ninterface ThemeOption {\n  value: string;\n  label: string;\n  icon: React.ReactNode;\n  description: string;\n}\n\nconst themeOptions: ThemeOption[] = [\n  {\n    value: 'light',\n    label: 'Light',\n    icon: <Sun className=\"h-4 w-4\" />,\n    description: 'Light mode'\n  },\n  {\n    value: 'dark',\n    label: 'Dark',\n    icon: <Moon className=\"h-4 w-4\" />,\n    description: 'Dark mode'\n  },\n  {\n    value: 'chatgpt',\n    label: 'ChatGPT',\n    icon: <Bot className=\"h-4 w-4\" />,\n    description: 'ChatGPT-inspired theme'\n  },\n  {\n    value: 'system',\n    label: 'System',\n    icon: <Monitor className=\"h-4 w-4\" />,\n    description: 'Follow system preference'\n  }\n];\n\nexport function ThemeDropdown() {\n  const { theme, setTheme } = useTheme();\n  const [isOpen, setIsOpen] = useState(false);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n\n  const currentTheme = themeOptions.find(option => option.value === theme) || themeOptions[0];\n\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {\n        setIsOpen(false);\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => document.removeEventListener('mousedown', handleClickOutside);\n  }, []);\n\n  return (\n    <div className=\"relative\" ref={dropdownRef}>\n      <button\n        onClick={() => setIsOpen(!isOpen)}\n        className=\"flex items-center justify-between w-full px-3 py-2 text-sm bg-card border  rounded-lg hover:bg-accent focus:outline-none focus:ring-2 focus:ring-ring focus:border-transparent transition-colors text-card-foreground\"\n      >\n        <div className=\"flex items-center space-x-2\">\n          {currentTheme.icon}\n          <span>{currentTheme.label}</span>\n        </div>\n        <ChevronDown className={`h-4 w-4 text-muted-foreground transition-transform ${isOpen ? 'rotate-180' : ''}`} />\n      </button>\n\n      {isOpen && (\n        <div className=\"absolute top-full left-0 right-0 mt-1 bg-card border  rounded-lg shadow-lg z-50\">\n          {themeOptions.map((option) => (\n            <button\n              key={option.value}\n              onClick={() => {\n                setTheme(option.value as any);\n                setIsOpen(false);\n              }}\n              className={`w-full flex items-center space-x-3 px-3 py-2 text-sm hover:bg-accent transition-colors ${theme === option.value ? 'bg-accent text-accent-foreground' : 'text-card-foreground'\n                } ${option.value === 'chatgpt' ? 'rounded-t-lg' : ''} ${option.value === 'system' ? 'rounded-b-lg' : ''}`}\n            >\n              <div className=\"flex-shrink-0\">{option.icon}</div>\n              <div className=\"flex-1 text-left\">\n                <div className=\"font-medium\">{option.label}</div>\n                <div className=\"text-xs text-muted-foreground\">{option.description}</div>\n              </div>\n            </button>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n} ","import React, { useState, useEffect } from 'react';\nimport { CheckCircle, XCircle, AlertTriangle, Info, X } from 'lucide-react';\n\nexport interface ToastProps {\n  message: string;\n  type?: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  onClose?: () => void;\n}\n\nconst Toast: React.FC<ToastProps> = ({\n  message,\n  type = 'info',\n  duration = 3000,\n  onClose\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        setTimeout(() => onClose?.(), 300); // Wait for fade out animation\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [duration, onClose]);\n\n  const getIcon = () => {\n    switch (type) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'info':\n      default:\n        return <Info className=\"w-5 h-5 text-blue-500\" />;\n    }\n  };\n\n  const getBgColor = () => {\n    switch (type) {\n      case 'success':\n        return 'bg-green-50 border-green-200';\n      case 'error':\n        return 'bg-red-50 border-red-200';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200';\n      case 'info':\n      default:\n        return 'bg-blue-50 border-blue-200';\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className={`fixed top-4 right-4 z-50 max-w-sm w-full ${getBgColor()} border rounded-lg shadow-lg transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`}>\n      <div className=\"flex items-start p-4\">\n        <div className=\"flex-shrink-0\">\n          {getIcon()}\n        </div>\n        <div className=\"ml-3 flex-1\">\n          <p className=\"text-sm font-medium text-gray-900\">{message}</p>\n        </div>\n        <div className=\"ml-4 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setIsVisible(false);\n              setTimeout(() => onClose?.(), 300);\n            }}\n            className=\"inline-flex text-gray-400 hover:text-gray-600 focus:outline-none\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Toast; "],"mappings":"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","names":["import_react","import_react","theme","import_jsx_runtime","error","React","import_react","error","import_react","metadata","import_react","import_react","import_react","import_lucide_react","import_react","import_lucide_react","import_react","import_react","import_jsx_runtime","React","import_jsx_runtime","React","SyntaxHighlighter","ReactMarkdown","className","import_jsx_runtime","React","textContent","import_react","import_lucide_react","import_jsx_runtime","import_react","import_lucide_react","import_jsx_runtime","import_jsx_runtime","agentId","import_react","import_lucide_react","import_react","import_lucide_react","import_jsx_runtime","React","import_jsx_runtime","import_jsx_runtime","import_react","import_lucide_react","React","import_jsx_runtime","import_jsx_runtime","extractTextFromMessage","shouldDisplayMessage","textContent","error","React","import_jsx_runtime","React","import_jsx_runtime","import_jsx_runtime","React","import_jsx_runtime","React","import_jsx_runtime","import_react","import_lucide_react","import_jsx_runtime","import_lucide_react","import_jsx_runtime","import_react","import_lucide_react","import_jsx_runtime","import_react","import_lucide_react","import_jsx_runtime"]}