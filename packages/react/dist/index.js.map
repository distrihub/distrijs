{"version":3,"sources":["../src/index.ts","../src/useChat.ts","../src/useAgent.ts","../src/DistriProvider.tsx","../src/useAgents.ts","../src/useThreads.ts","../src/components/Toast.tsx","../src/components/ApprovalDialog.tsx","../src/components/ExternalToolManager.tsx","../src/builtinHandlers.ts","../src/utils/toolCallUtils.ts"],"sourcesContent":["// Main exports for @distri/react package\n\n// Hooks\nexport { useChat } from './useChat';\nexport { useAgent, createBuiltinApprovalHandler } from './useAgent';\nexport { useAgents } from './useAgents';\nexport { useThreads } from './useThreads';\nexport { DistriProvider, useDistri, useDistriClient } from './DistriProvider';\n\n// New components for external tool handling\nexport { default as Toast } from './components/Toast';\nexport { default as ApprovalDialog } from './components/ApprovalDialog';\nexport { default as ExternalToolManager } from './components/ExternalToolManager';\n\n// Builtin handlers\nexport {\n  createBuiltinToolHandlers,\n  processExternalToolCalls,\n  initializeBuiltinHandlers,\n  clearPendingToolCalls\n} from './builtinHandlers';\n\n// Utility functions\nexport {\n  extractExternalToolCalls\n} from './utils/toolCallUtils';\nexport type { ToolCallState } from './utils/toolCallUtils';\n\n// Re-export core types\nexport type {\n  DistriClientConfig,\n  DistriAgent,\n  DistriThread,\n  Message,\n  MessageMetadata,\n  ToolCall,\n  ToolResult,\n  ToolHandler,\n  ExternalTool,\n  ApprovalHandler,\n  ApprovalMode,\n  InvokeConfig,\n  InvokeResult,\n  InvokeStreamResult,\n  Task,\n  TaskStatus,\n  MessageSendParams\n} from '@distri/core';\n\n// Re-export core classes and constants\nexport {\n  DistriClient,\n  APPROVAL_REQUEST_TOOL_NAME,\n  Agent\n} from '@distri/core';","import { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { useAgent } from './useAgent';\nimport {\n  type Message,\n  type DistriAgent,\n  type ToolHandler,\n  type MessageMetadata,\n  type ToolResult,\n  type ToolCall,\n  InvokeConfig,\n  DistriClient,\n  DistriEvent,\n  ToolCallResultEvent,\n  ToolCallStartEvent,\n  ToolCallArgsEvent,\n  ToolCallEndEvent,\n} from '@distri/core';\nimport type { Part, TaskStatusUpdateEvent } from '@a2a-js/sdk/client';\nimport { extractExternalToolCalls, ToolCallState, ToolHandlerResult } from './utils/toolCallUtils';\n\nexport interface UseChatOptions {\n  agentId: string;\n  threadId: string;\n  // Optional: pre-configured agent from useAgent\n  agent?: any;\n  // Optional: agent configuration\n  tools?: Record<string, ToolHandler>;\n  // Optional: Metadata to pass to the agent\n  metadata?: any\n}\n\nexport interface UseChatResult {\n  messages: Message[];\n  loading: boolean;\n  error: Error | null;\n  isStreaming: boolean;\n  sendMessage: (input: string | Part[], metadata?: MessageMetadata) => Promise<void>;\n  sendMessageStream: (input: string | Part[], metadata?: MessageMetadata) => Promise<void>;\n  refreshMessages: () => Promise<void>;\n  clearMessages: () => void;\n  agent: DistriAgent | null;\n  // Tool call state - updated during streaming\n  toolCallStatus: Record<string, ToolCallState>;\n  toolHandlerResults: Record<string, ToolHandlerResult>;\n  cancelToolExecution: () => void;\n}\n\n/**\n * useChat is the main hook for chat UIs.\n * It handles all chat logic internally and can optionally accept a pre-configured agent.\n * For advanced agent configuration, use useAgent and pass the agent to useChat.\n * \n * sendParams: MessageSendParams configuration (auth, output modes, etc.)\n * {\n *   configuration: {\n *     acceptedOutputModes: ['text/plain'],\n *     blocking: false\n *   },\n *   // Executor Metadata (https://github.com/distrihub/distri/blob/main/distri/src/agent/types.rs#L97)\n *   metadata: {\n *     tools: {\n *       tool1: { .. },\n *       tool2: { ... }\n *     }\n *   }\n * }\n * \n * contextMetadata: MessageMetadata for tool responses and content\n * {\n *   type: 'tool_response',\n *   tool_call_id: '...',\n *   result: '...'\n * }\n */\n\nexport function useChat({\n  agentId,\n  threadId,\n  agent: providedAgent,\n  tools,\n  metadata,\n}: UseChatOptions): UseChatResult {\n  // Use provided agent or create one internally\n  const { agent: internalAgent } = useAgent({\n    agentId,\n  });\n\n  const agent = providedAgent || internalAgent;\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  const invokeConfig = useMemo(() => {\n    return {\n      tools: tools,\n      contextId: threadId,\n      configuration: {\n        acceptedOutputModes: ['text/plain'],\n        blocking: false\n      },\n      metadata: metadata\n    } as InvokeConfig;\n  }, [tools]);\n\n  // Tool call status - updated during streaming\n  const [toolCallStatus, setToolCallStatus] = useState<Record<string, ToolCallState>>({});\n\n  // External tool calls - handled separately after streaming\n  const [toolHandlerResults, setToolHandlerResults] = useState<Record<string, ToolHandlerResult>>({});\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Fetch messages for the thread\n  const fetchMessages = useCallback(async () => {\n    if (!agent || !threadId) {\n      setMessages([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const fetchedMessages = await agent.getThreadMessages(threadId);\n      setMessages(fetchedMessages);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to fetch messages'));\n      setMessages([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [agent, threadId]);\n\n  useEffect(() => {\n    fetchMessages();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [agent, threadId]);\n\n  // Update tool call status during streaming\n  const updateToolCallStatus = useCallback((toolCallId: string, updates: Partial<ToolCallState>) => {\n    setToolCallStatus(prev => ({\n      ...prev,\n      [toolCallId]: {\n        ...prev[toolCallId],\n        ...updates\n      }\n    }));\n  }, []);\n\n  // Initialize tool call status from streaming events\n  const initializeToolCallStatus = useCallback((event: ToolCallStartEvent) => {\n    const toolCall = event.data;\n    setToolCallStatus(prev => ({\n      ...prev,\n      [toolCall.tool_call_id]: {\n        tool_call_id: toolCall.tool_call_id,\n        tool_name: toolCall.tool_call_name,\n        status: 'running',\n        input: '',\n        result: null,\n        error: null,\n      }\n    }));\n  }, []);\n\n  // Cancel tool execution\n  const cancelToolExecution = useCallback(() => {\n    setToolHandlerResults({});\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n  }, []);\n\n  const onToolComplete = async (toolCallId: string, result: ToolResult) => {\n\n    setToolHandlerResults((prev) => ({\n      ...prev,\n      [toolCallId]: {\n        tool_call_id: toolCallId,\n        result: result.result,\n        success: result.success,\n        error: result.error || null\n      }\n    }));\n\n    let completed = true;\n    for (const toolCallId in toolHandlerResults) {\n      if (!toolHandlerResults[toolCallId]) {\n        completed = false;\n        break;\n      }\n    }\n    if (completed) {\n      sendToolResponses(invokeConfig);\n    }\n  };\n\n  // Send a message (non-streaming)\n  const sendMessage = useCallback(async (\n    input: string | Part[],\n    metadata?: MessageMetadata\n  ) => {\n    if (!agent) return;\n\n    // Add user message immediately\n    const userMessage: Message = DistriClient.initMessage(input, 'user', { contextId: threadId, metadata });\n    setMessages((prev) => [...prev, userMessage]);\n\n    const params = DistriClient.initMessageParams(userMessage, invokeConfig.configuration, metadata);\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await agent.invoke(params);\n      if (result && 'message' in result && result.message) {\n        setMessages((prev) => [...prev, result.message!]);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to send message'));\n    } finally {\n      setLoading(false);\n    }\n  }, [agent, threadId]);\n\n\n\n  const handleToolCalls = async (toolcalls: ToolCall[], config: InvokeConfig): Promise<void> => {\n    // Handle external tool calls from assistant_response metadata\n    for (const toolCall of toolcalls) {\n      await handleToolCall(toolCall, config);\n    }\n  }\n\n  /**\n* Handle a single external tool call\n*/\n  const handleToolCall = async (toolCall: ToolCall, invokeConfig: InvokeConfig): Promise<any> => {\n    if (!invokeConfig.tools || !invokeConfig.tools[toolCall.tool_name]) {\n      throw new Error(`No handler found for external tool: ${toolCall.tool_name}`);\n    }\n\n\n    const result = await invokeConfig.tools[toolCall.tool_name](toolCall, onToolComplete);\n    return result;\n  }\n\n  const sendToolResponses = async (invokeConfig: InvokeConfig): Promise<void> => {\n    const responseMessage = DistriClient.initMessage([], 'user', { contextId: invokeConfig.contextId });\n    let results: ToolResult[] = [];\n    for (const toolCallId in toolHandlerResults) {\n      results.push({\n        tool_call_id: toolCallId,\n        result: toolHandlerResults[toolCallId].result,\n        success: toolHandlerResults[toolCallId].success,\n        error: toolHandlerResults[toolCallId].error || undefined\n      });\n    }\n    const metadata = {\n      type: 'tool_responses',\n      results: results\n    } as MessageMetadata;\n\n    await sendMessage(responseMessage.parts, metadata);\n  }\n\n  const handleMessageEvent = async (event: Message) => {\n    setMessages((prev) => {\n      const idx = prev.findIndex((m) => m.messageId === event.messageId);\n      if (idx !== -1) {\n        const updated = [...prev];\n        updated[idx] = { ...updated[idx], parts: [...updated[idx].parts, ...event.parts] };\n        return updated;\n      } else {\n        return [...prev, event as Message];\n      }\n    });\n\n    if (event.metadata?.type === 'assistant_response' && event.metadata.tool_calls) {\n\n      console.log('tool calls', event.metadata.tool_calls);\n      let toolCalls = event.metadata.tool_calls as ToolCall[];\n      await handleToolCalls(toolCalls, invokeConfig);\n    }\n  }\n\n  const handleTaskStatusUpdateEvent = async (task_event: TaskStatusUpdateEvent) => {\n    let event = task_event.metadata as unknown as DistriEvent;\n    if (event.type === 'tool_call_start') {\n      let tool_call_start = event as ToolCallStartEvent;\n      initializeToolCallStatus(tool_call_start);\n    } else if (event.type === 'tool_call_args') {\n      let tool_call_args = event as ToolCallArgsEvent;\n      updateToolCallStatus(tool_call_args.data.tool_call_id, {\n        input: tool_call_args.data.delta,\n      });\n    } else if (event.type === 'tool_call_end') {\n      let tool_call_end = event as ToolCallEndEvent;\n      updateToolCallStatus(tool_call_end.data.tool_call_id, {\n        status: 'completed',\n      });\n    } else if (event.type === 'tool_call_result') {\n      let tool_call_result = event as ToolCallResultEvent;\n      updateToolCallStatus(tool_call_result.data.tool_call_id, {\n        status: 'completed',\n        result: tool_call_result.data.result,\n        error: null,\n      });\n    }\n  }\n  // Send a message (streaming)\n  const sendMessageStream = useCallback(async (\n    input: string | Part[],\n    metadata?: MessageMetadata\n  ) => {\n    if (!agent) return;\n\n    const userMessage: Message = DistriClient.initMessage(input, 'user', { contextId: threadId, metadata });\n    setMessages((prev) => [...prev, userMessage]);\n\n    const params = DistriClient.initMessageParams(userMessage, invokeConfig.configuration, metadata);\n\n    try {\n      setLoading(true);\n      setIsStreaming(true);\n      setError(null);\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      abortControllerRef.current = new AbortController();\n\n      const stream = await agent.invokeStream(params);\n\n      for await (const event of stream) {\n        if (abortControllerRef.current?.signal.aborted) break;\n        if (event.kind === 'message') {\n          await handleMessageEvent(event);\n        } else if (event.kind === 'task-status-update') {\n          await handleTaskStatusUpdateEvent(event);\n        }\n      }\n    } catch (err) {\n      if (err instanceof Error && err.name === 'AbortError') return;\n      setError(err instanceof Error ? err : new Error('Failed to stream message'));\n    } finally {\n      setLoading(false);\n      setIsStreaming(false);\n    }\n  }, [agent, threadId, initializeToolCallStatus, updateToolCallStatus]);\n\n\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setToolCallStatus({});\n    setToolHandlerResults({});\n  }, []);\n\n  const refreshMessages = useCallback(async () => {\n    await fetchMessages();\n  }, [fetchMessages]);\n\n\n  return {\n    messages,\n    loading,\n    error,\n    isStreaming,\n    sendMessage,\n    sendMessageStream,\n    refreshMessages,\n    clearMessages,\n    agent: agent ? (agent as any) : null,\n    // Tool call state - updated during streaming\n    toolCallStatus,\n    toolHandlerResults,\n    cancelToolExecution,\n  };\n} ","import React, { useState, useCallback, useRef } from 'react';\nimport {\n  Agent,\n} from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseAgentOptions {\n  agentId: string;\n  autoCreateAgent?: boolean;\n}\n\nexport interface UseAgentResult {\n  // Agent information\n  agent: Agent | null;\n\n  // State management\n  loading: boolean;\n  error: Error | null;\n}\n\n/**\n * useAgent is for agent configuration and invocation.\n * For chat UIs, use useChat instead.\n */\nexport function useAgent({\n  agentId,\n  autoCreateAgent = true,\n}: UseAgentOptions): UseAgentResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [agent, setAgent] = useState<Agent | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const agentRef = useRef<Agent | null>(null);\n\n  // Initialize agent\n  const initializeAgent = useCallback(async () => {\n    if (!client || !agentId || agentRef.current) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const newAgent = await Agent.create(agentId, client);\n      agentRef.current = newAgent;\n      setAgent(newAgent);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to create agent'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client, agentId]);\n\n  // Auto-initialize agent when client is ready\n  React.useEffect(() => {\n    if (!clientLoading && !clientError && autoCreateAgent && client) {\n      initializeAgent();\n    }\n  }, [clientLoading, clientError, autoCreateAgent, client, initializeAgent]);\n\n\n  return {\n    // Agent information\n    agent,\n\n    // State management\n    loading: loading || clientLoading,\n    error: error || clientError,\n  };\n}\n\n","import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { DistriClient, DistriClientConfig } from '@distri/core';\n\ninterface DistriContextValue {\n  client: DistriClient | null;\n  error: Error | null;\n  isLoading: boolean;\n}\n\nconst DistriContext = createContext<DistriContextValue>({\n  client: null,\n  error: null,\n  isLoading: true\n});\n\ninterface DistriProviderProps {\n  config: DistriClientConfig;\n  children: ReactNode;\n}\n\nconst debug = (config: DistriClientConfig, ...args: any[]): void => {\n  if (config.debug) {\n    console.log('[DistriProvider]', ...args);\n  }\n}\n\n\nexport function DistriProvider({ config, children }: DistriProviderProps) {\n  const [client, setClient] = useState<DistriClient | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    let currentClient: DistriClient | null = null;\n\n    try {\n      debug(config, '[DistriProvider] Initializing client with config:', config);\n      currentClient = new DistriClient(config);\n      setClient(currentClient);\n      setError(null);\n      setIsLoading(false);\n      debug(config, '[DistriProvider] Client initialized successfully');\n    } catch (err) {\n      debug(config, '[DistriProvider] Failed to initialize client:', err);\n      const error = err instanceof Error ? err : new Error('Failed to initialize client');\n      setError(error);\n      setClient(null);\n      setIsLoading(false);\n    }\n\n  }, [config]); // Depend on the entire config object since we memoize it now\n\n  const contextValue: DistriContextValue = {\n    client,\n    error,\n    isLoading\n  };\n\n  if (error) {\n    console.error(config, '[DistriProvider] Rendering error state:', error.message);\n  }\n\n  if (isLoading) {\n    debug(config, '[DistriProvider] Rendering loading state');\n  }\n\n  if (client) {\n    debug(config, '[DistriProvider] Rendering with client available');\n  }\n\n  return (\n    <DistriContext.Provider value={contextValue}>\n      {children}\n    </DistriContext.Provider>\n  );\n}\n\nexport function useDistri(): DistriContextValue {\n  const context = useContext(DistriContext);\n  if (!context) {\n    throw new Error('useDistri must be used within a DistriProvider');\n  }\n  return context;\n}\n\nexport function useDistriClient(): DistriClient {\n  const { client, error, isLoading } = useDistri();\n\n  if (isLoading) {\n    throw new Error('Distri client is still loading');\n  }\n\n  if (error) {\n    throw new Error(`Distri client initialization failed: ${error.message}`);\n  }\n\n  if (!client) {\n    throw new Error('Distri client is not initialized');\n  }\n\n  return client;\n}","import { useState, useEffect, useCallback } from 'react';\nimport { DistriAgent } from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseAgentsResult {\n  agents: DistriAgent[];\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  getAgent: (agentId: string) => Promise<DistriAgent>;\n}\n\nexport function useAgents(): UseAgentsResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [agents, setAgents] = useState<DistriAgent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchAgents = useCallback(async () => {\n    if (!client) {\n      console.log('[useAgents] Client not available, skipping fetch');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('[useAgents] Fetching agents...');\n      const fetchedAgents = await client.getAgents();\n      console.log('[useAgents] Fetched agents:', fetchedAgents);\n      setAgents(fetchedAgents);\n    } catch (err) {\n      console.error('[useAgents] Failed to fetch agents:', err);\n      setError(err instanceof Error ? err : new Error('Failed to fetch agents'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const getAgent = useCallback(async (agentId: string): Promise<DistriAgent> => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n\n    try {\n      const agent = await client.getAgent(agentId);\n      \n      // Update the agent in our local state if it exists\n      setAgents(prev => prev.map(a => a.id === agentId ? agent : a));\n      \n      return agent;\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to get agent');\n      setError(error);\n      throw error;\n    }\n  }, [client]);\n\n  useEffect(() => {\n    if (clientLoading) {\n      console.log('[useAgents] Client is loading, waiting...');\n      setLoading(true);\n      return;\n    }\n\n    if (clientError) {\n      console.error('[useAgents] Client error:', clientError);\n      setError(clientError);\n      setLoading(false);\n      return;\n    }\n\n    if (client) {\n      console.log('[useAgents] Client ready, fetching agents');\n      fetchAgents();\n    } else {\n      console.log('[useAgents] No client available');\n      setLoading(false);\n    }\n  }, [clientLoading, clientError, client, fetchAgents]);\n\n  return {\n    agents,\n    loading: loading || clientLoading,\n    error: error || clientError,\n    refetch: fetchAgents,\n    getAgent\n  };\n}","import { useState, useEffect, useCallback } from 'react';\nimport { DistriThread } from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseThreadsResult {\n  threads: DistriThread[];\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  deleteThread: (threadId: string) => Promise<void>;\n  fetchThread: (threadId: string) => Promise<DistriThread>;\n  updateThread: (threadId: string, localId?: string) => Promise<void>;\n}\n\nexport function useThreads(): UseThreadsResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [threads, setThreads] = useState<DistriThread[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchThreads = useCallback(async () => {\n    if (!client) {\n      console.log('[useThreads] Client not available, skipping fetch');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('[useThreads] Fetching threads...');\n      const fetchedThreads = await client.getThreads();\n      console.log('[useThreads] Fetched threads:', fetchedThreads);\n      setThreads(fetchedThreads);\n    } catch (err) {\n      console.error('[useThreads] Failed to fetch threads:', err);\n      setError(err instanceof Error ? err : new Error('Failed to fetch threads'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const fetchThread = useCallback(async (threadId: string) => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n    try {\n      const response = await client.getThread(threadId);\n      return response;\n    } catch (err) {\n      console.error('[useThreads] Failed to fetch thread:', err);\n      throw err;\n    }\n  }, [client]);\n\n  const deleteThread = useCallback(async (threadId: string) => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n\n    try {\n      // Try to delete from server (may not exist yet for local threads)\n      const response = await fetch(`${client.baseUrl}/api/v1/threads/${threadId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete thread');\n      }\n\n      // Remove from local state regardless of server response\n      setThreads(prev => prev.filter(thread => thread.id !== threadId));\n    } catch (err) {\n      // Still remove from local state even if server delete fails\n      setThreads(prev => prev.filter(thread => thread.id !== threadId));\n      console.warn('Failed to delete thread from server, but removed locally:', err);\n    }\n  }, [client]);\n\n  const updateThread = useCallback(async (threadId: string, localId?: string) => {\n    if (!client) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`${client.baseUrl}/api/v1/threads/${threadId}`);\n      if (response.ok) {\n        const updatedThread = await response.json();\n        setThreads(prev => {\n          // If a local thread with localId exists, replace it with the backend thread\n          if (localId && prev.some(thread => thread.id === localId)) {\n            return [\n              updatedThread,\n              ...prev.filter(thread => thread.id !== localId && thread.id !== threadId)\n            ];\n          }\n          // Otherwise, just update by threadId\n          return prev.map(thread =>\n            thread.id === threadId ? updatedThread : thread\n          );\n        });\n      }\n    } catch (err) {\n      console.warn('Failed to update thread:', err);\n    }\n  }, [client]);\n\n  useEffect(() => {\n    if (clientLoading) {\n      console.log('[useThreads] Client is loading, waiting...');\n      setLoading(true);\n      return;\n    }\n\n    if (clientError) {\n      console.error('[useThreads] Client error:', clientError);\n      setError(clientError);\n      setLoading(false);\n      return;\n    }\n\n    if (client) {\n      console.log('[useThreads] Client ready, fetching threads');\n      fetchThreads();\n    } else {\n      console.log('[useThreads] No client available');\n      setLoading(false);\n    }\n  }, [clientLoading, clientError, client, fetchThreads]);\n\n  return {\n    threads,\n    loading: loading || clientLoading,\n    error: error || clientError,\n    refetch: fetchThreads,\n    deleteThread,\n    fetchThread,\n    updateThread\n  };\n}\n\nexport interface UseThreadMessagesOptions {\n  threadId: string | null;\n}","import React, { useState, useEffect } from 'react';\nimport { CheckCircle, XCircle, AlertTriangle, Info, X } from 'lucide-react';\n\nexport interface ToastProps {\n  message: string;\n  type?: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  onClose?: () => void;\n}\n\nconst Toast: React.FC<ToastProps> = ({\n  message,\n  type = 'info',\n  duration = 3000,\n  onClose\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        setTimeout(() => onClose?.(), 300); // Wait for fade out animation\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [duration, onClose]);\n\n  const getIcon = () => {\n    switch (type) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'info':\n      default:\n        return <Info className=\"w-5 h-5 text-blue-500\" />;\n    }\n  };\n\n  const getBgColor = () => {\n    switch (type) {\n      case 'success':\n        return 'bg-green-50 border-green-200';\n      case 'error':\n        return 'bg-red-50 border-red-200';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200';\n      case 'info':\n      default:\n        return 'bg-blue-50 border-blue-200';\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className={`fixed top-4 right-4 z-50 max-w-sm w-full ${getBgColor()} border rounded-lg shadow-lg transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`}>\n      <div className=\"flex items-start p-4\">\n        <div className=\"flex-shrink-0\">\n          {getIcon()}\n        </div>\n        <div className=\"ml-3 flex-1\">\n          <p className=\"text-sm font-medium text-gray-900\">{message}</p>\n        </div>\n        <div className=\"ml-4 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setIsVisible(false);\n              setTimeout(() => onClose?.(), 300);\n            }}\n            className=\"inline-flex text-gray-400 hover:text-gray-600 focus:outline-none\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Toast; ","import React, { useState } from 'react';\nimport { AlertTriangle, CheckCircle, XCircle } from 'lucide-react';\nimport { ToolCall } from '@distri/core';\n\nexport interface ApprovalDialogProps {\n  toolCalls: ToolCall[];\n  reason?: string;\n  onApprove: () => void;\n  onDeny: () => void;\n  onCancel: () => void;\n}\n\nconst ApprovalDialog: React.FC<ApprovalDialogProps> = ({\n  toolCalls,\n  reason,\n  onApprove,\n  onDeny,\n  onCancel\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  if (!isVisible) return null;\n\n  const handleApprove = () => {\n    setIsVisible(false);\n    onApprove();\n  };\n\n  const handleDeny = () => {\n    setIsVisible(false);\n    onDeny();\n  };\n\n  const handleCancel = () => {\n    setIsVisible(false);\n    onCancel();\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n        <div className=\"flex items-center p-4 border-b border-gray-200\">\n          <AlertTriangle className=\"w-6 h-6 text-yellow-500 mr-3\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">Tool Execution Approval</h3>\n        </div>\n\n        <div className=\"p-4\">\n          {reason && (\n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-700\">{reason}</p>\n            </div>\n          )}\n\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Tools to execute:</h4>\n            <div className=\"space-y-2\">\n              {toolCalls.map((toolCall) => (\n                <div key={toolCall.tool_call_id} className=\"flex items-center p-2 bg-gray-50 rounded\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900\">{toolCall.tool_name}</p>\n                    {toolCall.input && (\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        {typeof toolCall.input === 'string'\n                          ? toolCall.input\n                          : JSON.stringify(toolCall.input)\n                        }\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={handleApprove}\n              className=\"flex-1 flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n            >\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Approve\n            </button>\n            <button\n              onClick={handleDeny}\n              className=\"flex-1 flex items-center justify-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\"\n            >\n              <XCircle className=\"w-4 h-4 mr-2\" />\n              Deny\n            </button>\n            <button\n              onClick={handleCancel}\n              className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ApprovalDialog; ","import React, { useState, useCallback, useEffect } from 'react';\nimport { X, Loader2 } from 'lucide-react';\nimport { ToolCall, ToolResult } from '@distri/core';\nimport Toast from './Toast';\nimport ApprovalDialog from './ApprovalDialog';\nimport {\n  createBuiltinToolHandlers,\n  processExternalToolCalls,\n  initializeBuiltinHandlers,\n  clearPendingToolCalls\n} from '../builtinHandlers';\n\nexport interface ExternalToolManagerProps {\n  toolCalls: ToolCall[];\n  onToolComplete: (results: ToolResult[]) => void;\n  onCancel: () => void;\n}\n\ninterface ToastState {\n  id: string;\n  message: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n}\n\ninterface ApprovalDialogState {\n  toolCalls: ToolCall[];\n  reason?: string;\n  resolve: (approved: boolean) => void;\n}\n\nconst ExternalToolManager: React.FC<ExternalToolManagerProps> = ({\n  toolCalls,\n  onToolComplete,\n  onCancel\n}) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [toasts, setToasts] = useState<ToastState[]>([]);\n  const [approvalDialog, setApprovalDialog] = useState<ApprovalDialogState | null>(null);\n  const [processingResults, setProcessingResults] = useState<ToolResult[]>([]);\n\n  // Initialize builtin handlers with callbacks\n  useEffect(() => {\n    initializeBuiltinHandlers({\n      onToolComplete: (results: ToolResult[]) => {\n        setProcessingResults(prev => [...prev, ...results]);\n        onToolComplete(results);\n      },\n      onCancel: () => {\n        clearPendingToolCalls();\n        onCancel();\n      },\n      showToast: (message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') => {\n        const id = Math.random().toString(36).substr(2, 9);\n        setToasts(prev => [...prev, { id, message, type }]);\n      },\n      showApprovalDialog: (toolCalls: ToolCall[], reason?: string): Promise<boolean> => {\n        return new Promise((resolve) => {\n          setApprovalDialog({ toolCalls, reason, resolve });\n        });\n      }\n    });\n  }, [onToolComplete, onCancel]);\n\n  // Process tool calls when they are received\n  useEffect(() => {\n    if (toolCalls.length > 0 && !isProcessing) {\n      processToolCalls();\n    }\n  }, [toolCalls]);\n\n  const processToolCalls = useCallback(async () => {\n    if (toolCalls.length === 0) return;\n\n    setIsProcessing(true);\n    setProcessingResults([]);\n\n    try {\n      const handlers = createBuiltinToolHandlers();\n\n      // Create a local onToolComplete callback for this processing session\n      const localOnToolComplete = async (results: ToolResult[]) => {\n        setProcessingResults(prev => [...prev, ...results]);\n        onToolComplete(results);\n      };\n\n      await processExternalToolCalls(toolCalls, handlers, localOnToolComplete);\n      // Results will be handled by the onToolComplete callback\n    } catch (error) {\n      console.error('Error processing tool calls:', error);\n      const errorResults: ToolResult[] = toolCalls.map(toolCall => ({\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }));\n      setProcessingResults(errorResults);\n      onToolComplete(errorResults);\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [toolCalls, onToolComplete]);\n\n  const handleApprovalDialogResponse = useCallback((approved: boolean) => {\n    if (approvalDialog) {\n      approvalDialog.resolve(approved);\n      setApprovalDialog(null);\n    }\n  }, [approvalDialog]);\n\n  const handleApprovalDialogCancel = useCallback(() => {\n    if (approvalDialog) {\n      approvalDialog.resolve(false);\n      setApprovalDialog(null);\n    }\n  }, [approvalDialog]);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n\n  if (toolCalls.length === 0) return null;\n\n  return (\n    <>\n      {/* Tool Processing Status */}\n      <div className=\"my-4 p-4 border border-blue-200 bg-blue-50 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center gap-2\">\n            <Loader2 className={`w-5 h-5 text-blue-600 ${isProcessing ? 'animate-spin' : ''}`} />\n            <span className=\"font-semibold text-blue-800\">\n              {isProcessing ? 'Processing External Tools...' : 'External Tools Completed'}\n            </span>\n          </div>\n          <button\n            onClick={onCancel}\n            className=\"flex items-center gap-1 px-2 py-1 text-sm text-red-600 hover:text-red-800 hover:bg-red-100 rounded transition-colors\"\n          >\n            <X className=\"w-4 h-4\" />\n            Cancel\n          </button>\n        </div>\n\n        {/* Tool Call Status */}\n        <div className=\"space-y-2\">\n          {toolCalls.map((toolCall) => {\n            const result = processingResults.find(r => r.tool_call_id === toolCall.tool_call_id);\n            const status = result ? (result.success ? 'completed' : 'error') : (isProcessing ? 'processing' : 'pending');\n\n            return (\n              <div key={toolCall.tool_call_id} className=\"flex items-center justify-between p-2 bg-white rounded border\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium\">{toolCall.tool_name}</span>\n                  <span className={`text-sm ${status === 'completed' ? 'text-green-600' :\n                    status === 'error' ? 'text-red-600' :\n                      status === 'processing' ? 'text-blue-600' :\n                        'text-gray-500'\n                    }`}>\n                    {status}\n                  </span>\n                </div>\n                {result && !result.success && (\n                  <span className=\"text-xs text-red-600\">{result.error}</span>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Results Summary */}\n        {processingResults.length > 0 && (\n          <div className=\"mt-3 p-2 bg-gray-100 rounded\">\n            <p className=\"text-sm text-gray-700\">\n              {processingResults.filter(r => r.success).length} of {processingResults.length} tools completed successfully\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Approval Dialog */}\n      {approvalDialog && (\n        <ApprovalDialog\n          toolCalls={approvalDialog.toolCalls}\n          reason={approvalDialog.reason}\n          onApprove={() => handleApprovalDialogResponse(true)}\n          onDeny={() => handleApprovalDialogResponse(false)}\n          onCancel={handleApprovalDialogCancel}\n        />\n      )}\n\n      {/* Toasts */}\n      {toasts.map((toast) => (\n        <Toast\n          key={toast.id}\n          message={toast.message}\n          type={toast.type}\n          onClose={() => removeToast(toast.id)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default ExternalToolManager; ","import { ToolHandler, ToolCall, ToolResult, APPROVAL_REQUEST_TOOL_NAME } from '@distri/core';\n\n// Global state for managing tool execution\nlet pendingToolCalls: Map<string, { toolCall: ToolCall; resolve: (result: ToolResult) => void }> = new Map();\n\n// Toast management\nlet showToast: ((message: string, type?: 'success' | 'error' | 'warning' | 'info') => void) | null = null;\n\n// Approval dialog management\nlet showApprovalDialog: ((toolCalls: ToolCall[], reason?: string) => Promise<boolean>) | null = null;\n\n/**\n * Initialize the builtin handlers with callbacks\n */\nexport const initializeBuiltinHandlers = (callbacks: {\n  onToolComplete: (results: ToolResult[]) => void;\n  onCancel: () => void;\n  showToast: (message: string, type?: 'success' | 'error' | 'warning' | 'info') => void;\n  showApprovalDialog: (toolCalls: ToolCall[], reason?: string) => Promise<boolean>;\n}) => {\n  showToast = callbacks.showToast;\n  showApprovalDialog = callbacks.showApprovalDialog;\n};\n\n/**\n * Clear pending tool calls\n */\nexport const clearPendingToolCalls = () => {\n  pendingToolCalls.clear();\n};\n\n/**\n * Builtin tool handlers using the new ToolHandler interface\n */\nexport const createBuiltinToolHandlers = (): Record<string, ToolHandler> => ({\n  // Approval request handler - opens a dialog\n  [APPROVAL_REQUEST_TOOL_NAME]: async (toolCall: ToolCall, onToolComplete: (result: ToolResult) => Promise<void>): Promise<{} | null> => {\n    try {\n      const input = JSON.parse(toolCall.input);\n      const toolCallsToApprove: ToolCall[] = input.tool_calls || [];\n      const reason: string = input.reason;\n\n      if (!showApprovalDialog) {\n        console.warn('Approval dialog not initialized');\n        return null;\n      }\n\n      const approved = await showApprovalDialog(toolCallsToApprove, reason);\n\n      // Report completion\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: { approved, reason: approved ? 'Approved by user' : 'Denied by user' },\n        success: true\n      };\n      await onToolComplete(result);\n\n      return {\n        approved,\n        reason: approved ? 'Approved by user' : 'Denied by user',\n        tool_calls: toolCallsToApprove\n      };\n    } catch (error) {\n      console.error('Error in approval request handler:', error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      await onToolComplete(result);\n\n      return null;\n    }\n  },\n\n  // Toast handler - shows a toast and returns success\n  toast: async (toolCall: ToolCall, onToolComplete: (result: ToolResult) => Promise<void>): Promise<{} | null> => {\n    try {\n      const input = JSON.parse(toolCall.input);\n      const message: string = input.message || 'Toast message';\n      const type: 'success' | 'error' | 'warning' | 'info' = input.type || 'info';\n\n      if (!showToast) {\n        console.warn('Toast not initialized');\n        return null;\n      }\n\n      showToast(message, type);\n\n      // Report completion\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: { success: true, message: 'Toast displayed successfully' },\n        success: true\n      };\n      await onToolComplete(result);\n\n      return {\n        success: true,\n        message: 'Toast displayed successfully'\n      };\n    } catch (error) {\n      console.error('Error in toast handler:', error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      await onToolComplete(result);\n\n      return null;\n    }\n  },\n\n  // Input request handler - shows prompt\n  input_request: async (toolCall: ToolCall, onToolComplete: (result: ToolResult) => Promise<void>): Promise<{} | null> => {\n    try {\n      const input = JSON.parse(toolCall.input);\n      const prompt: string = input.prompt || 'Please provide input:';\n      const defaultValue: string = input.default || '';\n\n      const userInput = window.prompt(prompt, defaultValue);\n\n      if (userInput === null) {\n        // Report cancellation\n        const result: ToolResult = {\n          tool_call_id: toolCall.tool_call_id,\n          result: null,\n          success: false,\n          error: 'User cancelled input'\n        };\n        await onToolComplete(result);\n        return null; // User cancelled\n      }\n\n      // Report completion\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: { input: userInput },\n        success: true\n      };\n      await onToolComplete(result);\n\n      return {\n        input: userInput\n      };\n    } catch (error) {\n      console.error('Error in input request handler:', error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      await onToolComplete(result);\n\n      return null;\n    }\n  }\n});\n\n/**\n * Process external tool calls with handlers\n */\nexport const processExternalToolCalls = async (\n  toolCalls: ToolCall[],\n  handlers: Record<string, ToolHandler>,\n  onToolComplete: (results: ToolResult[]) => Promise<void>\n): Promise<void> => {\n  const results: ToolResult[] = [];\n\n  for (const toolCall of toolCalls) {\n    const handler = handlers[toolCall.tool_name];\n\n    if (!handler) {\n      // No handler found - report as error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: `No handler found for tool: ${toolCall.tool_name}`\n      };\n      results.push(result);\n      continue;\n    }\n\n    try {\n      // Create a wrapper onToolComplete that collects results\n      const singleToolComplete = async (result: ToolResult) => {\n        results.push(result);\n        // Also call the main onToolComplete with all results so far\n        await onToolComplete([...results]);\n      };\n\n      // Execute handler with single tool complete callback\n      await handler(toolCall, singleToolComplete);\n    } catch (error) {\n      console.error(`Error executing tool ${toolCall.tool_name}:`, error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      results.push(result);\n      await onToolComplete([...results]);\n    }\n  }\n}; ","import { ToolCall } from '@distri/core';\n\nexport interface ToolCallState {\n  tool_call_id: string;\n  tool_name: string;\n  status: 'running' | 'completed' | 'error';\n  input: string;\n  result: any;\n  error: string | null;\n}\n\nexport interface ToolHandlerResult {\n  tool_call_id: string;\n  result: any;\n  success: boolean;\n  error: string | null;\n}\n/**\n * Extract external tool calls from messages\n * This function finds messages with assistant_response metadata containing tool calls\n */\nexport const extractExternalToolCalls = (messages: any[]): ToolCall[] => {\n  const externalToolCalls: ToolCall[] = [];\n\n  messages.forEach((message) => {\n    const meta = message.metadata;\n    if (\n      meta &&\n      meta.type === 'assistant_response' &&\n      meta.tool_calls &&\n      Array.isArray(meta.tool_calls)\n    ) {\n      // Add all tool calls from assistant_response metadata\n      meta.tool_calls.forEach((toolCall: ToolCall) => {\n        const existingToolCall = externalToolCalls.find(tc => tc.tool_call_id === toolCall.tool_call_id);\n        if (!existingToolCall) {\n          externalToolCalls.push(toolCall);\n        }\n      });\n    }\n  });\n\n  return externalToolCalls;\n}; "],"mappings":"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","names":["import_react","import_react","import_core","error","React","import_core","toolCallId","metadata","invokeConfig","import_react","error","import_react","import_react","import_jsx_runtime","import_react","import_lucide_react","import_jsx_runtime","import_react","import_lucide_react","import_core","result","import_jsx_runtime","toolCalls","import_core"]}