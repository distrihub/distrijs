{"version":3,"sources":["../src/index.ts","../src/useAgent.ts","../src/DistriProvider.tsx","../src/useAgents.ts","../src/useChat.ts","../src/useThreads.ts","../src/components/Chat.tsx","../src/components/ChatContext.tsx","../src/components/MessageComponents.tsx","../src/components/MessageRenderer.tsx","../src/components/ExternalToolManager.tsx","../src/components/Toast.tsx","../src/components/ApprovalDialog.tsx","../src/builtinHandlers.ts"],"sourcesContent":["// Core hooks\nexport { useAgent } from './useAgent';\nexport { useAgents } from './useAgents';\nexport { useChat } from './useChat';\nexport { useThreads } from './useThreads';\n\n// Components\nexport { default as Chat } from './components/Chat';\nexport { \n  UserMessage, \n  AssistantMessage, \n  AssistantWithToolCalls, \n  Tool,\n  MessageContainer \n} from './components/MessageComponents';\nexport { default as MessageRenderer } from './components/MessageRenderer';\nexport { default as ExternalToolManager } from './components/ExternalToolManager';\nexport { default as Toast } from './components/Toast';\nexport { default as ApprovalDialog } from './components/ApprovalDialog';\n\n// Context and theming\nexport { \n  ChatProvider, \n  useChatConfig, \n  getThemeClasses,\n  type ChatTheme,\n  type ChatConfig,\n  type ChatContextValue\n} from './components/ChatContext';\n\n// Provider\nexport { DistriProvider, useDistri, useDistriClient } from './DistriProvider';\n\n// Built-in handlers\nexport * from './builtinHandlers';\n\n// Re-export types from core\nexport type {\n  DistriAgent,\n  DistriThread,\n  Message,\n  MessageMetadata,\n  ToolHandler,\n  ToolResult,\n  ToolCall,\n  ToolCallState,\n} from '@distri/core';","import React, { useState, useCallback, useRef } from 'react';\nimport {\n  Agent,\n} from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseAgentOptions {\n  agentId: string;\n  autoCreateAgent?: boolean;\n}\n\nexport interface UseAgentResult {\n  // Agent information\n  agent: Agent | null;\n\n  // State management\n  loading: boolean;\n  error: Error | null;\n}\n\n/**\n * useAgent is for agent configuration and invocation.\n * For chat UIs, use useChat instead.\n */\nexport function useAgent({\n  agentId,\n  autoCreateAgent = true,\n}: UseAgentOptions): UseAgentResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [agent, setAgent] = useState<Agent | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const agentRef = useRef<Agent | null>(null);\n\n  // Initialize agent\n  const initializeAgent = useCallback(async () => {\n    if (!client || !agentId || agentRef.current) return;\n\n    try {\n      setLoading(true);\n      setError(null);\n      const newAgent = await Agent.create(agentId, client);\n      agentRef.current = newAgent;\n      setAgent(newAgent);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to create agent'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client, agentId]);\n\n  // Auto-initialize agent when client is ready\n  React.useEffect(() => {\n    if (!clientLoading && !clientError && autoCreateAgent && client) {\n      initializeAgent();\n    }\n  }, [clientLoading, clientError, autoCreateAgent, client, initializeAgent]);\n\n\n  return {\n    // Agent information\n    agent,\n\n    // State management\n    loading: loading || clientLoading,\n    error: error || clientError,\n  };\n}\n\n","import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { DistriClient, DistriClientConfig } from '@distri/core';\n\ninterface DistriContextValue {\n  client: DistriClient | null;\n  error: Error | null;\n  isLoading: boolean;\n}\n\nconst DistriContext = createContext<DistriContextValue>({\n  client: null,\n  error: null,\n  isLoading: true\n});\n\ninterface DistriProviderProps {\n  config: DistriClientConfig;\n  children: ReactNode;\n}\n\nconst debug = (config: DistriClientConfig, ...args: any[]): void => {\n  if (config.debug) {\n    console.log('[DistriProvider]', ...args);\n  }\n}\n\n\nexport function DistriProvider({ config, children }: DistriProviderProps) {\n  const [client, setClient] = useState<DistriClient | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    let currentClient: DistriClient | null = null;\n\n    try {\n      debug(config, '[DistriProvider] Initializing client with config:', config);\n      currentClient = new DistriClient(config);\n      setClient(currentClient);\n      setError(null);\n      setIsLoading(false);\n      debug(config, '[DistriProvider] Client initialized successfully');\n    } catch (err) {\n      debug(config, '[DistriProvider] Failed to initialize client:', err);\n      const error = err instanceof Error ? err : new Error('Failed to initialize client');\n      setError(error);\n      setClient(null);\n      setIsLoading(false);\n    }\n\n  }, [config]); // Depend on the entire config object since we memoize it now\n\n  const contextValue: DistriContextValue = {\n    client,\n    error,\n    isLoading\n  };\n\n  if (error) {\n    console.error(config, '[DistriProvider] Rendering error state:', error.message);\n  }\n\n  if (isLoading) {\n    debug(config, '[DistriProvider] Rendering loading state');\n  }\n\n  if (client) {\n    debug(config, '[DistriProvider] Rendering with client available');\n  }\n\n  return (\n    <DistriContext.Provider value={contextValue}>\n      {children}\n    </DistriContext.Provider>\n  );\n}\n\nexport function useDistri(): DistriContextValue {\n  const context = useContext(DistriContext);\n  if (!context) {\n    throw new Error('useDistri must be used within a DistriProvider');\n  }\n  return context;\n}\n\nexport function useDistriClient(): DistriClient {\n  const { client, error, isLoading } = useDistri();\n\n  if (isLoading) {\n    throw new Error('Distri client is still loading');\n  }\n\n  if (error) {\n    throw new Error(`Distri client initialization failed: ${error.message}`);\n  }\n\n  if (!client) {\n    throw new Error('Distri client is not initialized');\n  }\n\n  return client;\n}","import { useState, useEffect, useCallback } from 'react';\nimport { DistriAgent } from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseAgentsResult {\n  agents: DistriAgent[];\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  getAgent: (agentId: string) => Promise<DistriAgent>;\n}\n\nexport function useAgents(): UseAgentsResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [agents, setAgents] = useState<DistriAgent[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchAgents = useCallback(async () => {\n    if (!client) {\n      console.log('[useAgents] Client not available, skipping fetch');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('[useAgents] Fetching agents...');\n      const fetchedAgents = await client.getAgents();\n      console.log('[useAgents] Fetched agents:', fetchedAgents);\n      setAgents(fetchedAgents);\n    } catch (err) {\n      console.error('[useAgents] Failed to fetch agents:', err);\n      setError(err instanceof Error ? err : new Error('Failed to fetch agents'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const getAgent = useCallback(async (agentId: string): Promise<DistriAgent> => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n\n    try {\n      const agent = await client.getAgent(agentId);\n      \n      // Update the agent in our local state if it exists\n      setAgents(prev => prev.map(a => a.id === agentId ? agent : a));\n      \n      return agent;\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to get agent');\n      setError(error);\n      throw error;\n    }\n  }, [client]);\n\n  useEffect(() => {\n    if (clientLoading) {\n      console.log('[useAgents] Client is loading, waiting...');\n      setLoading(true);\n      return;\n    }\n\n    if (clientError) {\n      console.error('[useAgents] Client error:', clientError);\n      setError(clientError);\n      setLoading(false);\n      return;\n    }\n\n    if (client) {\n      console.log('[useAgents] Client ready, fetching agents');\n      fetchAgents();\n    } else {\n      console.log('[useAgents] No client available');\n      setLoading(false);\n    }\n  }, [clientLoading, clientError, client, fetchAgents]);\n\n  return {\n    agents,\n    loading: loading || clientLoading,\n    error: error || clientError,\n    refetch: fetchAgents,\n    getAgent\n  };\n}","import { useState, useEffect, useCallback, useRef, useMemo } from 'react';\nimport { useAgent } from './useAgent';\nimport {\n  type Message,\n  type ToolHandler,\n  type MessageMetadata,\n  type ToolResult,\n  type ToolCall,\n  InvokeConfig,\n  DistriClient,\n  DistriEvent,\n  ToolCallResultEvent,\n  ToolCallStartEvent,\n  ToolCallArgsEvent,\n  ToolCallEndEvent,\n  Agent,\n} from '@distri/core';\nimport type { Part, TaskStatusUpdateEvent } from '@a2a-js/sdk/client';\nimport { ToolCallState, ToolHandlerResult } from './utils/toolCallUtils';\n\nexport interface UseChatOptions {\n  agentId: string;\n  threadId: string;\n  // Optional: pre-configured agent from useAgent\n  agent?: Agent;\n  // Optional: agent configuration\n  tools?: Record<string, ToolHandler>;\n  // Optional: Metadata to pass to the agent\n  metadata?: any\n}\n\nexport interface UseChatResult {\n  messages: Message[];\n  loading: boolean;\n  error: Error | null;\n  isStreaming: boolean;\n  sendMessage: (input: string | Part[], metadata?: MessageMetadata) => Promise<void>;\n  sendMessageStream: (input: string | Part[], metadata?: MessageMetadata) => Promise<void>;\n  refreshMessages: () => Promise<void>;\n  clearMessages: () => void;\n  agent: Agent | null;\n  // Tool call state - updated during streaming\n  toolCallStatus: Record<string, ToolCallState>;\n  toolHandlerResults: Record<string, ToolHandlerResult>;\n  cancelToolExecution: () => void;\n}\n\n/**\n * useChat is the main hook for chat UIs.\n * It handles all chat logic internally and can optionally accept a pre-configured agent.\n * For advanced agent configuration, use useAgent and pass the agent to useChat.\n * \n * sendParams: MessageSendParams configuration (auth, output modes, etc.)\n * {\n *   configuration: {\n *     acceptedOutputModes: ['text/plain'],\n *     blocking: false\n *   },\n *   // Executor Metadata (https://github.com/distrihub/distri/blob/main/distri/src/agent/types.rs#L97)\n *   metadata: {\n *     tools: {\n *       tool1: { .. },\n *       tool2: { ... }\n *     }\n *   }\n * }\n * \n * contextMetadata: MessageMetadata for tool responses and content\n * {\n *   type: 'tool_response',\n *   tool_call_id: '...',\n *   result: '...'\n * }\n */\n\nexport function useChat({\n  agentId,\n  threadId,\n  agent: providedAgent,\n  tools,\n  metadata,\n}: UseChatOptions): UseChatResult {\n  // Use provided agent or create one internally\n  const { agent: internalAgent } = useAgent({\n    agentId,\n  });\n\n  // Use provided agent if it's a proper Agent instance, otherwise use internal agent\n  const agent = (providedAgent && typeof providedAgent.getThreadMessages === 'function') ? providedAgent : internalAgent;\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [isStreaming, setIsStreaming] = useState(false);\n\n  const invokeConfig = useMemo(() => {\n    return {\n      tools: tools,\n      contextId: threadId,\n      configuration: {\n        acceptedOutputModes: ['text/plain'],\n        blocking: false\n      },\n      metadata: metadata\n    } as InvokeConfig;\n  }, [tools]);\n\n  // Tool call status - updated during streaming\n  const [toolCallStatus, setToolCallStatus] = useState<Record<string, ToolCallState>>({});\n\n  // External tool calls - handled separately after streaming\n  const [toolHandlerResults, setToolHandlerResults] = useState<Record<string, ToolHandlerResult>>({});\n\n  const abortControllerRef = useRef<AbortController | null>(null);\n\n  // Fetch messages for the thread\n  const fetchMessages = useCallback(async () => {\n    if (!agent || !threadId) {\n      setMessages([]);\n      return;\n    }\n    try {\n      setLoading(true);\n      setError(null);\n      const fetchedMessages = await agent.getThreadMessages(threadId);\n      setMessages(fetchedMessages);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to fetch messages'));\n      setMessages([]);\n    } finally {\n      setLoading(false);\n    }\n  }, [agent, threadId]);\n\n  useEffect(() => {\n    fetchMessages();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [agent, threadId]);\n\n  // Update tool call status during streaming\n  const updateToolCallStatus = useCallback((toolCallId: string, updates: Partial<ToolCallState>) => {\n    setToolCallStatus(prev => ({\n      ...prev,\n      [toolCallId]: {\n        ...prev[toolCallId],\n        ...updates\n      }\n    }));\n  }, []);\n\n  // Initialize tool call status from streaming events\n  const initializeToolCallStatus = useCallback((event: ToolCallStartEvent) => {\n    const toolCall = event.data;\n    setToolCallStatus(prev => ({\n      ...prev,\n      [toolCall.tool_call_id]: {\n        tool_call_id: toolCall.tool_call_id,\n        tool_name: toolCall.tool_call_name,\n        status: 'running',\n        input: '',\n        result: null,\n        error: null,\n      }\n    }));\n  }, []);\n\n  // Cancel tool execution\n  const cancelToolExecution = useCallback(() => {\n    setToolHandlerResults({});\n    if (abortControllerRef.current) {\n      abortControllerRef.current.abort();\n    }\n  }, []);\n\n  const onToolComplete = async (toolCallId: string, result: ToolResult) => {\n\n    setToolHandlerResults((prev) => ({\n      ...prev,\n      [toolCallId]: {\n        tool_call_id: toolCallId,\n        result: result.result,\n        success: result.success,\n        error: result.error || null\n      }\n    }));\n\n    let completed = true;\n    for (const toolCallId in toolHandlerResults) {\n      if (!toolHandlerResults[toolCallId]) {\n        completed = false;\n        break;\n      }\n    }\n    if (completed) {\n      sendToolResponses(invokeConfig);\n    }\n  };\n\n  // Send a message (non-streaming)\n  const sendMessage = useCallback(async (\n    input: string | Part[],\n    metadata?: MessageMetadata\n  ) => {\n    if (!agent) return;\n\n    // Add user message immediately\n    const userMessage: Message = DistriClient.initMessage(input, 'user', { contextId: threadId, metadata });\n    setMessages((prev) => [...prev, userMessage]);\n\n    const params = DistriClient.initMessageParams(userMessage, invokeConfig.configuration, metadata);\n    try {\n      setLoading(true);\n      setError(null);\n      const result = await agent.invoke(params);\n      if (result && 'message' in result && result.message) {\n        setMessages((prev) => [...prev, result.message as Message]);\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to send message'));\n    } finally {\n      setLoading(false);\n    }\n  }, [agent, threadId]);\n\n\n\n  const handleToolCalls = async (toolcalls: ToolCall[], config: InvokeConfig): Promise<void> => {\n    // Handle external tool calls from assistant_response metadata\n    for (const toolCall of toolcalls) {\n      await handleToolCall(toolCall, config);\n    }\n  }\n\n  /**\n* Handle a single external tool call\n*/\n  const handleToolCall = async (toolCall: ToolCall, invokeConfig: InvokeConfig): Promise<any> => {\n    if (!invokeConfig.tools || !invokeConfig.tools[toolCall.tool_name]) {\n      throw new Error(`No handler found for external tool: ${toolCall.tool_name}`);\n    }\n\n\n    const result = await invokeConfig.tools[toolCall.tool_name](toolCall, onToolComplete);\n    return result;\n  }\n\n  const sendToolResponses = async (invokeConfig: InvokeConfig): Promise<void> => {\n    const responseMessage = DistriClient.initMessage([], 'user', { contextId: invokeConfig.contextId });\n    let results: ToolResult[] = [];\n    for (const toolCallId in toolHandlerResults) {\n      results.push({\n        tool_call_id: toolCallId,\n        result: toolHandlerResults[toolCallId].result,\n        success: toolHandlerResults[toolCallId].success,\n        error: toolHandlerResults[toolCallId].error || undefined\n      });\n    }\n    const metadata = {\n      type: 'tool_responses',\n      results: results\n    } as MessageMetadata;\n\n    await sendMessage(responseMessage.parts, metadata);\n  }\n\n  const handleMessageEvent = async (event: Message) => {\n    setMessages((prev) => {\n      const idx = prev.findIndex((m) => m.messageId === event.messageId);\n      if (idx !== -1) {\n        const updated = [...prev];\n        updated[idx] = { ...updated[idx], parts: [...updated[idx].parts, ...event.parts] };\n        return updated;\n      } else {\n        return [...prev, event as Message];\n      }\n    });\n\n    if (event.metadata?.type === 'assistant_response' && event.metadata.tool_calls) {\n\n      console.log('tool calls', event.metadata.tool_calls);\n      let toolCalls = event.metadata.tool_calls as ToolCall[];\n      await handleToolCalls(toolCalls, invokeConfig);\n    }\n  }\n\n  const handleTaskStatusUpdateEvent = async (task_event: TaskStatusUpdateEvent) => {\n    let event = task_event.metadata as unknown as DistriEvent;\n    if (event.type === 'tool_call_start') {\n      let tool_call_start = event as ToolCallStartEvent;\n      initializeToolCallStatus(tool_call_start);\n    } else if (event.type === 'tool_call_args') {\n      let tool_call_args = event as ToolCallArgsEvent;\n      updateToolCallStatus(tool_call_args.data.tool_call_id, {\n        input: tool_call_args.data.delta,\n      });\n    } else if (event.type === 'tool_call_end') {\n      let tool_call_end = event as ToolCallEndEvent;\n      updateToolCallStatus(tool_call_end.data.tool_call_id, {\n        status: 'completed',\n      });\n    } else if (event.type === 'tool_call_result') {\n      let tool_call_result = event as ToolCallResultEvent;\n      updateToolCallStatus(tool_call_result.data.tool_call_id, {\n        status: 'completed',\n        result: tool_call_result.data.result,\n        error: null,\n      });\n    }\n  }\n  // Send a message (streaming)\n  const sendMessageStream = useCallback(async (\n    input: string | Part[],\n    metadata?: MessageMetadata\n  ) => {\n    if (!agent) return;\n\n    const userMessage: Message = DistriClient.initMessage(input, 'user', { contextId: threadId, metadata });\n    setMessages((prev) => [...prev, userMessage]);\n\n    const params = DistriClient.initMessageParams(userMessage, invokeConfig.configuration, metadata);\n\n    try {\n      setLoading(true);\n      setIsStreaming(true);\n      setError(null);\n      if (abortControllerRef.current) {\n        abortControllerRef.current.abort();\n      }\n      abortControllerRef.current = new AbortController();\n\n      const stream = await agent.invokeStream(params);\n\n      for await (const event of stream) {\n        if (abortControllerRef.current?.signal.aborted) break;\n        if (event.kind === 'message') {\n          await handleMessageEvent(event);\n        } else if (event.kind === 'status-update') {\n          await handleTaskStatusUpdateEvent(event);\n        }\n      }\n    } catch (err) {\n      if (err instanceof Error && err.name === 'AbortError') return;\n      setError(err instanceof Error ? err : new Error('Failed to stream message'));\n    } finally {\n      setLoading(false);\n      setIsStreaming(false);\n    }\n  }, [agent, threadId, initializeToolCallStatus, updateToolCallStatus]);\n\n\n\n  const clearMessages = useCallback(() => {\n    setMessages([]);\n    setToolCallStatus({});\n    setToolHandlerResults({});\n  }, []);\n\n  const refreshMessages = useCallback(async () => {\n    await fetchMessages();\n  }, [fetchMessages]);\n\n\n  return {\n    messages,\n    loading,\n    error,\n    isStreaming,\n    sendMessage,\n    sendMessageStream,\n    refreshMessages,\n    clearMessages,\n    agent: agent ? (agent as any) : null,\n    // Tool call state - updated during streaming\n    toolCallStatus,\n    toolHandlerResults,\n    cancelToolExecution,\n  };\n} ","import { useState, useEffect, useCallback } from 'react';\nimport { DistriThread } from '@distri/core';\nimport { useDistri } from './DistriProvider';\n\nexport interface UseThreadsResult {\n  threads: DistriThread[];\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  deleteThread: (threadId: string) => Promise<void>;\n  fetchThread: (threadId: string) => Promise<DistriThread>;\n  updateThread: (threadId: string, localId?: string) => Promise<void>;\n}\n\nexport function useThreads(): UseThreadsResult {\n  const { client, error: clientError, isLoading: clientLoading } = useDistri();\n  const [threads, setThreads] = useState<DistriThread[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchThreads = useCallback(async () => {\n    if (!client) {\n      console.log('[useThreads] Client not available, skipping fetch');\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setError(null);\n      console.log('[useThreads] Fetching threads...');\n      const fetchedThreads = await client.getThreads();\n      console.log('[useThreads] Fetched threads:', fetchedThreads);\n      setThreads(fetchedThreads);\n    } catch (err) {\n      console.error('[useThreads] Failed to fetch threads:', err);\n      setError(err instanceof Error ? err : new Error('Failed to fetch threads'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const fetchThread = useCallback(async (threadId: string) => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n    try {\n      const response = await client.getThread(threadId);\n      return response;\n    } catch (err) {\n      console.error('[useThreads] Failed to fetch thread:', err);\n      throw err;\n    }\n  }, [client]);\n\n  const deleteThread = useCallback(async (threadId: string) => {\n    if (!client) {\n      throw new Error('Client not available');\n    }\n\n    try {\n      // Try to delete from server (may not exist yet for local threads)\n      const response = await fetch(`${client.baseUrl}/api/v1/threads/${threadId}`, {\n        method: 'DELETE',\n      });\n      if (!response.ok) {\n        throw new Error('Failed to delete thread');\n      }\n\n      // Remove from local state regardless of server response\n      setThreads(prev => prev.filter(thread => thread.id !== threadId));\n    } catch (err) {\n      // Still remove from local state even if server delete fails\n      setThreads(prev => prev.filter(thread => thread.id !== threadId));\n      console.warn('Failed to delete thread from server, but removed locally:', err);\n    }\n  }, [client]);\n\n  const updateThread = useCallback(async (threadId: string, localId?: string) => {\n    if (!client) {\n      return;\n    }\n\n    try {\n      const response = await fetch(`${client.baseUrl}/api/v1/threads/${threadId}`);\n      if (response.ok) {\n        const updatedThread = await response.json();\n        setThreads(prev => {\n          // If a local thread with localId exists, replace it with the backend thread\n          if (localId && prev.some(thread => thread.id === localId)) {\n            return [\n              updatedThread,\n              ...prev.filter(thread => thread.id !== localId && thread.id !== threadId)\n            ];\n          }\n          // Otherwise, just update by threadId\n          return prev.map(thread =>\n            thread.id === threadId ? updatedThread : thread\n          );\n        });\n      }\n    } catch (err) {\n      console.warn('Failed to update thread:', err);\n    }\n  }, [client]);\n\n  useEffect(() => {\n    if (clientLoading) {\n      console.log('[useThreads] Client is loading, waiting...');\n      setLoading(true);\n      return;\n    }\n\n    if (clientError) {\n      console.error('[useThreads] Client error:', clientError);\n      setError(clientError);\n      setLoading(false);\n      return;\n    }\n\n    if (client) {\n      console.log('[useThreads] Client ready, fetching threads');\n      fetchThreads();\n    } else {\n      console.log('[useThreads] No client available');\n      setLoading(false);\n    }\n  }, [clientLoading, clientError, client, fetchThreads]);\n\n  return {\n    threads,\n    loading: loading || clientLoading,\n    error: error || clientError,\n    refetch: fetchThreads,\n    deleteThread,\n    fetchThread,\n    updateThread\n  };\n}\n\nexport interface UseThreadMessagesOptions {\n  threadId: string | null;\n}","import React, { useState, useRef, useEffect, useCallback, useMemo } from 'react';\nimport { Send, Loader2, Square, Eye, EyeOff, Bot } from 'lucide-react';\nimport { Agent, ToolResult } from '@distri/core';\nimport { useChatConfig, ChatProvider } from './ChatContext';\nimport { useChat } from '../useChat';\nimport { UserMessage, AssistantMessage, AssistantWithToolCalls, PlanMessage } from './MessageComponents';\nimport ExternalToolManager from './ExternalToolManager';\n\nexport interface ChatProps {\n  agentId: string;\n  threadId: string;\n  agent?: Agent;\n  tools?: Record<string, any>;\n  metadata?: any;\n  height?: string;\n  onThreadUpdate?: (threadId: string) => void;\n  className?: string;\n}\n\nconst ChatInput: React.FC<{\n  value: string;\n  onChange: (value: string) => void;\n  onSend: () => void;\n  disabled: boolean;\n  isStreaming: boolean;\n  placeholder?: string;\n}> = ({ value, onChange, onSend, disabled, isStreaming, placeholder = \"Type a message...\" }) => {\n\n  const handleKeyPress = useCallback((e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      onSend();\n    }\n  }, [onSend]);\n\n  return (\n    <div className=\"border-t border-gray-700 bg-gray-900 p-4\">\n      <div className=\"max-w-4xl mx-auto\">\n        <div className=\"flex gap-3 items-end\">\n          <div className=\"flex-1 relative flex gap-2 items-center\">\n            <textarea\n              value={value}\n              onChange={(e) => onChange(e.target.value)}\n              onKeyPress={handleKeyPress}\n              placeholder={placeholder}\n              rows={1}\n              className=\"w-full resize-none rounded-xl border border-gray-600 px-4 py-3 pr-12 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-gray-800 text-white placeholder-gray-400\"\n              style={{ minHeight: '52px', maxHeight: '200px' }}\n              disabled={disabled}\n            />\n            <button\n              onClick={onSend}\n              disabled={!value.trim() || disabled}\n              className=\"absolute right-3 h-12 w-12 bottom-3 p-2 rounded-lg bg-blue-600 text-white hover:bg-blue-700 disabled:bg-gray-600 disabled:cursor-not-allowed transition-colors flex items-center justify-center\"\n            >\n              {isStreaming ? (\n                <Square className=\"h-4 w-4\" />\n              ) : (\n                <Send className=\"h-4 w-4\" />\n              )}\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst DebugToggle: React.FC<{\n  showDebug: boolean;\n  onToggle: () => void;\n}> = ({ showDebug, onToggle }) => {\n  return (\n    <button\n      onClick={onToggle}\n      className=\"flex items-center gap-2 px-3 py-1 text-sm border border-gray-600 rounded-lg hover:bg-gray-800 transition-colors text-white\"\n    >\n      {showDebug ? <EyeOff className=\"h-4 w-4\" /> : <Eye className=\"h-4 w-4\" />}\n      Debug\n    </button>\n  );\n};\n\nconst ChatContent: React.FC<ChatProps> = ({\n  agentId,\n  threadId,\n  agent,\n  tools,\n  metadata,\n  height = \"600px\",\n  onThreadUpdate\n}) => {\n  const [input, setInput] = useState('');\n  const messagesEndRef = useRef<HTMLDivElement>(null);\n  const { config, updateConfig } = useChatConfig();\n\n  const {\n    messages,\n    loading,\n    error,\n    isStreaming,\n    sendMessageStream,\n    cancelToolExecution,\n    toolCallStatus,\n    toolHandlerResults,\n  } = useChat({\n    agentId,\n    threadId,\n    agent,\n    tools,\n    metadata,\n  });\n\n  // Helper function to extract text from message parts\n  const extractTextFromMessage = useCallback((message: any): string => {\n    if (!message?.parts || !Array.isArray(message.parts)) {\n      return '';\n    }\n\n    return message.parts\n      .filter((part: any) => part?.kind === 'text' && part?.text)\n      .map((part: any) => part.text)\n      .join('') || '';\n  }, []);\n\n  // Helper function to check if message should be displayed\n  const shouldDisplayMessage = useCallback((message: any): boolean => {\n    if (!message) return false;\n\n    // Always show user messages with content\n    if (message.role === 'user') {\n      const textContent = extractTextFromMessage(message);\n      return textContent.trim().length > 0;\n    }\n\n    // Check if message has text content\n    const textContent = extractTextFromMessage(message);\n    if (textContent.trim()) return true;\n\n    // Always show tool calls (they should be visible regardless of debug mode)\n    if (message.metadata?.type === 'assistant_response' && message.metadata.tool_calls) {\n      return true;\n    }\n\n    // Show plan messages\n    if (message.metadata?.type === 'plan' || message.metadata?.plan) {\n      return true;\n    }\n\n    // Show other metadata messages only if debug is enabled (like \"run started\", etc.)\n    if (message.metadata?.type && message.metadata.type !== 'assistant_response') {\n      return config.showDebugMessages;\n    }\n\n    // Don't show empty messages\n    return false;\n  }, [extractTextFromMessage, config.showDebugMessages, toolCallStatus]);\n\n  const scrollToBottom = useCallback(() => {\n    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });\n  }, []);\n\n  useEffect(() => {\n    if (threadId && messages.length > 0) {\n      scrollToBottom();\n    }\n  }, [messages, threadId, scrollToBottom]);\n\n  const sendMessage = useCallback(async () => {\n    if (!input.trim() || loading || isStreaming) return;\n\n    const messageText = input.trim();\n    setInput('');\n\n    try {\n      await sendMessageStream(messageText);\n      onThreadUpdate?.(threadId);\n    } catch (error) {\n      console.error('Failed to send message:', error);\n      setInput(messageText);\n    }\n  }, [input, loading, isStreaming, sendMessageStream, onThreadUpdate, threadId]);\n\n  // Render messages using new components\n  const renderedMessages = useMemo(() => {\n    return messages\n      .filter(shouldDisplayMessage)\n      .map((message: any, index: number) => {\n        const timestamp = new Date(message.timestamp || Date.now());\n        const messageText = extractTextFromMessage(message);\n        const isUser = message.role === 'user';\n\n        // Handle user messages\n        if (isUser) {\n          return (\n            <UserMessage\n              key={message.messageId || `user-${index}`}\n              content={messageText}\n              timestamp={timestamp}\n            />\n          );\n        }\n\n        // Handle assistant messages with tool calls\n        if (message.metadata?.type === 'assistant_response' && message.metadata.tool_calls) {\n          const toolCallsProps = message.metadata.tool_calls.map((toolCall: any) => {\n            const status = toolCallStatus[toolCall.tool_call_id];\n            return {\n              toolCall,\n              status: status?.status || 'pending',\n              result: status?.result,\n              error: status?.error,\n            };\n          });\n\n          return (\n            <AssistantWithToolCalls\n              key={message.messageId || `assistant-tools-${index}`}\n              content={messageText}\n              toolCalls={toolCallsProps}\n              timestamp={timestamp}\n              isStreaming={isStreaming && index === messages.length - 1}\n              metadata={message.metadata}\n            />\n          );\n        }\n\n        // Handle plan messages\n        if (message.metadata?.type === 'plan' || message.metadata?.plan) {\n          return (\n            <PlanMessage\n              key={message.messageId || `plan-${index}`}\n              content={messageText || message.metadata?.plan || 'Planning...'}\n              duration={message.metadata?.duration}\n              timestamp={timestamp}\n            />\n          );\n        }\n\n        // Handle regular assistant messages\n        return (\n          <AssistantMessage\n            key={message.messageId || `assistant-${index}`}\n            content={messageText || 'Empty message'}\n            timestamp={timestamp}\n            isStreaming={isStreaming && index === messages.length - 1}\n            metadata={message.metadata}\n          />\n        );\n      });\n  }, [messages, shouldDisplayMessage, extractTextFromMessage, toolCallStatus, isStreaming]);\n\n  return (\n    <div className=\"flex flex-col bg-gray-900 text-white\" style={{ height }}>\n      {/* Header */}\n      <div className=\"flex-shrink-0 border-b border-gray-700 bg-gray-900 p-4\">\n        <div className=\"max-w-4xl mx-auto flex items-center justify-between\">\n          <div>\n            {agent && (\n              <>\n                <h2 className=\"text-lg font-semibold text-white\">{agent.name}</h2>\n                <p className=\"text-sm text-gray-400\">{agent.description}</p>\n              </>\n            )}\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <DebugToggle\n              showDebug={config.showDebugMessages}\n              onToggle={() => updateConfig({ showDebugMessages: !config.showDebugMessages })}\n            />\n            {(loading || isStreaming) && (\n              <div className=\"flex items-center text-blue-400\">\n                <Loader2 className=\"h-4 w-4 animate-spin mr-2\" />\n                <span className=\"text-sm\">Processing...</span>\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n\n      {/* Messages */}\n      <div className=\"flex-1 overflow-y-auto bg-gray-900\">\n        {error && (\n          <div className=\"max-w-4xl mx-auto px-4 py-4\">\n            <div className=\"bg-red-900 border border-red-700 rounded-lg p-4\">\n              <p className=\"text-red-200\">Error: {error.message}</p>\n            </div>\n          </div>\n        )}\n\n        <div className=\"min-h-full\">\n          {messages.length === 0 ? (\n            <div className=\"flex-1 flex items-center justify-center\">\n              <div className=\"text-center max-w-2xl mx-auto px-4\">\n                <div className=\"w-16 h-16 bg-green-600 rounded-full flex items-center justify-center mx-auto mb-6\">\n                  <Bot className=\"h-8 w-8 text-white\" />\n                </div>\n                <h1 className=\"text-2xl font-semibold text-white mb-2\">\n                  {agent?.name || \"Assistant\"}\n                </h1>\n                <p className=\"text-gray-400 text-lg mb-8\">\n                  {agent?.description || \"How can I help you today?\"}\n                </p>\n                <div className=\"text-sm text-gray-500\">\n                  <p>Start a conversation by typing a message below.</p>\n                </div>\n              </div>\n            </div>\n          ) : (\n            renderedMessages\n          )}\n        </div>\n\n        <div ref={messagesEndRef} />\n      </div>\n\n      {/* External Tool Manager */}\n      {Object.keys(toolHandlerResults).length > 0 && (\n        <div className=\"flex-shrink-0 border-t border-gray-700 bg-gray-800 p-4\">\n          <div className=\"max-w-4xl mx-auto\">\n            <ExternalToolManager\n              toolCalls={[]}\n              onToolComplete={async (_results: ToolResult[]) => {\n                onThreadUpdate?.(threadId);\n              }}\n              onCancel={cancelToolExecution}\n            />\n          </div>\n        </div>\n      )}\n\n      {/* Input */}\n      <ChatInput\n        value={input}\n        onChange={setInput}\n        onSend={sendMessage}\n        disabled={loading}\n        isStreaming={isStreaming}\n      />\n    </div>\n  );\n};\n\n// Main Chat component with provider\nexport const Chat: React.FC<ChatProps> = (props) => {\n  return (\n    <ChatProvider>\n      <ChatContent {...props} />\n    </ChatProvider>\n  );\n};\n\nexport default Chat;","import React, { createContext, useContext, ReactNode } from 'react';\n\nexport type ChatTheme = 'light' | 'dark' | 'chatgpt';\n\nexport interface ChatConfig {\n  theme: ChatTheme;\n  showDebugMessages: boolean;\n  enableCodeHighlighting: boolean;\n  enableMarkdown: boolean;\n  maxMessageWidth: string;\n  borderRadius: string;\n  spacing: string;\n}\n\nexport interface ChatContextValue {\n  config: ChatConfig;\n  updateConfig: (updates: Partial<ChatConfig>) => void;\n}\n\nconst defaultConfig: ChatConfig = {\n  theme: 'chatgpt',\n  showDebugMessages: false,\n  enableCodeHighlighting: true,\n  enableMarkdown: true,\n  maxMessageWidth: '80%',\n  borderRadius: '2xl',\n  spacing: '4',\n};\n\nconst ChatContext = createContext<ChatContextValue | null>(null);\n\nexport interface ChatProviderProps {\n  children: ReactNode;\n  config?: Partial<ChatConfig>;\n}\n\nexport function ChatProvider({ children, config: initialConfig }: ChatProviderProps) {\n  const [config, setConfig] = React.useState<ChatConfig>({\n    ...defaultConfig,\n    ...initialConfig,\n  });\n\n  const updateConfig = React.useCallback((updates: Partial<ChatConfig>) => {\n    setConfig(prev => ({ ...prev, ...updates }));\n  }, []);\n\n  return (\n    <ChatContext.Provider value={{ config, updateConfig }}>\n      {children}\n    </ChatContext.Provider>\n  );\n}\n\nexport function useChatConfig(): ChatContextValue {\n  const context = useContext(ChatContext);\n  if (!context) {\n    throw new Error('useChatConfig must be used within a ChatProvider');\n  }\n  return context;\n}\n\n// Theme utilities\nexport const getThemeClasses = (theme: ChatTheme) => {\n  switch (theme) {\n    case 'dark':\n      return {\n        background: 'bg-gray-900',\n        surface: 'bg-gray-800',\n        text: 'text-gray-100',\n        textSecondary: 'text-gray-400',\n        border: 'border-gray-700',\n        userBubble: 'bg-blue-600 text-white',\n        assistantBubble: 'bg-gray-700 text-gray-100',\n        avatar: {\n          user: 'bg-blue-600',\n          assistant: 'bg-gray-600',\n        },\n      };\n    case 'light':\n      return {\n        background: 'bg-white',\n        surface: 'bg-gray-50',\n        text: 'text-gray-900',\n        textSecondary: 'text-gray-600',\n        border: 'border-gray-200',\n        userBubble: 'bg-blue-500 text-white',\n        assistantBubble: 'bg-gray-100 text-gray-900',\n        avatar: {\n          user: 'bg-blue-500',\n          assistant: 'bg-gray-300',\n        },\n      };\n    case 'chatgpt':\n    default:\n      return {\n        background: 'bg-white',\n        surface: 'bg-gray-50/50',\n        text: 'text-gray-900',\n        textSecondary: 'text-gray-600',\n        border: 'border-gray-200',\n        userBubble: 'bg-gray-900 text-white',\n        assistantBubble: 'bg-white text-gray-900 border border-gray-200',\n        avatar: {\n          user: 'bg-gray-900',\n          assistant: 'bg-green-600',\n        },\n      };\n  }\n};","import React from 'react';\nimport { User, Bot, Settings, Clock, CheckCircle, XCircle, Brain } from 'lucide-react';\nimport { ToolCallState, ToolCall } from '@distri/core';\nimport MessageRenderer from './MessageRenderer';\n\nexport interface BaseMessageProps {\n  content?: string;\n  timestamp?: Date;\n  className?: string;\n  avatar?: React.ReactNode;\n}\n\nexport interface UserMessageProps extends BaseMessageProps {\n  content: string;\n}\n\nexport interface AssistantMessageProps extends BaseMessageProps {\n  content: string;\n  isStreaming?: boolean;\n  metadata?: any;\n}\n\nexport interface ToolCallProps {\n  toolCall: ToolCall | ToolCallState;\n  status?: 'pending' | 'running' | 'completed' | 'error';\n  result?: any;\n  error?: string;\n}\n\nexport interface AssistantWithToolCallsProps extends AssistantMessageProps {\n  toolCalls: ToolCallProps[];\n}\n\nexport interface PlanMessageProps extends BaseMessageProps {\n  content: string;\n  duration?: number;\n  timestamp?: Date;\n}\n\n// Base Message Container\nexport const MessageContainer: React.FC<{\n  children: React.ReactNode;\n  align: 'left' | 'right' | 'center';\n  className?: string;\n}> = ({ children, align, className = '' }) => {\n  const justifyClass = align === 'right' ? 'justify-end' : align === 'center' ? 'justify-center' : 'justify-start';\n\n  return (\n    <div className={`flex ${justifyClass} w-full ${className} mb-4`}>\n      <div className=\"w-full max-w-4xl mx-auto px-4\">\n        {children}\n      </div>\n    </div>\n  );\n};\n\n// Plan Message Component\nexport const PlanMessage: React.FC<PlanMessageProps> = ({\n  content,\n  duration,\n  timestamp,\n  className = ''\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={`bg-gray-800 ${className}`}>\n      <div className=\"flex items-start gap-4 py-6\">\n        <div className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center bg-purple-600\">\n          <Brain className=\"h-4 w-4 text-white\" />\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-white mb-1 flex items-center gap-2\">\n            Thought{duration ? ` for ${duration}s` : ''}\n          </div>\n          <div className=\"prose prose-sm max-w-none prose-invert\">\n            <MessageRenderer\n              content={content}\n              className=\"text-white\"\n            />\n          </div>\n          {timestamp && (\n            <div className=\"text-xs text-gray-400 mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};\n\n// User Message Component\nexport const UserMessage: React.FC<UserMessageProps> = ({\n  content,\n  timestamp,\n  className = '',\n  avatar\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={className}>\n      <div className=\"flex items-start gap-4 py-6\">\n        <div className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center bg-blue-600\">\n          {avatar || <User className=\"h-4 w-4 text-white\" />}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-white mb-1\">You</div>\n          <div className=\"prose prose-sm max-w-none prose-invert\">\n            <MessageRenderer\n              content={content}\n              className=\"text-white\"\n            />\n          </div>\n          {timestamp && (\n            <div className=\"text-xs text-gray-400 mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};\n\n// Assistant Message Component\nexport const AssistantMessage: React.FC<AssistantMessageProps> = ({\n  content,\n  timestamp,\n  isStreaming = false,\n  metadata,\n  className = '',\n  avatar\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={`bg-gray-800 ${className}`}>\n      <div className=\"flex items-start gap-4 py-6\">\n        <div className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center bg-green-600\">\n          {avatar || <Bot className=\"h-4 w-4 text-white\" />}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-white mb-1 flex items-center gap-2\">\n            Assistant\n            {isStreaming && (\n              <div className=\"flex items-center gap-1 text-xs text-gray-400\">\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse\"></div>\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse delay-75\"></div>\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse delay-150\"></div>\n              </div>\n            )}\n          </div>\n          <div className=\"prose prose-sm max-w-none prose-invert\">\n            <MessageRenderer\n              content={content}\n              className=\"text-white\"\n              metadata={metadata}\n            />\n          </div>\n          {timestamp && (\n            <div className=\"text-xs text-gray-400 mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};\n\n// Tool Call Component\nexport const Tool: React.FC<ToolCallProps> = ({\n  toolCall,\n  status = 'pending',\n  result,\n  error\n}) => {\n  const [isExpanded, setIsExpanded] = React.useState(true);\n\n  const getStatusIcon = () => {\n    switch (status) {\n      case 'pending':\n        return <Clock className=\"h-4 w-4 text-gray-400\" />;\n      case 'running':\n        return <Settings className=\"h-4 w-4 text-blue-500 animate-spin\" />;\n      case 'completed':\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"h-4 w-4 text-red-500\" />;\n      default:\n        return <Clock className=\"h-4 w-4 text-gray-400\" />;\n    }\n  };\n\n  const getStatusColor = () => {\n    switch (status) {\n      case 'pending':\n        return 'border-gray-600 bg-gray-800';\n      case 'running':\n        return 'border-blue-600 bg-blue-900';\n      case 'completed':\n        return 'border-green-600 bg-green-900';\n      case 'error':\n        return 'border-red-600 bg-red-900';\n      default:\n        return 'border-gray-600 bg-gray-800';\n    }\n  };\n\n  const toolName = 'tool_name' in toolCall ? toolCall.tool_name : (toolCall as any).tool_name;\n  const toolId = 'tool_call_id' in toolCall ? toolCall.tool_call_id : (toolCall as any).tool_call_id;\n  const input = 'input' in toolCall ? toolCall.input : (toolCall as any).args;\n\n  // Always show the expand/collapse button if there's any content\n  const shouldShowExpand = input || result || error;\n\n  return (\n    <div className={`border rounded-lg ${getStatusColor()}`}>\n      <div\n        className=\"flex items-center gap-2 p-4 cursor-pointer hover:bg-gray-700 transition-colors\"\n        onClick={() => setIsExpanded(!isExpanded)}\n      >\n        {getStatusIcon()}\n        <span className=\"font-medium text-sm text-white flex-1\">{toolName}</span>\n        <span className=\"text-xs text-gray-400 font-mono\">{toolId}</span>\n        {shouldShowExpand && (\n          <button className=\"text-gray-400 hover:text-white transition-colors\">\n            {isExpanded ? (\n              <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 9l-7 7-7-7\" />\n              </svg>\n            ) : (\n              <svg className=\"h-4 w-4\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\n              </svg>\n            )}\n          </button>\n        )}\n      </div>\n\n      {isExpanded && (\n        <div className=\"px-4 pb-4 space-y-3\">\n          {input && (\n            <div>\n              <div className=\"text-xs font-medium text-gray-300 mb-1\">Input:</div>\n              <div className=\"text-sm bg-gray-700 rounded border border-gray-600 p-2 font-mono text-white\">\n                {typeof input === 'string' ? input : JSON.stringify(input, null, 2)}\n              </div>\n            </div>\n          )}\n\n          {result && (\n            <div>\n              <div className=\"text-xs font-medium text-gray-300 mb-1\">Result:</div>\n              <div className=\"text-sm bg-gray-700 rounded border border-gray-600 p-2 font-mono text-white\">\n                {typeof result === 'string' ? result : JSON.stringify(result, null, 2)}\n              </div>\n            </div>\n          )}\n\n          {error && (\n            <div>\n              <div className=\"text-xs font-medium text-red-400 mb-1\">Error:</div>\n              <div className=\"text-sm bg-red-900 rounded border border-red-700 p-2 text-red-200\">\n                {error}\n              </div>\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n};\n\n// Assistant with Tool Calls Component\nexport const AssistantWithToolCalls: React.FC<AssistantWithToolCallsProps> = ({\n  content,\n  toolCalls,\n  timestamp,\n  isStreaming = false,\n  metadata,\n  className = '',\n  avatar\n}) => {\n  return (\n    <MessageContainer align=\"center\" className={`bg-gray-800 ${className}`}>\n      <div className=\"flex items-start gap-4 py-6\">\n        <div className=\"flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center bg-green-600\">\n          {avatar || <Bot className=\"h-4 w-4 text-white\" />}\n        </div>\n        <div className=\"flex-1 min-w-0\">\n          <div className=\"text-sm font-medium text-white mb-1 flex items-center gap-2\">\n            Assistant\n            {isStreaming && (\n              <div className=\"flex items-center gap-1 text-xs text-gray-400\">\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse\"></div>\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse delay-75\"></div>\n                <div className=\"w-1 h-1 bg-gray-400 rounded-full animate-pulse delay-150\"></div>\n              </div>\n            )}\n          </div>\n\n          {content && (\n            <div className=\"prose prose-sm max-w-none mb-4 prose-invert\">\n              <MessageRenderer\n                content={content}\n                className=\"text-white\"\n                metadata={metadata}\n              />\n            </div>\n          )}\n\n          {toolCalls.length > 0 && (\n            <div className=\"space-y-3\">\n              {toolCalls.map((toolCallProps, index) => (\n                <Tool key={index} {...toolCallProps} />\n              ))}\n            </div>\n          )}\n\n          {timestamp && (\n            <div className=\"text-xs text-gray-400 mt-2\">\n              {timestamp.toLocaleTimeString()}\n            </div>\n          )}\n        </div>\n      </div>\n    </MessageContainer>\n  );\n};","import React, { useMemo } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { vscDarkPlus, oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport { Copy, Check, Code2 } from 'lucide-react';\nimport { useChatConfig } from './ChatContext';\n\ninterface MessageRendererProps {\n  content: string;\n  className?: string;\n  metadata?: any;\n}\n\n// Enhanced Code Block Component with better overflow handling\nconst CodeBlock: React.FC<{\n  language: string;\n  children: string;\n  inline?: boolean;\n  isDark?: boolean;\n}> = ({ language, children, inline = false, isDark = false }) => {\n  const [copied, setCopied] = React.useState(false);\n\n  const handleCopy = async () => {\n    try {\n      await navigator.clipboard.writeText(children);\n      setCopied(true);\n      setTimeout(() => setCopied(false), 2000);\n    } catch (err) {\n      console.error('Failed to copy text: ', err);\n    }\n  };\n\n  // Enhanced language detection and normalization\n  const normalizeLanguage = (lang: string): string => {\n    if (!lang) return 'text';\n\n    const langMap: Record<string, string> = {\n      'js': 'javascript',\n      'ts': 'typescript',\n      'jsx': 'javascript',\n      'tsx': 'typescript',\n      'py': 'python',\n      'rb': 'ruby',\n      'sh': 'bash',\n      'shell': 'bash',\n      'yml': 'yaml',\n      'md': 'markdown',\n      'json5': 'json',\n      'dockerfile': 'docker',\n      'rs': 'rust',\n      'go': 'go',\n      'php': 'php',\n      'cpp': 'cpp',\n      'cxx': 'cpp',\n      'cc': 'cpp',\n      'c++': 'cpp',\n      'cs': 'csharp',\n      'kt': 'kotlin',\n      'swift': 'swift',\n      'scala': 'scala',\n      'clj': 'clojure',\n      'cljs': 'clojure',\n      'r': 'r',\n      'matlab': 'matlab',\n      'sql': 'sql',\n      'psql': 'sql',\n      'mysql': 'sql',\n      'sqlite': 'sql',\n    };\n\n    const normalized = lang.toLowerCase();\n    return langMap[normalized] || normalized;\n  };\n\n  const normalizedLanguage = normalizeLanguage(language);\n\n  if (inline) {\n    return (\n      <code className={`px-1.5 py-0.5 rounded text-sm font-mono ${isDark\n        ? 'bg-gray-700 text-gray-200'\n        : 'bg-gray-100 text-gray-800'\n        }`}>\n        {children}\n      </code>\n    );\n  }\n\n  const lineCount = children.split('\\n').length;\n  const shouldShowLineNumbers = lineCount > 4;\n\n  return (\n    <div className=\"relative my-4 rounded-lg border border-gray-200 bg-white overflow-hidden shadow-sm\">\n      <div className=\"flex items-center justify-between bg-gray-50 border-b border-gray-200 px-3 py-2 text-sm\">\n        <div className=\"flex items-center gap-2\">\n          <Code2 className=\"h-4 w-4 text-gray-500\" />\n          <span className=\"font-medium text-gray-700\">\n            {normalizedLanguage === 'text' ? 'Code' : normalizedLanguage.toUpperCase()}\n          </span>\n          <span className=\"text-gray-500 text-xs\">\n            {lineCount} {lineCount === 1 ? 'line' : 'lines'}\n          </span>\n        </div>\n        <button\n          onClick={handleCopy}\n          className=\"flex items-center gap-1 px-2 py-1 rounded hover:bg-gray-200 transition-colors text-gray-600 hover:text-gray-800\"\n          title=\"Copy code\"\n        >\n          {copied ? (\n            <>\n              <Check className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Copied!</span>\n            </>\n          ) : (\n            <>\n              <Copy className=\"h-3 w-3\" />\n              <span className=\"text-xs\">Copy</span>\n            </>\n          )}\n        </button>\n      </div>\n      <div className=\"relative\">\n        <SyntaxHighlighter\n          style={isDark ? vscDarkPlus : oneLight}\n          language={normalizedLanguage}\n          PreTag=\"div\"\n          showLineNumbers={shouldShowLineNumbers}\n          wrapLines={true}\n          wrapLongLines={true}\n          lineNumberStyle={{\n            minWidth: '2.5em',\n            paddingRight: '1em',\n            color: '#9CA3AF',\n            fontSize: '0.75rem',\n            userSelect: 'none'\n          }}\n          customStyle={{\n            margin: 0,\n            padding: '0.75rem',\n            background: isDark ? '#1e1e1e' : '#fafafa',\n            fontSize: '0.875rem',\n            lineHeight: '1.5',\n            fontFamily: 'ui-monospace, SFMono-Regular, \"SF Mono\", Consolas, \"Liberation Mono\", Menlo, monospace',\n            overflowX: 'auto',\n            maxWidth: '100%',\n          }}\n          codeTagProps={{\n            style: {\n              fontSize: '0.875rem',\n              fontFamily: 'inherit',\n            }\n          }}\n        >\n          {children.replace(/\\n$/, '')}\n        </SyntaxHighlighter>\n      </div>\n    </div>\n  );\n};\n\nconst MessageRenderer: React.FC<MessageRendererProps> = ({\n  content,\n  className = \"\",\n}) => {\n  // Try to get chat config if available, otherwise use defaults\n  let config;\n  try {\n    const chatConfig = useChatConfig();\n    config = chatConfig.config;\n  } catch {\n    // If no chat context available, use defaults\n    config = {\n      enableMarkdown: true,\n      enableCodeHighlighting: true,\n      theme: 'chatgpt' as const\n    };\n  }\n\n  // Detect if we're in a dark theme context (e.g., user message with white text)\n  const isDark = className.includes('text-white');\n\n  // Enhanced markdown detection\n  const hasMarkdownSyntax = useMemo(() => {\n    if (!config.enableMarkdown) return false;\n\n    const markdownPatterns = [\n      /^#{1,6}\\s+/m, // Headers\n      /\\*\\*.*?\\*\\*/g, // Bold\n      /\\*.*?\\*/g, // Italic  \n      /`.*?`/g, // Inline code\n      /```[\\s\\S]*?```/g, // Code blocks\n      /^\\s*[-*+]\\s+/m, // Lists\n      /^\\s*\\d+\\.\\s+/m, // Numbered lists\n      /^\\s*>\\s+/m, // Blockquotes\n      /\\[.*?\\]\\(.*?\\)/g, // Links\n      /!\\[.*?\\]\\(.*?\\)/g, // Images\n      /^\\|.*\\|/m, // Tables\n    ];\n\n    return markdownPatterns.some(pattern => pattern.test(content));\n  }, [content, config.enableMarkdown]);\n\n  // Much more conservative code detection to avoid thoughts being marked as code\n  const looksLikeCode = useMemo(() => {\n    if (!config.enableCodeHighlighting) return false;\n    if (hasMarkdownSyntax) return false;\n\n    const lines = content.split('\\n');\n    const totalLines = lines.length;\n\n    // Don't treat short content as code\n    if (totalLines === 1 && content.length < 50) {\n      return false;\n    }\n\n    // Only trigger on very explicit code patterns - NOT thoughts or explanations\n    const explicitCodePatterns = [\n      /^#!\\//, // Shebang\n      /^\\s*(function|const|let|var)\\s+\\w+\\s*[=\\(]/, // JS/TS function/variable declarations\n      /^\\s*(class|interface)\\s+\\w+/, // Class/interface declarations\n      /^\\s*(import|export)\\s+/, // Import/export statements\n      /^\\s*(def|class)\\s+\\w+/, // Python def/class\n      /^\\s*(public|private|protected)\\s+(class|interface|static)/, // Java/C# declarations\n      /^\\s*<\\?php/, // PHP opening tag\n      /^\\s*<html|<head|<body|<div/, // HTML tags\n      /^\\s*\\{[\\s]*\"[\\w\"]+\"\\s*:/, // JSON objects (key-value pairs)\n      /^\\s*SELECT\\s+.*\\s+FROM\\s+/i, // SQL SELECT statements\n      /^\\s*\\/\\*[\\s\\S]*\\*\\//, // Block comments\n      /^[ \\t]*\\/\\/\\s*\\w+/, // Line comments (with actual content)\n      /;\\s*$/, // Lines ending with semicolons\n    ];\n\n    // Must have at least one very explicit code pattern\n    const hasExplicitCode = explicitCodePatterns.some(pattern => pattern.test(content));\n\n    if (!hasExplicitCode) return false;\n\n    // Additional verification: check for programming structure\n    const structuralPatterns = [\n      /[{}[\\]()]/g, // Brackets and braces\n      /^\\s{2,}/m, // Indentation\n      /=>/g, // Arrow functions\n      /[;:]/g, // Semicolons or colons\n    ];\n\n    const structureCount = structuralPatterns.reduce((count, pattern) => {\n      const matches = content.match(pattern);\n      return count + (matches ? matches.length : 0);\n    }, 0);\n\n    // Require both explicit code patterns AND structural elements\n    return structureCount >= 3;\n  }, [content, hasMarkdownSyntax, config.enableCodeHighlighting]);\n\n  // Try to detect language from content\n  const detectLanguage = useMemo((): string => {\n    if (/\\b(function|const|let|var|=>|console\\.log)\\b/.test(content)) return 'javascript';\n    if (/\\b(interface|type|as\\s+\\w+)\\b/.test(content)) return 'typescript';\n    if (/\\b(def|import|from|print|if\\s+\\w+:)\\b/.test(content)) return 'python';\n    if (/\\b(public\\s+class|static\\s+void|System\\.out)\\b/.test(content)) return 'java';\n    if (/\\b(fn|let\\s+mut|impl|match)\\b/.test(content)) return 'rust';\n    if (/\\b(func|package|import|fmt\\.)\\b/.test(content)) return 'go';\n    if (/SELECT.*FROM|INSERT.*INTO|UPDATE.*SET/i.test(content)) return 'sql';\n    if (/<[^>]+>.*<\\/[^>]+>/.test(content)) return 'html';\n    if (/\\{[^}]*:[^}]*\\}/.test(content)) return 'json';\n    if (/^#!\\/bin\\/(bash|sh)/.test(content)) return 'bash';\n    if (/\\$\\w+|echo\\s+/.test(content)) return 'bash';\n    return 'text';\n  }, [content]);\n\n  // Render based on content type\n  if (looksLikeCode) {\n    return (\n      <CodeBlock\n        language={detectLanguage}\n        isDark={isDark}\n      >\n        {content}\n      </CodeBlock>\n    );\n  }\n\n  if (!hasMarkdownSyntax) {\n    return (\n      <div className={`whitespace-pre-wrap break-words ${className}`}>\n        {content}\n      </div>\n    );\n  }\n\n  // Enhanced markdown rendering with better overflow handling\n  return (\n    <div className={`prose prose-sm max-w-none ${isDark ? 'prose-invert' : ''} ${className} break-words`}>\n      <ReactMarkdown\n        components={{\n          code({ className, children }) {\n            const match = /language-(\\w+)/.exec(className || '');\n            const language = match ? match[1] : '';\n\n            return (\n              <CodeBlock\n                language={language}\n                inline={true}\n                isDark={isDark}\n              >\n                {String(children).replace(/\\n$/, '')}\n              </CodeBlock>\n            );\n          },\n          // Enhanced blockquote styling\n          blockquote({ children }) {\n            return (\n              <blockquote className={`border-l-4 pl-4 py-2 italic my-4 rounded-r ${isDark\n                ? 'border-blue-400 text-blue-200 bg-blue-900/20'\n                : 'border-blue-500 text-blue-700 bg-blue-50'\n                }`}>\n                {children}\n              </blockquote>\n            );\n          },\n          // Enhanced table styling with overflow handling\n          table({ children }) {\n            return (\n              <div className=\"overflow-x-auto my-4\">\n                <table className={`min-w-full border-collapse rounded-lg overflow-hidden ${isDark ? 'border-gray-600' : 'border-gray-300'\n                  }`}>\n                  {children}\n                </table>\n              </div>\n            );\n          },\n          th({ children }) {\n            return (\n              <th className={`border px-4 py-2 font-semibold text-left ${isDark\n                ? 'border-gray-600 bg-gray-800'\n                : 'border-gray-300 bg-gray-100'\n                }`}>\n                {children}\n              </th>\n            );\n          },\n          td({ children }) {\n            return (\n              <td className={`border px-4 py-2 ${isDark ? 'border-gray-600' : 'border-gray-300'\n                }`}>\n                {children}\n              </td>\n            );\n          },\n        }}\n      >\n        {content}\n      </ReactMarkdown>\n    </div>\n  );\n};\n\nexport default MessageRenderer;","import React, { useState, useCallback, useEffect } from 'react';\nimport { X, Loader2 } from 'lucide-react';\nimport { ToolCall, ToolResult } from '@distri/core';\nimport Toast from './Toast';\nimport ApprovalDialog from './ApprovalDialog';\nimport {\n  createBuiltinToolHandlers,\n  processExternalToolCalls,\n  initializeBuiltinHandlers,\n  clearPendingToolCalls\n} from '../builtinHandlers';\n\nexport interface ExternalToolManagerProps {\n  toolCalls: ToolCall[];\n  onToolComplete: (results: ToolResult[]) => void;\n  onCancel: () => void;\n}\n\ninterface ToastState {\n  id: string;\n  message: string;\n  type: 'success' | 'error' | 'warning' | 'info';\n}\n\ninterface ApprovalDialogState {\n  toolCalls: ToolCall[];\n  reason?: string;\n  resolve: (approved: boolean) => void;\n}\n\nconst ExternalToolManager: React.FC<ExternalToolManagerProps> = ({\n  toolCalls,\n  onToolComplete,\n  onCancel\n}) => {\n  const [isProcessing, setIsProcessing] = useState(false);\n  const [toasts, setToasts] = useState<ToastState[]>([]);\n  const [approvalDialog, setApprovalDialog] = useState<ApprovalDialogState | null>(null);\n  const [processingResults, setProcessingResults] = useState<ToolResult[]>([]);\n\n  // Initialize builtin handlers with callbacks\n  useEffect(() => {\n    initializeBuiltinHandlers({\n      onToolComplete: (results: ToolResult[]) => {\n        setProcessingResults(prev => [...prev, ...results]);\n        onToolComplete(results);\n      },\n      onCancel: () => {\n        clearPendingToolCalls();\n        onCancel();\n      },\n      showToast: (message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info') => {\n        const id = Math.random().toString(36).substr(2, 9);\n        setToasts(prev => [...prev, { id, message, type }]);\n      },\n      showApprovalDialog: (toolCalls: ToolCall[], reason?: string): Promise<boolean> => {\n        return new Promise((resolve) => {\n          setApprovalDialog({ toolCalls, reason, resolve });\n        });\n      }\n    });\n  }, [onToolComplete, onCancel]);\n\n  // Process tool calls when they are received\n  useEffect(() => {\n    if (toolCalls.length > 0 && !isProcessing) {\n      processToolCalls();\n    }\n  }, [toolCalls]);\n\n  const processToolCalls = useCallback(async () => {\n    if (toolCalls.length === 0) return;\n\n    setIsProcessing(true);\n    setProcessingResults([]);\n\n    try {\n      const handlers = createBuiltinToolHandlers();\n\n      // Create a local onToolComplete callback for this processing session\n      const localOnToolComplete = async (results: ToolResult[]) => {\n        setProcessingResults(prev => [...prev, ...results]);\n        onToolComplete(results);\n      };\n\n      await processExternalToolCalls(toolCalls, handlers, localOnToolComplete);\n      // Results will be handled by the onToolComplete callback\n    } catch (error) {\n      console.error('Error processing tool calls:', error);\n      const errorResults: ToolResult[] = toolCalls.map(toolCall => ({\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      }));\n      setProcessingResults(errorResults);\n      onToolComplete(errorResults);\n    } finally {\n      setIsProcessing(false);\n    }\n  }, [toolCalls, onToolComplete]);\n\n  const handleApprovalDialogResponse = useCallback((approved: boolean) => {\n    if (approvalDialog) {\n      approvalDialog.resolve(approved);\n      setApprovalDialog(null);\n    }\n  }, [approvalDialog]);\n\n  const handleApprovalDialogCancel = useCallback(() => {\n    if (approvalDialog) {\n      approvalDialog.resolve(false);\n      setApprovalDialog(null);\n    }\n  }, [approvalDialog]);\n\n  const removeToast = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id));\n  }, []);\n\n  if (toolCalls.length === 0) return null;\n\n  return (\n    <>\n      {/* Tool Processing Status */}\n      <div className=\"my-4 p-4 border border-blue-200 bg-blue-50 rounded-lg\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center gap-2\">\n            <Loader2 className={`w-5 h-5 text-blue-600 ${isProcessing ? 'animate-spin' : ''}`} />\n            <span className=\"font-semibold text-blue-800\">\n              {isProcessing ? 'Processing External Tools...' : 'External Tools Completed'}\n            </span>\n          </div>\n          <button\n            onClick={onCancel}\n            className=\"flex items-center gap-1 px-2 py-1 text-sm text-red-600 hover:text-red-800 hover:bg-red-100 rounded transition-colors\"\n          >\n            <X className=\"w-4 h-4\" />\n            Cancel\n          </button>\n        </div>\n\n        {/* Tool Call Status */}\n        <div className=\"space-y-2\">\n          {toolCalls.map((toolCall) => {\n            const result = processingResults.find(r => r.tool_call_id === toolCall.tool_call_id);\n            const status = result ? (result.success ? 'completed' : 'error') : (isProcessing ? 'processing' : 'pending');\n\n            return (\n              <div key={toolCall.tool_call_id} className=\"flex items-center justify-between p-2 bg-white rounded border\">\n                <div className=\"flex items-center gap-2\">\n                  <span className=\"font-medium\">{toolCall.tool_name}</span>\n                  <span className={`text-sm ${status === 'completed' ? 'text-green-600' :\n                    status === 'error' ? 'text-red-600' :\n                      status === 'processing' ? 'text-blue-600' :\n                        'text-gray-500'\n                    }`}>\n                    {status}\n                  </span>\n                </div>\n                {result && !result.success && (\n                  <span className=\"text-xs text-red-600\">{result.error}</span>\n                )}\n              </div>\n            );\n          })}\n        </div>\n\n        {/* Results Summary */}\n        {processingResults.length > 0 && (\n          <div className=\"mt-3 p-2 bg-gray-100 rounded\">\n            <p className=\"text-sm text-gray-700\">\n              {processingResults.filter(r => r.success).length} of {processingResults.length} tools completed successfully\n            </p>\n          </div>\n        )}\n      </div>\n\n      {/* Approval Dialog */}\n      {approvalDialog && (\n        <ApprovalDialog\n          toolCalls={approvalDialog.toolCalls}\n          reason={approvalDialog.reason}\n          onApprove={() => handleApprovalDialogResponse(true)}\n          onDeny={() => handleApprovalDialogResponse(false)}\n          onCancel={handleApprovalDialogCancel}\n        />\n      )}\n\n      {/* Toasts */}\n      {toasts.map((toast) => (\n        <Toast\n          key={toast.id}\n          message={toast.message}\n          type={toast.type}\n          onClose={() => removeToast(toast.id)}\n        />\n      ))}\n    </>\n  );\n};\n\nexport default ExternalToolManager; ","import React, { useState, useEffect } from 'react';\nimport { CheckCircle, XCircle, AlertTriangle, Info, X } from 'lucide-react';\n\nexport interface ToastProps {\n  message: string;\n  type?: 'success' | 'error' | 'warning' | 'info';\n  duration?: number;\n  onClose?: () => void;\n}\n\nconst Toast: React.FC<ToastProps> = ({\n  message,\n  type = 'info',\n  duration = 3000,\n  onClose\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  useEffect(() => {\n    if (duration > 0) {\n      const timer = setTimeout(() => {\n        setIsVisible(false);\n        setTimeout(() => onClose?.(), 300); // Wait for fade out animation\n      }, duration);\n      return () => clearTimeout(timer);\n    }\n  }, [duration, onClose]);\n\n  const getIcon = () => {\n    switch (type) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-500\" />;\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-500\" />;\n      case 'warning':\n        return <AlertTriangle className=\"w-5 h-5 text-yellow-500\" />;\n      case 'info':\n      default:\n        return <Info className=\"w-5 h-5 text-blue-500\" />;\n    }\n  };\n\n  const getBgColor = () => {\n    switch (type) {\n      case 'success':\n        return 'bg-green-50 border-green-200';\n      case 'error':\n        return 'bg-red-50 border-red-200';\n      case 'warning':\n        return 'bg-yellow-50 border-yellow-200';\n      case 'info':\n      default:\n        return 'bg-blue-50 border-blue-200';\n    }\n  };\n\n  if (!isVisible) return null;\n\n  return (\n    <div className={`fixed top-4 right-4 z-50 max-w-sm w-full ${getBgColor()} border rounded-lg shadow-lg transition-opacity duration-300 ${isVisible ? 'opacity-100' : 'opacity-0'}`}>\n      <div className=\"flex items-start p-4\">\n        <div className=\"flex-shrink-0\">\n          {getIcon()}\n        </div>\n        <div className=\"ml-3 flex-1\">\n          <p className=\"text-sm font-medium text-gray-900\">{message}</p>\n        </div>\n        <div className=\"ml-4 flex-shrink-0\">\n          <button\n            onClick={() => {\n              setIsVisible(false);\n              setTimeout(() => onClose?.(), 300);\n            }}\n            className=\"inline-flex text-gray-400 hover:text-gray-600 focus:outline-none\"\n          >\n            <X className=\"w-4 h-4\" />\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Toast; ","import React, { useState } from 'react';\nimport { AlertTriangle, CheckCircle, XCircle } from 'lucide-react';\nimport { ToolCall } from '@distri/core';\n\nexport interface ApprovalDialogProps {\n  toolCalls: ToolCall[];\n  reason?: string;\n  onApprove: () => void;\n  onDeny: () => void;\n  onCancel: () => void;\n}\n\nconst ApprovalDialog: React.FC<ApprovalDialogProps> = ({\n  toolCalls,\n  reason,\n  onApprove,\n  onDeny,\n  onCancel\n}) => {\n  const [isVisible, setIsVisible] = useState(true);\n\n  if (!isVisible) return null;\n\n  const handleApprove = () => {\n    setIsVisible(false);\n    onApprove();\n  };\n\n  const handleDeny = () => {\n    setIsVisible(false);\n    onDeny();\n  };\n\n  const handleCancel = () => {\n    setIsVisible(false);\n    onCancel();\n  };\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-md w-full mx-4\">\n        <div className=\"flex items-center p-4 border-b border-gray-200\">\n          <AlertTriangle className=\"w-6 h-6 text-yellow-500 mr-3\" />\n          <h3 className=\"text-lg font-semibold text-gray-900\">Tool Execution Approval</h3>\n        </div>\n\n        <div className=\"p-4\">\n          {reason && (\n            <div className=\"mb-4\">\n              <p className=\"text-sm text-gray-700\">{reason}</p>\n            </div>\n          )}\n\n          <div className=\"mb-4\">\n            <h4 className=\"text-sm font-medium text-gray-900 mb-2\">Tools to execute:</h4>\n            <div className=\"space-y-2\">\n              {toolCalls.map((toolCall) => (\n                <div key={toolCall.tool_call_id} className=\"flex items-center p-2 bg-gray-50 rounded\">\n                  <div className=\"flex-1\">\n                    <p className=\"text-sm font-medium text-gray-900\">{toolCall.tool_name}</p>\n                    {toolCall.input && (\n                      <p className=\"text-xs text-gray-600 mt-1\">\n                        {typeof toolCall.input === 'string'\n                          ? toolCall.input\n                          : JSON.stringify(toolCall.input)\n                        }\n                      </p>\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"flex space-x-3\">\n            <button\n              onClick={handleApprove}\n              className=\"flex-1 flex items-center justify-center px-4 py-2 bg-green-600 text-white rounded-md hover:bg-green-700 transition-colors\"\n            >\n              <CheckCircle className=\"w-4 h-4 mr-2\" />\n              Approve\n            </button>\n            <button\n              onClick={handleDeny}\n              className=\"flex-1 flex items-center justify-center px-4 py-2 bg-red-600 text-white rounded-md hover:bg-red-700 transition-colors\"\n            >\n              <XCircle className=\"w-4 h-4 mr-2\" />\n              Deny\n            </button>\n            <button\n              onClick={handleCancel}\n              className=\"px-4 py-2 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50 transition-colors\"\n            >\n              Cancel\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ApprovalDialog; ","import { ToolHandler, ToolCall, ToolResult, APPROVAL_REQUEST_TOOL_NAME } from '@distri/core';\n\n// Global state for managing tool execution\nlet pendingToolCalls: Map<string, { toolCall: ToolCall; resolve: (result: ToolResult) => void }> = new Map();\n\n// Toast management\nlet showToast: ((message: string, type?: 'success' | 'error' | 'warning' | 'info') => void) | null = null;\n\n// Approval dialog management\nlet showApprovalDialog: ((toolCalls: ToolCall[], reason?: string) => Promise<boolean>) | null = null;\n\n/**\n * Initialize the builtin handlers with callbacks\n */\nexport const initializeBuiltinHandlers = (callbacks: {\n  onToolComplete: (results: ToolResult[]) => void;\n  onCancel: () => void;\n  showToast: (message: string, type?: 'success' | 'error' | 'warning' | 'info') => void;\n  showApprovalDialog: (toolCalls: ToolCall[], reason?: string) => Promise<boolean>;\n}) => {\n  showToast = callbacks.showToast;\n  showApprovalDialog = callbacks.showApprovalDialog;\n};\n\n/**\n * Clear pending tool calls\n */\nexport const clearPendingToolCalls = () => {\n  pendingToolCalls.clear();\n};\n\n/**\n * Builtin tool handlers using the new ToolHandler interface\n */\nexport const createBuiltinToolHandlers = (): Record<string, ToolHandler> => ({\n  // Approval request handler - opens a dialog\n  [APPROVAL_REQUEST_TOOL_NAME]: async (toolCall: ToolCall, onToolComplete: (toolCallId: string, result: ToolResult) => Promise<void>): Promise<{} | null> => {\n    try {\n      const input = JSON.parse(toolCall.input);\n      const toolCallsToApprove: ToolCall[] = input.tool_calls || [];\n      const reason: string = input.reason;\n\n      if (!showApprovalDialog) {\n        console.warn('Approval dialog not initialized');\n        return null;\n      }\n\n      const approved = await showApprovalDialog(toolCallsToApprove, reason);\n\n      // Report completion\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: { approved, reason: approved ? 'Approved by user' : 'Denied by user' },\n        success: true\n      };\n      await onToolComplete(toolCall.tool_call_id, result);\n\n      return {\n        approved,\n        reason: approved ? 'Approved by user' : 'Denied by user',\n        tool_calls: toolCallsToApprove\n      };\n    } catch (error) {\n      console.error('Error in approval request handler:', error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      await onToolComplete(toolCall.tool_call_id, result);\n\n      return null;\n    }\n  },\n\n  // Toast handler - shows a toast and returns success\n  toast: async (toolCall: ToolCall, onToolComplete: (toolCallId: string, result: ToolResult) => Promise<void>): Promise<{} | null> => {\n    try {\n      const input = JSON.parse(toolCall.input);\n      const message: string = input.message || 'Toast message';\n      const type: 'success' | 'error' | 'warning' | 'info' = input.type || 'info';\n\n      if (!showToast) {\n        console.warn('Toast not initialized');\n        return null;\n      }\n\n      showToast(message, type);\n\n      // Report completion\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: { success: true, message: 'Toast displayed successfully' },\n        success: true\n      };\n      await onToolComplete(toolCall.tool_call_id, result);\n\n      return {\n        success: true,\n        message: 'Toast displayed successfully'\n      };\n    } catch (error) {\n      console.error('Error in toast handler:', error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      await onToolComplete(toolCall.tool_call_id, result);\n\n      return null;\n    }\n  },\n\n  // Input request handler - shows prompt\n  input_request: async (toolCall: ToolCall, onToolComplete: (toolCallId: string, result: ToolResult) => Promise<void>): Promise<{} | null> => {\n    try {\n      const input = JSON.parse(toolCall.input);\n      const prompt: string = input.prompt || 'Please provide input:';\n      const defaultValue: string = input.default || '';\n\n      const userInput = window.prompt(prompt, defaultValue);\n\n      if (userInput === null) {\n        // Report cancellation\n        const result: ToolResult = {\n          tool_call_id: toolCall.tool_call_id,\n          result: null,\n          success: false,\n          error: 'User cancelled input'\n        };\n        await onToolComplete(toolCall.tool_call_id, result);\n        return null; // User cancelled\n      }\n\n      // Report completion\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: { input: userInput },\n        success: true\n      };\n      await onToolComplete(toolCall.tool_call_id, result);\n\n      return {\n        input: userInput\n      };\n    } catch (error) {\n      console.error('Error in input request handler:', error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      await onToolComplete(toolCall.tool_call_id, result);\n\n      return null;\n    }\n  }\n});\n\n/**\n * Process external tool calls with handlers\n */\nexport const processExternalToolCalls = async (\n  toolCalls: ToolCall[],\n  handlers: Record<string, ToolHandler>,\n  onToolComplete: (results: ToolResult[]) => Promise<void>\n): Promise<void> => {\n  const results: ToolResult[] = [];\n\n  for (const toolCall of toolCalls) {\n    const handler = handlers[toolCall.tool_name];\n\n    if (!handler) {\n      // No handler found - report as error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: `No handler found for tool: ${toolCall.tool_name}`\n      };\n      results.push(result);\n      continue;\n    }\n\n    try {\n      // Create a wrapper onToolComplete that collects results\n      const singleToolComplete = async (_toolCallId: string, result: ToolResult) => {\n        results.push(result);\n        // Also call the main onToolComplete with all results so far\n        await onToolComplete([...results]);\n      };\n\n      // Execute handler with single tool complete callback\n      await handler(toolCall, singleToolComplete);\n    } catch (error) {\n      console.error(`Error executing tool ${toolCall.tool_name}:`, error);\n\n      // Report error\n      const result: ToolResult = {\n        tool_call_id: toolCall.tool_call_id,\n        result: null,\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n      results.push(result);\n      await onToolComplete([...results]);\n    }\n  }\n}; "],"mappings":"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","names":["import_react","import_core","error","React","import_react","error","import_react","import_core","toolCallId","metadata","invokeConfig","import_react","import_react","import_lucide_react","import_react","import_jsx_runtime","React","import_react","import_lucide_react","import_react","import_jsx_runtime","React","SyntaxHighlighter","ReactMarkdown","className","import_jsx_runtime","React","import_react","import_lucide_react","import_react","import_lucide_react","import_jsx_runtime","import_react","import_lucide_react","import_jsx_runtime","import_core","result","import_jsx_runtime","toolCalls","import_jsx_runtime","textContent","error"]}