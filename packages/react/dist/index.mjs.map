{"version":3,"sources":["../src/DistriProvider.tsx","../src/useAgents.ts","../src/useTask.ts"],"sourcesContent":["import React, { createContext, useContext, useEffect, useState, ReactNode } from 'react';\nimport { DistriClient, DistriClientConfig } from '@distri/core';\n\ninterface DistriContextValue {\n  client: DistriClient | null;\n  error: Error | null;\n}\n\nconst DistriContext = createContext<DistriContextValue>({\n  client: null,\n  error: null\n});\n\ninterface DistriProviderProps {\n  config: DistriClientConfig;\n  children: ReactNode;\n}\n\nexport function DistriProvider({ config, children }: DistriProviderProps) {\n  const [client, setClient] = useState<DistriClient | null>(null);\n  const [error, setError] = useState<Error | null>(null);\n\n  useEffect(() => {\n    try {\n      const newClient = new DistriClient(config);\n      setClient(newClient);\n      setError(null);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to initialize client'));\n      setClient(null);\n    }\n\n    // Cleanup\n    return () => {\n      if (client) {\n        client.disconnect();\n      }\n    };\n  }, [config]);\n\n  const contextValue: DistriContextValue = {\n    client,\n    error\n  };\n\n  return (\n    <DistriContext.Provider value={contextValue}>\n      {children}\n    </DistriContext.Provider>\n  );\n}\n\nexport function useDistri(): DistriContextValue {\n  const context = useContext(DistriContext);\n  if (!context) {\n    throw new Error('useDistri must be used within a DistriProvider');\n  }\n  return context;\n}\n\nexport function useDistriClient(): DistriClient {\n  const { client } = useDistri();\n  if (!client) {\n    throw new Error('Distri client is not initialized');\n  }\n  return client;\n}","import { useState, useEffect, useCallback } from 'react';\nimport { AgentCard } from '@distri/core';\nimport { useDistriClient } from './DistriProvider';\n\nexport interface UseAgentsResult {\n  agents: AgentCard[];\n  loading: boolean;\n  error: Error | null;\n  refetch: () => Promise<void>;\n  getAgent: (agentId: string) => Promise<AgentCard>;\n}\n\nexport function useAgents(): UseAgentsResult {\n  const client = useDistriClient();\n  const [agents, setAgents] = useState<AgentCard[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<Error | null>(null);\n\n  const fetchAgents = useCallback(async () => {\n    try {\n      setLoading(true);\n      setError(null);\n      const fetchedAgents = await client.getAgents();\n      setAgents(fetchedAgents);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to fetch agents'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const getAgent = useCallback(async (agentId: string): Promise<AgentCard> => {\n    try {\n      const agent = await client.getAgent(agentId);\n      \n      // Update the agent in our local state if it exists\n      setAgents(prev => prev.map(a => a.id === agentId ? agent : a));\n      \n      return agent;\n    } catch (err) {\n      const error = err instanceof Error ? err : new Error('Failed to get agent');\n      setError(error);\n      throw error;\n    }\n  }, [client]);\n\n  useEffect(() => {\n    fetchAgents();\n  }, [fetchAgents]);\n\n  return {\n    agents,\n    loading,\n    error,\n    refetch: fetchAgents,\n    getAgent\n  };\n}","import { useState, useEffect, useCallback, useRef } from 'react';\nimport { \n  Task, \n  A2AMessage, \n  MessageSendParams, \n  CreateTaskRequest,\n  DistriClient,\n  TextDeltaEvent,\n  TaskStatusChangedEvent,\n  TaskCompletedEvent,\n  TaskErrorEvent\n} from '@distri/core';\nimport { useDistriClient } from './DistriProvider';\n\nexport interface UseTaskOptions {\n  agentId: string;\n  autoSubscribe?: boolean;\n}\n\nexport interface UseTaskResult {\n  task: Task | null;\n  loading: boolean;\n  error: Error | null;\n  streamingText: string;\n  isStreaming: boolean;\n  sendMessage: (text: string, configuration?: MessageSendParams['configuration']) => Promise<void>;\n  createTask: (message: A2AMessage, configuration?: MessageSendParams['configuration']) => Promise<void>;\n  getTask: (taskId: string) => Promise<void>;\n  clearTask: () => void;\n}\n\nexport function useTask({ agentId, autoSubscribe = true }: UseTaskOptions): UseTaskResult {\n  const client = useDistriClient();\n  const [task, setTask] = useState<Task | null>(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n  const [streamingText, setStreamingText] = useState('');\n  const [isStreaming, setIsStreaming] = useState(false);\n  const eventSourceRef = useRef<EventSource | null>(null);\n\n  const createTask = useCallback(async (\n    message: A2AMessage, \n    configuration?: MessageSendParams['configuration']\n  ) => {\n    try {\n      setLoading(true);\n      setError(null);\n      setStreamingText('');\n      setIsStreaming(true);\n\n      const request: CreateTaskRequest = {\n        agentId,\n        message,\n        configuration\n      };\n\n      const response = await client.createTask(request);\n      \n      // Get the full task details\n      const fullTask = await client.getTask(response.taskId);\n      setTask(fullTask);\n      \n      if (autoSubscribe) {\n        subscribeToAgent();\n      }\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to create task'));\n      setIsStreaming(false);\n    } finally {\n      setLoading(false);\n    }\n  }, [client, agentId, autoSubscribe]);\n\n  const sendMessage = useCallback(async (\n    text: string,\n    configuration?: MessageSendParams['configuration']\n  ) => {\n    const messageId = `msg-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n    const message = DistriClient.createMessage(messageId, text, 'user');\n    \n    await createTask(message, configuration);\n  }, [createTask]);\n\n  const getTask = useCallback(async (taskId: string) => {\n    try {\n      setLoading(true);\n      setError(null);\n      \n      const fetchedTask = await client.getTask(taskId);\n      setTask(fetchedTask);\n    } catch (err) {\n      setError(err instanceof Error ? err : new Error('Failed to fetch task'));\n    } finally {\n      setLoading(false);\n    }\n  }, [client]);\n\n  const clearTask = useCallback(() => {\n    setTask(null);\n    setStreamingText('');\n    setIsStreaming(false);\n    setError(null);\n    \n    if (eventSourceRef.current) {\n      eventSourceRef.current.close();\n      eventSourceRef.current = null;\n    }\n  }, []);\n\n  const subscribeToAgent = useCallback(() => {\n    if (eventSourceRef.current) {\n      return; // Already subscribed\n    }\n\n    try {\n      const eventSource = client.subscribeToAgent(agentId);\n      eventSourceRef.current = eventSource;\n\n      const handleTextDelta = (event: TextDeltaEvent) => {\n        if (task && event.task_id === task.id) {\n          setStreamingText(prev => prev + event.delta);\n        }\n      };\n\n      const handleTaskStatusChanged = (event: TaskStatusChangedEvent) => {\n        if (task && event.task_id === task.id) {\n          setTask(prev => prev ? { ...prev, status: event.status } : null);\n          \n          if (event.status === 'completed' || event.status === 'failed' || event.status === 'canceled') {\n            setIsStreaming(false);\n          }\n        }\n      };\n\n      const handleTaskCompleted = (event: TaskCompletedEvent) => {\n        if (task && event.task_id === task.id) {\n          setIsStreaming(false);\n          // Optionally refresh the full task to get the complete result\n          getTask(event.task_id);\n        }\n      };\n\n      const handleTaskError = (event: TaskErrorEvent) => {\n        if (task && event.task_id === task.id) {\n          setError(new Error(event.error));\n          setIsStreaming(false);\n        }\n      };\n\n      // Subscribe to events\n      client.on('text_delta', handleTextDelta);\n      client.on('task_status_changed', handleTaskStatusChanged);\n      client.on('task_completed', handleTaskCompleted);\n      client.on('task_error', handleTaskError);\n\n      // Store cleanup function\n      const cleanup = () => {\n        client.off('text_delta', handleTextDelta);\n        client.off('task_status_changed', handleTaskStatusChanged);\n        client.off('task_completed', handleTaskCompleted);\n        client.off('task_error', handleTaskError);\n      };\n\n      return cleanup;\n    } catch (err) {\n      console.warn('Failed to subscribe to agent events:', err);\n    }\n  }, [client, agentId, task, getTask]);\n\n  // Auto-subscribe when agent changes\n  useEffect(() => {\n    if (autoSubscribe && agentId) {\n      const cleanup = subscribeToAgent();\n      return cleanup;\n    }\n  }, [autoSubscribe, agentId, subscribeToAgent]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (eventSourceRef.current) {\n        eventSourceRef.current.close();\n      }\n    };\n  }, []);\n\n  return {\n    task,\n    loading,\n    error,\n    streamingText,\n    isStreaming,\n    sendMessage,\n    createTask,\n    getTask,\n    clearTask\n  };\n}"],"mappings":"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","names":["useState","useEffect","useState","error","useEffect","useState","useEffect","useCallback","DistriClient","useState","useCallback","DistriClient","useEffect"]}