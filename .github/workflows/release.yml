name: Release and Publish

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type (patch, minor, major)'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build packages
        run: pnpm build

      - name: Run tests and lint
        run: |
          pnpm lint
          pnpm type-check

      - name: Determine version bump
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "RELEASE_TYPE=${{ github.event.inputs.release_type }}" >> $GITHUB_ENV
          else
            # Auto-determine version bump based on commit messages
            if git log --oneline -1 | grep -q "\[major\]"; then
              echo "RELEASE_TYPE=major" >> $GITHUB_ENV
            elif git log --oneline -1 | grep -q "\[minor\]"; then
              echo "RELEASE_TYPE=minor" >> $GITHUB_ENV
            else
              echo "RELEASE_TYPE=patch" >> $GITHUB_ENV
            fi
          fi

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Version packages
        run: |
          # Update version in all packages
          pnpm -r version ${{ env.RELEASE_TYPE }} --no-git-tag-version
          
          # Get the new version from core package
          NEW_VERSION=$(node -p "require('./packages/core/package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          
          # Update workspace dependency in react package
          cd packages/react
          pnpm pkg set dependencies.@distri/core=$NEW_VERSION
          cd ../..

      - name: Build packages again with new versions
        run: pnpm build

      - name: Publish to npm
        run: |
          # Publish core first
          cd packages/core
          npm publish --access public
          cd ../..
          
          # Then publish react
          cd packages/react
          npm publish --access public
          cd ../..
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Commit version changes
        run: |
          git add .
          git commit -m "chore: release v${{ env.NEW_VERSION }}"
          git tag -a "v${{ env.NEW_VERSION }}" -m "Release v${{ env.NEW_VERSION }}"
          git push origin main --follow-tags

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ env.NEW_VERSION }}
          release_name: Release v${{ env.NEW_VERSION }}
          body: |
            ## Changes in v${{ env.NEW_VERSION }}
            
            ### Packages Published
            - @distri/core@${{ env.NEW_VERSION }}
            - @distri/react@${{ env.NEW_VERSION }}
            
            See the [changelog](https://github.com/distrihub/distrijs/compare/v${{ env.PREVIOUS_VERSION }}...v${{ env.NEW_VERSION }}) for more details.
          draft: false
          prerelease: false